@using Relaks.Models.Store
@using Relaks.Models
@using Relaks.Database
@using Relaks.Mappers

@inject AppDbContext Db;
@inject IJSRuntime JsRuntime;

<AppFileSidebarHeader Title="@(Store.SidebarState.Equals(AppFileListStore.SidebarStateEnum.AddTag) ? $"{Resources.Action.Add} метку" : $"{Resources.Action.Edit} метку")" 
                      WithBackLink="@true"
                      OnBackLink="@GoBack"/>

<EditForm Model="@Model" OnSubmit="@OnSubmit">
    <FluentValidationValidator @ref="Validator" DisableAssemblyScanning="@true"/>
    <ValidationSummary/>
    <div class="mb-3">
        <label for="" class="form-label">@Resources.Action.Title *</label>
        <input type="text" @bind-value="@Model.Title" class="form-control">
        <ValidationMessage For="@(() => Model.Title)"/>
    </div>

    <div class="mb-3">
        <button class="btn btn-primary">
            <i class="las la-lg me-1 @(Store.SidebarState.Equals(AppFileListStore.SidebarStateEnum.EditTag) ? "la-edit" : "la-plus-circle")"></i>
            @(Store.SidebarState.Equals(AppFileListStore.SidebarStateEnum.EditTag) ? Resources.Action.SaveChanges : Resources.Action.Add)
        </button>
    </div>
</EditForm>

@if (Store.SidebarState.Equals(AppFileListStore.SidebarStateEnum.EditTag))
{
    <div class="text-end">
        <button type="button" class="btn btn-link text-danger" @onclick="@OnDelete">
            <i class="las la-trash la-lg"></i>
            @Resources.Action.Delete
        </button>
    </div>
}

@code {
    
    [CascadingParameter]
    [Parameter]
    public AppFileListStore Store { get; set; } = null!;

    [Parameter]
    public EventCallback OnStateHasChanged { get; set; }

    private async Task GoBack()
    {
        Store.SidebarState = AppFileListStore.SidebarStateEnum.Default;
        Store.SidebarEditId = null;
        await OnStateHasChanged.InvokeAsync();
    }

    private FluentValidationValidator Validator { get; set; } = null!;
    
    private BaseFileTag Model { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (Store.EntryId.HasValue)
        {
            if (Store.SidebarState.Equals(AppFileListStore.SidebarStateEnum.AddTag))
            {
                Model = new EntryFileTag()
                {
                    EntryId = Store.EntryId.Value,
                };
            } else if (Store.SidebarEditId.HasValue && Store.SidebarState.Equals(AppFileListStore.SidebarStateEnum.EditTag))
            {
                Model = Db.EntryFileTags.First(x => x.Id.Equals(Store.SidebarEditId.Value));
            }
        }
        else
        {
            throw new NotSupportedException("EntryId not found");
        }
    }

    private async Task OnSubmit()
    {
        if (!await Validator.ValidateAsync()) return;
        if (Store.EntryId.HasValue)
        {
            var entryFileTag = (EntryFileTag) Model;
            entryFileTag.MapTo(entryFileTag);
            
            if (Store.SidebarState.Equals(AppFileListStore.SidebarStateEnum.AddTag))
            {
                Db.EntryFileTags.Add(entryFileTag);
            }

            await Db.SaveChangesAsync();
            Store.GetTags();
            await GoBack();
        }
    }
    
    private async Task OnDelete()
    {
        if (Store.SidebarState.Equals(AppFileListStore.SidebarStateEnum.AddTag)) return;
        var isConfirmed = await JsRuntime.InvokeAsync<bool>("confirm", Resources.Action.Delete_Confirmation);
        if (!isConfirmed) return;
        Db.BaseFileTags.Remove(Model);
        await Db.SaveChangesAsync();
        Store.Req.TagIds.Clear();
        Store.GetTags();
        await GoBack();
    }

}