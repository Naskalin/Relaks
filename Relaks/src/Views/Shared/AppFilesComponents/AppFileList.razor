@using Relaks.Models
@using Relaks.Database
@using Relaks.Database.Repositories
@using Relaks.Models.Misc
@using Relaks.Models.Store

@inject AppDbContext Db;

@* <Dump Data="@Store.Req"/> *@
@* <Dump Data="@Store.SidebarState"/> *@
@* <Dump Data="@Store.BodyState"/> *@

<CascadingValue Value="@Store">
    <div class="row">
        <div class="col-3">
            @switch (Store.SidebarState)
            {
                case AppFileListStore.SidebarStateEnum.Default:
                case AppFileListStore.SidebarStateEnum.EditTags:
                case AppFileListStore.SidebarStateEnum.EditCategories:
                    <AppFileDefaultSidebar OnStateChanged="@StateHasChanged"/>
                    break;
                case AppFileListStore.SidebarStateEnum.AddTag:
                case AppFileListStore.SidebarStateEnum.EditTag:
                    <AppFileTagForm OnStateHasChanged="@StateHasChanged"/>
                    break;
                case AppFileListStore.SidebarStateEnum.AddCategory:
                case AppFileListStore.SidebarStateEnum.EditCategory:
                    <AppFileCategoryForm OnStateHasChanged="@StateHasChanged"/>
                    break;
            }
        </div>
        <div class="col-9 ps-4">
            @switch (Store.BodyState)
            {
                case AppFileListStore.BodyStateEnum.MassChangeCategory:
                    <AppFileMassChangeCategory OnStateHasChanged="@StateHasChanged"/>
                    break;
                case AppFileListStore.BodyStateEnum.EditFile:
                    <AppFileEditForm OnStateHasChanged="@StateHasChanged"/>
                    break;
                default:
                    <AppFileListHeader OnStateHasChanged="@StateHasChanged"/>
                    if (Store.ResultFiles.Items.Any())
                    {
                        <div class="file-list">
                            @foreach (var item in Store.ResultFiles.Items)
                            {
                                <AppFileListItem AppFile="@item" OnStateHasChanged="@StateHasChanged"/>
                            }
                        </div>
                    }
                    else
                    {
                        <p class="text-muted">
                            <i class="las la-frown la-lg"></i> @Resources.Action.NotFoundResults
                        </p>
                    }
                    break;
            }
        </div>
    </div>
</CascadingValue>

@code {

    private AppFileListStore Store { get; set; } = null!;

    [Parameter]
    public Guid? EntryId { get; set; }

    [Parameter]
    public bool? WithEdit { get; set; }

    [Parameter]
    public EventCallback<Guid> OnRowDoubleClicked { get; set; }

    [Parameter]
    public EventCallback<Guid> OnRowClicked { get; set; }

    [Parameter]
    public string? AppFileCategoryNew { get; set; }

    private void OnChangeDiscriminator(string? discriminator)
    {
        Store.Req.Discriminator = discriminator;
        Store.FindFiles();
    }

    protected override Task OnParametersSetAsync()
    {
        Store = new AppFileListStore(Db)
        {
            EntryId = EntryId,
            Req = {EntryId = EntryId},
            WithEdit = WithEdit
        };

        Store.FindFiles();
        Store.GetTags();
        Store.GetCategories();

        return Task.CompletedTask;
    }

}