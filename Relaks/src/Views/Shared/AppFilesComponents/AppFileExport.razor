@using Relaks.Models.Store
@using Relaks.Models
@using Relaks.Database
@using Relaks.Database.Repositories
@using Relaks.Managers

@inject RelaksConfig RelaksConfig;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;

<div class="row align-items-center mb-3 gx-3">
    <div class="col-auto">
        <button @onclick="@HandleCancel" class="btn btn-outline-secondary">
            <i class="las la-arrow-left la-lg me-1 "></i> @Resources.Action.Return
        </button>
    </div>
    <div class="col">
        <h4 class="m-0">Экспорт файлов (@Store.SelectedFileIds.Count шт.) в директорию:</h4>
    </div>
</div>

<div class="mb-3">
    <label for="" class="form-label">Выберите директорию</label>
    <InputText @bind-Value="@DirPath" class="form-control" placeholder="Путь к директории"/>
    <div class="form-text">Путь к директории, в которую будут экспортированы файлы</div>
    @if (IsErrorDirectoryNotExists && !IsErrorPathEmpty)
    {
        <div class="form-text text-danger">Директориия не найдена по указанному пути</div>   
    }
    @if (IsErrorPathEmpty)
    {
        <div class="form-text text-danger">Укажите абсолютный путь к директории для экспорта файлов</div>   
    }
</div>

<button class="btn btn-primary" @onclick="@HandleExport">
    <i class="las la-lg me-1 la-file-export"></i>
    Экспортировать
</button>

@code {
    [CascadingParameter]
    [Parameter]
    public AppFileListStore Store { get; set; } = null!;

    private string DirPath { get; set; } = "";
    private bool IsErrorDirectoryNotExists { get; set; }
    private bool IsErrorPathEmpty { get; set; }

    [Parameter]
    public EventCallback OnStateHasChanged { get; set; }

    private async Task HandleCancel()
    {
        Store.BodyState = AppFileListStore.BodyStateEnum.Default;
        await OnStateHasChanged.InvokeAsync();
    }

    private async Task HandleExport()
    {
        IsErrorDirectoryNotExists = !Directory.Exists(DirPath);
        IsErrorPathEmpty = string.IsNullOrEmpty(DirPath);
        
        if (IsErrorDirectoryNotExists || IsErrorPathEmpty) return;
        
        var appFiles = Store.ResultFiles.Items.Where(x => Store.SelectedFileIds.Contains(x.BaseFile.Id));
        foreach (var appFile in appFiles)
        {
            var fromPath = Path.Combine(RelaksConfig.FilesDirPath, appFile.BaseFile.FilePath());
            var toPath = Path.Combine(DirPath, appFile.BaseFile.DisplayNameWithExtension());
            if (!File.Exists(fromPath)) continue;
            
            File.Copy(fromPath, toPath, true);
        }
    
        Store.SelectedFileIds.Clear();
        await HandleCancel();
    }
}