@using Relaks.Models
@using Relaks.Interfaces
@using Relaks.Models.Store

<li>
    <div class="my-tree__el">
        <button class="btn my-tree__title btn-link @(Store.Req.CategoryId.Equals(Category.Id) ? "active" : "")" type="button" @onclick="@OnClickAsync">
            <i class="las la-angle-right"></i>
            @Category.Title
        </button>
    </div>

    @if (Category.Children.Any())
    {
        <ul class="my-tree">
            @foreach (var child in Category.Children)
            {
                <AppFileCategoryItem Category="@child" OnStateChanged="@(() => OnStateChanged.InvokeAsync())"/>
            }
        </ul>
    }
</li>

@code {

    [Parameter]
    public BaseFileCategory Category { get; set; } = null!;

    [Parameter]
    public EventCallback OnStateChanged { get; set; }

    [CascadingParameter]
    public AppFileListStore Store { get; set; } = null!;

    private async Task OnClickAsync()
    {
        Store.Req.IsWithoutCategory = false;
        if (Store.SidebarState == AppFileListStore.SidebarStateEnum.EditCategories)
        {
            Store.SidebarState = AppFileListStore.SidebarStateEnum.EditCategory;
            Store.SidebarEditId = Category.Id;
        }
        else
        {
            Store.Req.CategoryId = Store.Req.CategoryId.Equals(Category.Id)
                ? Store.Req.CategoryId = null
                : Store.Req.CategoryId = Category.Id;
            Store.FindFiles();
        }
        await OnStateChanged.InvokeAsync();
    }

}