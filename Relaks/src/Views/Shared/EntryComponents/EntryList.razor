@using Relaks.Models
@using Relaks.Database
@using Relaks.Database.Repositories
@using Relaks.Models.Misc
@using Relaks.Utils.Extensions
@using Microsoft.AspNetCore.Http.HttpResults

@inject AppDbContext Db;

<div class="mb-3">
    <div class="row">
        <div class="col-3">
            <div class="input-group">
                <input type="text" class="form-control" @bind="@Req.Search" @oninput="@OnInputSearch" placeholder="Поиск...">
                <button class="btn btn-outline-secondary" type="button" @onclick="@(() => { Req.Search = null; FindData(); })">
                    <i class="las la-times la-lg"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<div class="mb-3">
    <SelectProfession ProfessionIds="@Req.ProfessionIds" ProfessionIdsChanged="@OnProfessionsChanged"/>
</div>

<div class="mb-3">
    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="entry-search-archive-checkbox" @oninput="@OnChangeIsDeleted">
        <label class="form-check-label" for="entry-search-archive-checkbox">
            Архивные объединения
        </label>
    </div>
</div>

<div class="btn-group mb-3">
    @foreach (var kv in EntryDiscriminators())
    {
        <button type="button"
                class="btn @(Req.Discriminator == kv.Value ? "btn-secondary" : "btn-outline-secondary")"
                @onclick="@(() => OnChangeDiscriminator(kv.Value))">
            @kv.Key
        </button>
    }
</div>

<MyPagination ActivePage="@Req.Page"
              OnPageChanged="@OnPageChanged"
              TotalItems="@Result.Total"
              TotalPages="@Result.PageCount"
/>   

<table class="table table-bordered table-hover align-middle">
    <thead>
    <tr style="@(!string.IsNullOrEmpty(Req.Search) ? "opacity: .3; cursor: not-allowed;" : "")">
        <th style="width: 60px"></th>
        <th style="width: 80px"></th>
        <th @onclick="@(() => OnSortChange(nameof(BaseEntry.Name)))" class="cursor-pointer">
            Имя <OrderableIcon Orderable="@Req" Prop="@nameof(BaseEntry.Name)"/>
        </th>
        <th style="width: 80px" @onclick="@(() => OnSortChange(nameof(BaseEntry.StartAt)))" class="cursor-pointer">
            От <OrderableIcon Orderable="@Req" Prop="@nameof(BaseEntry.StartAt)"/>
        </th>
        <th style="width: 80px" @onclick="@(() => OnSortChange(nameof(BaseEntry.EndAt)))" class="cursor-pointer">
            До <OrderableIcon Orderable="@Req" Prop="@nameof(BaseEntry.EndAt)"/>
        </th>
        <th style="width: 150px" @onclick="@(() => OnSortChange(nameof(BaseEntry.CreatedAt)))" class="cursor-pointer">
            Создан <OrderableIcon Orderable="@Req" Prop="@nameof(BaseEntry.CreatedAt)"/>
        </th>
        <th style="width: 150px" @onclick="@(() => OnSortChange(nameof(BaseEntry.UpdatedAt)))" class="cursor-pointer">
            Обновлён <OrderableIcon Orderable="@Req" Prop="@nameof(BaseEntry.UpdatedAt)"/>
        </th>
    </tr>
    </thead>
    <tbody>
    @if (Result.Items.Any())
    {
        @foreach (var item in Result.Items)
        {
            <EntryListItem BaseEntry="@item.BaseEntry"
                           OnRowDoubleClicked="OnRowDoubleClicked"
                           OnRowClicked="OnRowClicked"
                           FtsSnippet="@item.FtsEntry?.Snippet"
                           />
        }
    }
    else
    {
        <tr>
            <td colspan="100%" class="text-muted"><i class="las la-frown la-lg"></i> @Resources.Action.NotFoundResults</td>
        </tr>    
    }
    
    </tbody>
</table>

<MyPagination ActivePage="@Req.Page"
              OnPageChanged="@OnPageChanged"
              TotalItems="@Result.Total"
              TotalPages="@Result.PageCount"
/>

@code {
    [Parameter]
    public EventCallback<Guid> OnRowDoubleClicked { get; set; }
    
    [Parameter]
    public EventCallback<Guid> OnRowClicked { get; set; }

    private EntryFindRequest Req { get; set; } = new()
    {
        Page = 1,
        PerPage = 10,
    };
    
    private PaginatableResult<EntryFindResult> Result { get; set; } = new();
    
    // private string? Search { get; set; }

    private static Dictionary<string, string?> EntryDiscriminators() => new()
    {
        {Resources.Action.All, null},
        {Resources.Entity.EPerson, nameof(EPerson)},
        {Resources.Entity.ECompany, nameof(ECompany)},
        {Resources.Entity.EMeet, nameof(EMeet)},
    };

    private void OnSortChange(string field)
    {
        if (!string.IsNullOrEmpty(Req.Search)) return;
        if (Req.IsOrderByDesc is null)
        {
            Req.OrderBy = field;
            Req.IsOrderByDesc = false;
        }
        else if (Req.IsOrderByDesc is false)
        {
            if (field.Equals(Req.OrderBy))
            {
                Req.IsOrderByDesc = true;
            }
            else
            {
                Req.OrderBy = field;
                Req.IsOrderByDesc = false;
            }
        }
        else
        {
            if (field.Equals(Req.OrderBy))
            {
                Req.OrderBy = null;
                Req.IsOrderByDesc = null;   
            }
            else
            {
                Req.OrderBy = field;
                Req.IsOrderByDesc = false;
            }
        }

        FindData();
    }

    private void OnChangeIsDeleted(ChangeEventArgs e)
    {
        Req.IsDeleted = (bool?) e.Value;
        Req.Page = 1;
        FindData();
    }

    private void OnPageChanged(int page)
    {
        Req.Page = page;
        FindData();
    }
    
    private void OnChangeDiscriminator(string? discriminator)
    {
        Req.Page = 1;
        Req.Discriminator = discriminator;
        FindData();
    }
    

    private void OnInputSearch(ChangeEventArgs e)
    {
        Req.Search = e.Value?.ToString();
        Req.Page = 1;
        FindData();
    }

    private void OnProfessionsChanged(List<Guid> professionIds)
    {
        Req.ProfessionIds = professionIds;
        Result = Db.FindEntries(Req);
    }

    private void FindData()
    {
        Result = Db.FindEntries(Req);
    }

    protected override void OnInitialized()
    {
        FindData();
    }
}