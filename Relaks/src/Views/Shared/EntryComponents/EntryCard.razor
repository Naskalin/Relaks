@using Relaks.Models
@using Relaks.Database
@using Microsoft.EntityFrameworkCore

@inject AppDbContext Db;
@inject NavigationManager NavigationManager;

<CascadingValue Value="@ViewMode">
    <div style="width: 20rem; @CardClasses">
        @if (HideSoftDeleted != true)
        {
            <SoftDeleteShow SoftDeletedReason="@Entry"/>
        }

        <div class="card entry-card @(Entry.DeletedAt != null ? "border-danger" : "")">
            @if (!string.IsNullOrEmpty(Entry.Thumbnail))
            {
                <img src="@Entry.Thumbnail" class="card-img-top" alt="...">
            }
            else
            {
                <CustomAvatar Text="@Entry.Name" Classes="card-img-top"/>
            }
            @if (ViewMode.Equals(ViewModeEnum.WithEdit))
            {
                <EntryCardContactsButtons EntryId="@EntryId"/>
            }
            <div class="card-body">
                <h5 class="card-title text-center">@Entry.Name</h5>
                <div class="row gx-2 align-items-center text-muted mb-3 justify-content-center">
                    <div class="col-auto">
                        <div style="width: 30px; height: 28px;" title="@Resources.Entity.ResourceManager.GetString(Entry.Discriminator)">
                            <i class="@DataHelper.EntityIcon(Entry.Discriminator)" style="font-size: 1.8rem;"></i>
                        </div>
                    </div>
                    <div class="col-auto">
                        @Age()
                        @* @ *@
                        @* <div class="d-flex align-items-center gap-1"> *@
                        @*     <i class="las la-star-half-alt" style="font-size: 1.7rem;"></i> *@
                        @*     <span style="font-size: 1.2rem;">@Entry.Reputation</span> *@
                        @* </div> *@
                    </div>
                </div>

                @if (!string.IsNullOrEmpty(Entry.Description))
                {
                    <p class="card-text text-center">@Entry.Description</p>
                }
                
                @if (Entry.Tags.Any())
                {
                    <EntryCardTags Tags="@Entry.Tags"/>
                }

                <EntryCardContacts EntryInfoId="@EntryInfoId" EntryInfos="@Entry.EntryInfos"/>

                @if (Entry.StartAt != null || Entry.EndAt != null)
                {
                    <div class="row mt-2">
                        <div class="col">
                            @if (Entry.StartAt != null)
                            {
                                <small title="@Resources.Entity.ResourceManager.GetString(string.Format(Entry.Discriminator+"_StartAt"))">
                                    @Entry.StartAt?.ToString(Entry.StartAtWithTime ? "dd.MM.yyyy HH:mm" : "dd.MM.yyyy")
                                </small>
                            }
                        </div>
                        <div class="col text-end">
                            @if (Entry.EndAt != null)
                            {
                                <small title="@Resources.Entity.ResourceManager.GetString(string.Format(Entry.Discriminator + "_EndAt"))">
                                    @Entry.EndAt?.ToString(Entry.EndAtWithTime ? "dd.MM.yyyy HH:mm" : "dd.MM.yyyy")
                                </small>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
</CascadingValue>

@code {
    
    [Parameter]
    public Guid EntryId { get; set; }

    [Parameter]
    public Guid? EntryInfoId { get; set; }

    [Parameter]
    public bool? HideSoftDeleted { get; set; }

    [Parameter]
    public string CardClasses { get; set; } = "";
    
    public enum ViewModeEnum
    {
        Preview,
        WithEdit,
    }

    [Parameter]
    public ViewModeEnum ViewMode { get; set; }

    private BaseEntry Entry { get; set; } = null!;

    protected override void OnParametersSet()
    {
        Entry = Db.BaseEntries
            .Include(x => x.Tags).ThenInclude(x => x.Tag).ThenInclude(x => x.Category)
            .Include(x => x.EntryInfos)
            .First(x => x.Id.Equals(EntryId))
        ;
    }

    // https://stackoverflow.com/a/1595311/5638975
    private int AgeInt(DateTime birthDate, DateTime now)
    {
        var age = now.Year - birthDate.Year;

        if (now.Month < birthDate.Month || (now.Month == birthDate.Month && now.Day < birthDate.Day))
            age--;

        return age;
    }
    
    private string? Age()
    {
        if (!Entry.StartAt.HasValue) return null;
        var years = AgeInt(Entry.StartAt.Value, Entry.EndAt ?? DateTime.Now);
        if (years <= 0) return null;
        
        // https://gist.github.com/xSANCHOSx/bea64a3b51247671811deccb5cc26480
        var t1 = years % 10;
        var t2 = years % 100;
        var ending = t1 == 1 && t2 != 11 ? "год" : t1 is >= 2 and <= 4 && t2 is < 10 or >= 20 ? "года" : "лет";
        return $"({years} {ending})";
    }

}