@using Relaks.Interfaces
@typeparam TNode where TNode : class, ITree<TNode>;

@if (!FilteredIds.Any() || FilteredIds.Contains(Node.Id))
{
    <div class="tree-list__el @(!IsRoot() ? "ms-3" : "") @(IsActive() ? "active" : "")">
        <div class="d-flex">
            @if (Node.Children.Any() && !FilteredIds.Any())
            {
                <div class="col-auto">
                    <button type="button" class="btn btn-circle btn-xs btn-outline-secondary tree-list__collapse-btn" @onclick="@(() => IsOpen = !IsOpen)">
                        <i class="las @(IsOpen ? "la-angle-down" : "la-angle-right")"></i>
                    </button>
                </div>
            }
            <div class="col">
                <div @onclick="@(() => OnClickNode.InvokeAsync(Node.Id))"
                     class="tree-list__el-title p-2 cursor-pointer">
                    @if (!Node.Children.Any())
                    {
                        <i class="las la-angle-right text-secondary me-2"></i>
                    }
                    @Node.Title
                </div>
                
                @if (IsOpen && Node.Children.Any())
                {
                    foreach (var child in Node.Children)
                    {
                        <TreeSelectNode Node="@child" OnClickNode="@OnClickNode" NodeId="@NodeId" FilteredIds="@FilteredIds"/>
                    }
                }
            </div>
        </div>
    </div>
}

@code {
    [Parameter]
    public TNode Node { get; set; } = null!;
    
    [Parameter]
    public EventCallback<Guid> OnClickNode { get; set; }
    
    [Parameter]
    public Guid? NodeId { get; set; }

    [Parameter]
    public List<Guid> FilteredIds { get; set; } = new();

    private bool IsOpen { get; set; } = true;
    private bool IsActive() => NodeId.HasValue && NodeId.Value.Equals(Node.Id);
    private bool IsRoot() => !Node.ParentId.HasValue;

    protected override void OnParametersSet()
    {
        if (FilteredIds.Any() && FilteredIds.Contains(Node.Id))
        {
            IsOpen = true;   
        }
    }

}