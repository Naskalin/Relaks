@* @rendermode @(new InteractiveServerRenderMode(prerender: false)) *@
@inject IJSRuntime Js;
@inject Blazored.LocalStorage.ILocalStorageService LocalStorage;

<button class="btn btn-sm btn-outline-secondary" @onclick="@(() => SetDarkMode(IsDark = !IsDark))" disabled="@IsLoading">
    <i class="las la-adjust la-lg text-secondary" style="@(IsDark ? "transform: rotate(180deg)" : "")"></i>
</button>

@code {

        private const string Dark = "dark";
        private const string Light = "light";

    private bool IsDark { get; set; }
    private bool IsLoading { get; set; }

    private async Task SetDarkMode(bool value)
    {
        if (IsLoading) return;
        try
        {
            IsLoading = true;
            IsDark = value;
            var mode = value ? Dark : Light;
            await Js.InvokeAsync<bool>("SetThemeColorMode", mode);
            await SetToLs(mode);
        }
        catch (Exception e)
        {
            System.Console.WriteLine(e);
        }
        finally
        {
            IsLoading = false;
        }
    }

    private async Task<string> GetFromLs() => await LocalStorage.GetItemAsync<string>("r-theme-color-mode");
    private async Task SetToLs(string mode) => await LocalStorage.SetItemAsync("r-theme-color-mode", mode);
    
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var mode = await GetFromLs();
        if (!string.IsNullOrEmpty(mode))
        {
            await SetDarkMode(mode.Equals(Dark));
        }
        else
        {
            await SetDarkMode(false);
        }
    }

    // protected override async Task OnInitializedAsync()
    // {
    //     var mode = await GetFromLs();
    //     if (!string.IsNullOrEmpty(mode))
    //     {
    //         await SetDarkMode(mode.Equals(Dark));
    //     }
    //     else
    //     {
    //         await SetDarkMode(false);
    //     }
    // }

}