@using Relaks.Models

@inject IJSRuntime JsRuntime;
@implements IDisposable

<div class="card bg-secondary bg-opacity-10 mb-3" data-id="@Group.Id">
    <div class="card-body">
        <div class="row align-items-center mb-4 gx-3">
            @if (GroupsCount > 1)
            {
                <div class="col-auto">
                    <button type="button" class="btn btn-circle btn-outline-secondary js-sortable-handle">
                        <i class="las la-random la-lg"></i>
                    </button>
                </div>
                @if (Group.Items.Count > 1)
                {
                    <div class="col-auto">
                        <button type="button" class="btn btn-circle btn-outline-secondary" @onclick="@(() => IsHide = !IsHide)">
                            <i class="las la-lg @(IsHide ? "la-low-vision" : "la-eye")"></i>
                        </button>
                    </div>
                } 
            }
            <div class="col">
                <InputText @bind-Value="@Group.Title" class="form-control form-control-lg" placeholder="Название группы"/>
                <ValidationMessage For="@(() => Group.Title)"/>
            </div>
            @if (GroupsCount > 1)
            {
                <div class="col-auto">
                    <button type="button" class="btn btn-circle btn-outline-danger" @onclick="@(() => OnDelete.InvokeAsync(Group))">
                        <i class="las la-times la-lg"></i>
                    </button>
                </div>
            }
        </div>
        
        <div id="@($"{Group.Id}-items")">
            @if (!IsHide)
            {
                @foreach (var item in Group.Items)
                {
                    <DatasetItemFormFields
                        @key="@item.Id"
                        Item="@item"
                        ItemsCount="@Group.Items.Count"
                        OnDelete="@OnDeleteItem"/>
                }
                
                <div class="mb-3">
                    <button type="button" class="btn btn-secondary btn-sm" @onclick="@OnAdd">
                        <i class="las la-plus-circle la-lg"></i>
                        Добавить строку
                    </button>
                </div>
            }
        </div>
    </div>
</div>

@code {

    [Parameter]
    public DatasetGroup Group { get; set; } = null!;

    [Parameter]
    public EventCallback GroupChanged { get; set; }

    [Parameter]
    public int GroupsCount { get; set; }

    [Parameter]
    public EventCallback<DatasetGroup> OnDelete { get; set; }

    private bool IsHide { get; set; }

    private async Task OnGroupChanged() => await GroupChanged.InvokeAsync();

    private DotNetObjectReference<DatasetGroupFormFields>? ObjectReference { get; set; }

    protected override void OnInitialized()
    {
        ObjectReference = DotNetObjectReference.Create(this);
    }

    [JSInvokable]
    public async Task OnSortItems(List<string> itemsIds)
    {
        Group.Items = Group.Items.OrderBy(i => itemsIds.IndexOf(i.Id)).ToList();
        await OnGroupChanged();
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false) return;
        await JsRuntime.InvokeVoidAsync("SortableJsItemsInit", ObjectReference, $"{Group.Id}-items");
    }

    private async Task OnAdd()
    {
        Group.Items.Add(new DatasetItem());
        await OnGroupChanged();
    }

    private async Task OnDeleteItem(DatasetItem item)
    {
        Group.Items.Remove(item);
        await OnGroupChanged();
    }

    public void Dispose()
    {
        ObjectReference?.Dispose();
    }

}