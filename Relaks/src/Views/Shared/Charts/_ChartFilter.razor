@* @using Relaks.Views.Shared.Charts.ViewModels *@
@* @using Relaks.Database *@
@* @using Relaks.Utils.Extensions *@
@* @using Console = System.Console *@
@* *@
@* @inject AppDbContext Db; *@
@* *@
@* <div class="d-flex gap-4"> *@
@*     <div class="mb-3 col-3"> *@
@*         <label class="form-label">Тип отображения данных</label> *@
@*         <Select TValue="@ChartFinancialAccountRequest.TypeEnum" *@
@*                 @bind-Value="@Store.Req.Type" *@
@*                 OnValueChanged="@(type => OnTypeChanged(type))" *@
@*                 Items="@_requestTypeItems"> *@
@*         </Select> *@
@*     </div> *@
@*     @if (Store.Req.Type != ChartFinancialAccountRequest.TypeEnum.AllByMonths) *@
@*     { *@
@*         @if (IsMonthDate()) *@
@*         { *@
@*             <div class="mb-3"> *@
@*                 <label class="form-label">Месяц</label> *@
@*                 <InputDate Type="@InputDateType.Month" *@
@*                            @bind-Value="@TempDate" *@
@*                            @bind-Value:after="@OnMonthChanged"   *@
@*                            class="form-control"/> *@
@*             </div> *@
@*         } *@
@*         else if (IsYearDate()) *@
@*         { *@
@*             <div class="mb-3"> *@
@*                 <label class="form-label">Год</label> *@
@*                 <Select TValue="@int" *@
@*                         @bind-Value="@RequestYear" *@
@*                         OnValueChanged="@(year => OnYearChanged(year))" *@
@*                         Items="@_requestYearsItems"> *@
@*                 </Select> *@
@*             </div> *@
@*         } *@
@*         else *@
@*         { *@
@*             <div class="d-flex gap-2"> *@
@*                 <div class="mb-3"> *@
@*                     <label class="form-label">Дата начала</label> *@
@*                     <InputDate Type="@(Store.Req.Type == ChartFinancialAccountRequest.TypeEnum.CustomByMonths ? InputDateType.Month : InputDateType.Date)" *@
@*                                @bind-Value="@Store.Req.From" *@
@*                                @bind-Value:after="@OnDateFromChanged" *@
@*                                class="form-control"/> *@
@*                            *@
@*                 </div> *@
@*                 <div class="mb-3"> *@
@*                     <label class="form-label">Дата окончания</label> *@
@*                     <InputDate Type="@(Store.Req.Type == ChartFinancialAccountRequest.TypeEnum.CustomByMonths ? InputDateType.Month : InputDateType.Date)" *@
@*                                @bind-Value="@Store.Req.To" *@
@*                                @bind-Value:after="@OnDateToChanged" *@
@*                                class="form-control"/> *@
@*                 </div> *@
@*             </div> *@
@*         }    *@
@*     } *@
@* </div> *@
@* *@
@* @code { *@
@*     [CascadingParameter] *@
@*     public ChartFinancialAccountStore Store { get; set; } = null!; *@
@* *@
@*     [Parameter] *@
@*     public EventCallback OnStateHasChanged { get; set; } *@
@* *@
@*     private DateTime TempDate { get; set; } = DateTime.Now; *@
@*     private bool IsMonthDate() => new[] *@
@*     { *@
@*         ChartFinancialAccountRequest.TypeEnum.MonthByDays, *@
@*     }.Contains(Store.Req.Type); *@
@* *@
@*     private bool IsCustomDate() => new[] *@
@*     { *@
@*         ChartFinancialAccountRequest.TypeEnum.CustomByDays, *@
@*         ChartFinancialAccountRequest.TypeEnum.CustomByMonths, *@
@*     }.Contains(Store.Req.Type); *@
@* *@
@*     private bool IsYearDate() => new[] *@
@*     { *@
@*         ChartFinancialAccountRequest.TypeEnum.YearByDays, *@
@*         ChartFinancialAccountRequest.TypeEnum.YearByMonths, *@
@*     }.Contains(Store.Req.Type); *@
@* *@
@*     protected override void OnParametersSet() *@
@*     { *@
@*         var years = Db.BaseFinancialTransactions.Select(x => x.CreatedAt.Year).Distinct().OrderByDescending(x => x).ToList(); *@
@*         _requestYearsItems = years.Select(x => new SelectedItem(x.ToString(), x.ToString())).ToList(); *@
@*     } *@
@* *@
@*     private int RequestYear { get; set; } *@
@*     private List<SelectedItem> _requestYearsItems = new(); *@
@* *@
@*     private Task OnMonthChanged() *@
@*     { *@
@*         var date = TempDate; *@
@*         Store.Req.From = date.StartOfMonth(); *@
@*         Store.Req.To = date.EndOfMonth(); *@
@*         return OnStateHasChanged.InvokeAsync(); *@
@*     } *@
@* *@
@*     private Task OnDateFromChanged() *@
@*     { *@
@*         Store.Req.From = Store.Req.Type == ChartFinancialAccountRequest.TypeEnum.CustomByMonths *@
@*             ? Store.Req.From.StartOfMonth() *@
@*             : Store.Req.From.StartOfDay(); *@
@*          *@
@*         return OnStateHasChanged.InvokeAsync(); *@
@*     } *@
@*      *@
@*     private Task OnDateToChanged() *@
@*     { *@
@*         Store.Req.To = Store.Req.Type == ChartFinancialAccountRequest.TypeEnum.CustomByMonths *@
@*             ? Store.Req.To.EndOfMonth() *@
@*             : Store.Req.To.EndOfDay(); *@
@*          *@
@*         return OnStateHasChanged.InvokeAsync(); *@
@*     } *@
@*      *@
@*     private Task OnYearChanged(int year) *@
@*     { *@
@*         RequestYear = year; *@
@*         var now = new DateTime(); *@
@*         var date = new DateTime(year, now.Month, now.Day); *@
@*         Store.Req.From = date.StartOfYear(); *@
@*         Store.Req.To = date.EndOfYear(); *@
@*         return OnStateHasChanged.InvokeAsync(); *@
@*     } *@
@* *@
@*     private Task OnTypeChanged(ChartFinancialAccountRequest.TypeEnum type) *@
@*     { *@
@*         if (new[] *@
@*             { *@
@*                 ChartFinancialAccountRequest.TypeEnum.YearByDays, *@
@*                 ChartFinancialAccountRequest.TypeEnum.YearByMonths, *@
@*                 ChartFinancialAccountRequest.TypeEnum.CustomByMonths, *@
@*             }.Contains(Store.Req.Type)) *@
@*         { *@
@*             return OnYearChanged(DateTime.Now.Year); *@
@*         } *@
@*          *@
@*         TempDate = DateTime.Now; *@
@*         return OnMonthChanged(); *@
@*     } *@
@* *@
@*     private List<SelectedItem> _requestTypeItems = new() *@
@*     { *@
@*         // new SelectedItem(FinancialAccountStatisticsRequest.TypeEnum.AllByMonths.ToString(), "Всё по месяцам"), *@
@*         new SelectedItem(ChartFinancialAccountRequest.TypeEnum.MonthByDays.ToString(), "Месяц по дням"), *@
@*         // new SelectedItem(FinancialAccountStatisticsRequest.TypeEnum.YearByMonths.ToString(), "Год по месяцам"), *@
@*         new SelectedItem(ChartFinancialAccountRequest.TypeEnum.YearByDays.ToString(), "Год по дням"), *@
@*         new SelectedItem(ChartFinancialAccountRequest.TypeEnum.CustomByDays.ToString(), "Произвольно по дням"), *@
@*         // new SelectedItem(FinancialAccountStatisticsRequest.TypeEnum.CustomByMonths.ToString(), "Произвольно по месяцам"), *@
@*     }; *@
@* *@
@* } *@