@using Relaks.Views.Shared.Charts.ViewModels
@using Relaks.Database
@using System.Text.Json
@using System.Dynamic

@inject IJSRuntime Js;
@inject AppDbContext Db;

@* <Dump Data="@Store.Req"/> *@
<Dump Data="@Store.Calculate().Dates"/>
<CascadingValue Value="@Store">
    @if (!AccountIds.Any())
    {
        <p>Выберите один или несколько счетов для отображения статистики</p>      
    }
    else
    {
        <_Filter OnStateHasChanged="@OnFilterChange"/>
    }
    <div id="@_htmlElementId"></div>
</CascadingValue>

@code {
    [Parameter]
    public List<Guid> AccountIds { get; set; } = new();

    private FinancialAccountStatisticsStore Store { get; set; } = null!;
    
    private readonly string _htmlElementId = Guid.NewGuid().ToString();

    protected override void OnInitialized()
    {
        Store = new(Db, AccountIds);
        Store.Initialize();
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        return !firstRender ? Task.CompletedTask : InitializeChart();
    }

    private Task OnFilterChange()
    {
        StateHasChanged();
        return InitializeChart();
    }

    private Task InitializeChart()
    {
        var data = Store.Calculate();
        dynamic json = new ExpandoObject();
        foreach (var account in data.Accounts)
        {
            var averageBalance = new List<decimal>();
            foreach (var item in account.Items)
            {
                // averageBalance.Add(item.AverageBalance);   
            }
        
            json["Test"] = averageBalance;
        }
        
        var result = new
        {
            HtmlElementId = _htmlElementId,
            Json = json,
            Dates = data.Dates,
            // Data = data,
        };
        
        return Task.FromResult(Js.InvokeVoidAsync("InitializeFinancialChart", JsonSerializer.Serialize(result)));
    }
}