@using Relaks.Interfaces
@using Relaks.Managers
@typeparam TNode where TNode : class, ITree<TNode>;
@inject DialogService DialogService;

<div class="input-group cursor-pointer">
    <span class="input-group-text" @onclick="@HandleSelectClick">
        <i class="las la-sitemap la-lg"></i>
    </span>
    <input type="text" value="@Title()" readonly="readonly" class="form-control" @onclick="@HandleSelectClick">
    @if (Clearable)
    {
        <button class="btn btn-outline-secondary" type="button" @onclick="@HandleClear">
            <i class="las la-times la-lg"></i>
        </button>   
    }
</div>

@code {
    [Parameter]
    public List<TNode> Nodes { get; set; } = new();
    
    [Parameter]
    public Guid? NodeId { get; set; }
    
    [Parameter]
    public bool Clearable { get; set; }
    
    [Parameter]
    public EventCallback<Guid> OnClickNode { get; set; }

    private Dictionary<Guid, TNode> FlatNodes { get; set; } = new();

    private string Title()
    {
        if (NodeId.HasValue && NodeId.Value != default && FlatNodes.TryGetValue(NodeId.Value, out var node))
        {
            return node.Title;
        }
        
        return "<Не выбрано>";
    }

    private Task HandleClear()
    {
        NodeId = null;
        StateHasChanged();
        return Task.CompletedTask;
    }

    protected override void OnParametersSet()
    {
        FlatNodes = Nodes.ToFlatById();
    }

    private Task HandleSelectClick()
    {
        var option = new DialogOption
        {
            IsKeyboard = true,
            IsBackdrop = true,
            IsCentered = true,
            Title = "Выберите категорию",
            IsScrolling = true,
            CloseButtonText = "Закрыть",
            Size = Size.ExtraLarge
        };

        option.Component = BootstrapDynamicComponent.CreateComponent<TreeSelectList<TNode>>(new Dictionary<string, object?>()
        {
            ["Nodes"] = Nodes,
            ["NodeId"] = NodeId,
            ["OnClickNode"] = EventCallback.Factory.Create<Guid>(this, async guid =>
            {
                await OnClickNode.InvokeAsync(guid);
                await option.CloseDialogAsync();
            }),
        });
        
        return DialogService.Show(option);
    }
}