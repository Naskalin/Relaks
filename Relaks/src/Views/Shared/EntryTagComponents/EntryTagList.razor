@using Relaks.Database
@using Relaks.Models
@using Relaks.Views.Shared.EntryTagComponents

@inject AppDbContext Db;

<CascadingValue Value="@Store">
    <div class="row">
        <div class="col-4">
            <div style="position: sticky; top: @StickyTopOffset;">
                @* <div class="mb-3 input-group"> *@
                @*     <input @bind-value="@Search" @oninput="@OnValueChanged" class="form-control" placeholder="Поиск профессий..."/> *@
                @*     <button class="btn btn-outline-secondary" type="button" @onclick="@OnSearchClear"> *@
                @*         <i class="las la-times la-lg"></i> *@
                @*     </button> *@
                @* </div> *@
                @* *@
                      @* EditEmptyIdText="Выберите категорию для изменения" *@
                      @* IsEditEmptyId="@Store.SidebarState.Equals(EntryTagListStore.SidebarStateEnum.EditCategoryEmpty)" *@
                      @* OnEdit="@OnEditCategories" *@
                <EntryTagHeader Title="@SidebarDefaultTitle("Категории")"
                      WithBackLink="@(!IsSidebarWithEdit())"
                      WithEdit="@IsSidebarWithEdit()"
                      OnBackLink="@(() => Store.SidebarState = EntryTagListStore.SidebarStateEnum.Default)"
                      OnAdd="@(() => { Store.SidebarState = EntryTagListStore.SidebarStateEnum.NewCategory; StateHasChanged();})"/>
                
                @switch (Store.SidebarState)
                {
                    case EntryTagListStore.SidebarStateEnum.NewCategory:
                        <div>new category</div>    
                        break;
                    case EntryTagListStore.SidebarStateEnum.EditCategory:
                        <div>edit category @Store.Req.CategoryId.ToString()</div>    
                        break;
                    default:
                        <div class="mb-3">
                            <ul class="my-tree">
                                @foreach (var category in Store.Categories)
                                {
                                    <EntryTagCategoryItem WithEdit="@WithEdit" Category="@category" OnStateChanged="@StateHasChanged"/>
                                }
                            </ul>
                        </div>
                        break;
                }
            </div>
        </div>
        <div class="col-8">
            @* @foreach (var category in FilteredCategories) *@
            @* { *@
            @*     <div class="list-group mb-3"> *@
            @*         <div class="list-group-item fw-semibold text-muted">@category.Title</div> *@
            @*         @foreach (var profession in FilteredProfessions.Where(x => x.CategoryId.Equals(category.Id))) *@
            @*         { *@
            @*             <div class="list-group-item cursor-pointer @ListGroupClasses" @onclick="@(() => OnProfessionClick.InvokeAsync(profession.Id))"> *@
            @*                 @if (CustomTagTitle != null) *@
            @*                 { *@
            @*                     @CustomTagTitle(profession) *@
            @*                 } *@
            @*                 else *@
            @*                 { *@
            @*                     @profession.Title *@
            @*                 } *@
            @*             </div> *@
            @*         } *@
            @*     </div> *@
            @* } *@
        </div>
    </div>
</CascadingValue>

@code {
    [Parameter]
    public EventCallback<Guid> OnProfessionClick { get; set; }

    [Parameter]
    public string ListGroupClasses { get; set; } = "";

    [Parameter]
    public string StickyTopOffset { get; set; } = "100px";
    
    [Parameter]
    public bool WithEdit { get; set; }

    [Parameter]
    public RenderFragment<EntryTagTitle>? CustomTagTitle { get; set; }

    private EntryTagListStore Store { get; set; } = null!;

    private string SidebarDefaultTitle(string title)
    {
        return Store.SidebarState switch
        {
            EntryTagListStore.SidebarStateEnum.EditCategory => "Изменение",
            EntryTagListStore.SidebarStateEnum.NewCategory => "Добавление",
            _ => title
            };
    }

    private bool IsSidebarWithEdit()
    {
        var arr = new List<EntryTagListStore.SidebarStateEnum>()
        {
            EntryTagListStore.SidebarStateEnum.Default,
            EntryTagListStore.SidebarStateEnum.EditCategoryEmpty
        };
        return arr.Contains(Store.SidebarState) && WithEdit;
    }

    private void OnEditCategories()
    {
        if (Store.Req.CategoryId.HasValue && Store.SidebarState.Equals(EntryTagListStore.SidebarStateEnum.Default))
        {
            Store.SidebarState = EntryTagListStore.SidebarStateEnum.EditCategory;
        }
        else
        {
            Store.SidebarState = Store.SidebarState.Equals(EntryTagListStore.SidebarStateEnum.EditCategoryEmpty)
                ? EntryTagListStore.SidebarStateEnum.Default
                : EntryTagListStore.SidebarStateEnum.EditCategoryEmpty
                ;   
        }

        StateHasChanged();
        // OnStateChanged.InvokeAsync();
        // return Task.CompletedTask;
    }

    // private List<ProfessionCategory> Categories { get; set; } = new();
    // private List<Profession> Professions { get; set; } = new();
    // private List<ProfessionCategory> FilteredCategories { get; set; } = new();
    // private List<Profession> FilteredProfessions { get; set; } = new();
    // private Guid? SelectedCategoryId { get; set; }
    // private string? Search { get; set; }
    //
    // private void OnValueChanged(ChangeEventArgs e)
    // {
    //     SelectedCategoryId = null;
    //     var str = e.Value?.ToString();
    //     if (string.IsNullOrEmpty(str))
    //     {
    //         FindByCategoryId();
    //     }
    //     else
    //     {
    //         str = str.ToLower();
    //         FilteredProfessions = Professions.Where(x => x.Title.ToLower().Contains(str)).ToList();
    //         var categoryIds = FilteredProfessions.Select(x => x.CategoryId);
    //         FilteredCategories = Categories.Where(x => categoryIds.Contains(x.Id)).ToList();
    //     }
    // }
    //
    // private void OnSearchClear()
    // {
    //     SelectedCategoryId = null;
    //     Search = "";
    //     FindByCategoryId();
    // }
    //
    // private void SwitchFindCategory(Guid categoryId)
    // {
    //     Search = "";
    //     if (SelectedCategoryId.HasValue)
    //     {
    //         if (SelectedCategoryId.Value.Equals(categoryId))
    //         {
    //             SelectedCategoryId = null;
    //             FindByCategoryId();
    //         }
    //         else
    //         {
    //             SelectedCategoryId = categoryId;
    //             FindByCategoryId(categoryId);
    //         }
    //     }
    //     else
    //     {
    //         SelectedCategoryId = categoryId;
    //         FindByCategoryId(categoryId);
    //     }
    // }
    //
    // private void FindByCategoryId(Guid? categoryId = null)
    // {
    //     if (categoryId.HasValue)
    //     {
    //         FilteredCategories = Categories.Where(x => x.Id.Equals(categoryId)).ToList();
    //         FilteredProfessions = Professions.Where(x => x.CategoryId.Equals(categoryId)).ToList();
    //     }
    //     else
    //     {
    //         FilteredCategories = Categories;
    //         FilteredProfessions = Professions;
    //     }
    // }
    //
    // protected override void OnInitialized()
    // {
    //     Categories = Db.ProfessionCategories.OrderBy(x => x.Title).ToList();
    //     Professions = Db.Professions.OrderBy(x => x.Title).ToList();
    //     FindByCategoryId();
    // }

    protected override void OnParametersSet()
    {
        Store = new EntryTagListStore(Db);
        Store.Initialize();
    }

}