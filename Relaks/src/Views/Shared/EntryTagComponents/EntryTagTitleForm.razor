@using Relaks.Models
@using Relaks.Views.Shared.EntryTagComponents
@using Relaks.Managers
@using Relaks.Database
@using Relaks.Mappers

@inject AppDbContext Db;
@inject IJSRuntime JsRuntime;

<EditForm Model="@Model" OnSubmit="@OnSubmit">
    <FluentValidationValidator @ref="Validator" DisableAssemblyScanning="@true"/>
    <ValidationSummary/>
    <div class="mb-3">
        <label for="" class="form-label">@Resources.Action.Title *</label>
        <input type="text" @bind-value="@Model.Title" class="form-control">
        <ValidationMessage For="@(() => Model.Title)"/>
    </div>
    
    <div class="mb-3">
        <label for="" class="form-label">Категория</label>
        <InputSelect @bind-Value="Model.CategoryId" class="form-select">
            <option value="">(Без родителя)</option>
            @foreach (var item in Store.Categories.ToTreeSelect())
            {
                <option value="@item.Value">@item.Title</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => Model.CategoryId)"/>
    </div>
    
    <div class="mb-3">
        <button class="btn btn-primary">
            <i class="las la-lg me-1 @(Store.SidebarState.Equals(EntryTagListStore.SidebarStateEnum.EditCategory) ? "la-edit" : "la-plus-circle")"></i>
            @(Store.SidebarState.Equals(EntryTagListStore.SidebarStateEnum.EditCategory) ? Resources.Action.SaveChanges : Resources.Action.Add)
        </button>
    </div>
    
    @if (IsEdit())
    {
        <div class="text-end">
            <button type="button" class="btn btn-link text-danger" @onclick="@OnDelete">
                <i class="las la-trash la-lg"></i>
                @Resources.Action.Delete
            </button>
        </div>
    }
</EditForm>

@code {
    [Parameter]
    public EntryTagTitle Model { get; set; } = new();
    
    [CascadingParameter]
    public EntryTagListStore Store { get; set; } = null!;
    
    [Parameter]
    public EventCallback OnStateChanged { get; set; }
    
    private FluentValidationValidator Validator { get; set; } = null!;
    private EntryTagTitle? EditingEntity { get; set; } = null;

    private bool IsEdit() => Store is {TagsState: EntryTagListStore.TagsStateEnum.EditTag,EditTagTitleId: not null};
    
    protected override void OnParametersSet()
    {
        if (IsEdit())
        {
            EditingEntity = Db.EntryTagTitles.First(x => x.Id.Equals(Store.EditTagTitleId!.Value));
            EditingEntity.MapTo(Model);  
        }
        
        if (Store.Req.CategoryId.HasValue) Model.CategoryId = Store.Req.CategoryId.Value;
    }
    
    private async Task OnSubmit()
    {
        if (!await Validator.ValidateAsync()) return;
        if (EditingEntity != null)
        {
            Model.UpdatedAt = DateTime.Now;
            Model.MapTo(EditingEntity);
        }
        else
        {
            Db.EntryTagTitles.Add(Model);
        }
        
        await Db.SaveChangesAsync();
        Store.FindTags();
        Store.FindTagsCategoriesCount();
        Store.TagsState = EntryTagListStore.TagsStateEnum.Default;
        await OnStateChanged.InvokeAsync();
    }
    
    private async Task OnDelete()
    {
        if (!IsEdit() || EditingEntity == null) return;
        var isConfirmed = await JsRuntime.InvokeAsync<bool>("confirm", Resources.Action.Delete_Confirmation);
        if (!isConfirmed) return;
        
        Db.EntryTagTitles.Remove(EditingEntity);
        await Db.SaveChangesAsync();
        
        Store.FindTags();
        Store.FindTagsCategoriesCount();
        Store.TagsState = EntryTagListStore.TagsStateEnum.Default;
        await OnStateChanged.InvokeAsync();
    }
}