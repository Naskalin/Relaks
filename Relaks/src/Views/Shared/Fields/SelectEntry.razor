@using Relaks.Database
@using Relaks.Models
@using Microsoft.EntityFrameworkCore

@inject DialogService DialogService;

<div class="d-flex align-items-center gap-3 mb-3">
    <label class="form-label mb-0">@Label</label>
    <button type="button" class="btn btn-outline-secondary btn-sm" @onclick="@ShowModal">
        Выбрать <i class="las la-plus-circle la-lg"></i>
    </button>
</div>
@if (CurrentEntryIds.Any())
{
    <ul class="list-group">
        @foreach (var entryId in CurrentEntryIds)
        {
            <li class="list-group-item">
                <div class="row justify-content-between align-items-center">
                    <div class="col">
                        <EntryInlineItem EntryId="@entryId"/>
                    </div>
                    <div class="col-auto">
                        <button type="button" class="btn btn-sm btn-circle btn-outline-secondary" @onclick="@(() => OnDelete(entryId))">
                            <i class="las la-times text-danger"></i>
                        </button>
                    </div>
                </div>
            </li>
        }
    </ul>   
}

@code {
    [Parameter]
    public string Label { get; set; } = "Объединение";

    [Parameter]
    public List<Guid> EntryIds { get; set; } = new();

    [Parameter]
    public List<Guid> ExcludedEntryIds { get; set; } = new();

    [Parameter]
    public EventCallback<List<Guid>> EntryIdsChanged { get; set; }
    
    [Parameter]
    public bool IsMultiple { get; set; }

    private List<Guid> CurrentEntryIds { get; set; } = new();

    protected override void OnParametersSet()
    {
        CurrentEntryIds = EntryIds;
    }

    private async Task OnEntrySelect(Guid entryId)
    {
        if (!CurrentEntryIds.Contains(entryId))
        {
            if (IsMultiple)
            {
                CurrentEntryIds.Add(entryId);
            }
            else
            {
                CurrentEntryIds = new List<Guid>(){entryId};
            }
            await EntryIdsChanged.InvokeAsync(CurrentEntryIds);
        }
    }

    private async Task OnDelete(Guid entryId)
    {
        if (CurrentEntryIds.Contains(entryId))
        {
            CurrentEntryIds.Remove(entryId);
            await EntryIdsChanged.InvokeAsync(CurrentEntryIds);
        }
    }

    private async Task ShowModal()
    {
        var option = new DialogOption
        {
            IsKeyboard = true,
            IsBackdrop = true,
            Title = "Выберите объединение",
            IsScrolling = false,
            CloseButtonText = "Закрыть",
            FullScreenSize = FullScreenSize.Always
        };

        option.Component = BootstrapDynamicComponent.CreateComponent<EntryList>(new Dictionary<string, object?>()
        {
            ["ExcludedEntryIds"] = ExcludedEntryIds,
            ["OnRowClicked"] = EventCallback.Factory.Create<Guid>(this, async guid =>
            {
                await OnEntrySelect(guid);
                await option.CloseDialogAsync();
            }),
        });
        
        await DialogService.Show(option);
    }
    
    [CascadingParameter]
    private Func<Task>? OnCloseAsync { get; set; }
}