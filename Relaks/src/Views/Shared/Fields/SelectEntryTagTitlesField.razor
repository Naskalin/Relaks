@using Relaks.Models
@using Relaks.Database
@using Microsoft.EntityFrameworkCore

@inject DialogService DialogService;
@inject AppDbContext Db;

<div class="d-flex align-items-center gap-3 mb-2">
    <label for="" class="form-label mb-0">Метки</label>
    <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="@ShowModal">
        Выбрать метки <i class="las la-check-square la-lg ms-1"></i>
    </button>
</div>

@if (!IsHideSelectedTags && EntryTagTitles.Any())
{
    <div class="d-flex flex-wrap gap-2">
        @foreach (var entryTag in EntryTagTitles)
        {
            <div class="badge bg-secondary text-body bg-opacity-10 d-flex align-items-center gap-1">
                @entryTag.Title
                <button type="button" class="btn-close" @onclick="@(() => OnTagDeleteAsync(entryTag.Id))"></button>
            </div>
        }
    </div>
}

@code {
    [Parameter]
    public List<Guid> EntryTagTitleIds { get; set; } = new();
    
    [Parameter]
    public EventCallback<List<Guid>> EntryTagTitleIdsChanged { get; set; }

    [Parameter]
    public bool IsHideSelectedTags { get; set; } = false;
    
    private List<EntryTagTitle> EntryTagTitles { get; set; } = new();

    private List<Guid> CurrentSelectedIds { get; set; } = new();
    
    protected override void OnParametersSet()
    {
        CurrentSelectedIds = EntryTagTitleIds;
        FindTags();
    }
    
    private void FindTags()
    {
        EntryTagTitles = Db.EntryTagTitles
            .Include(x => x.Category)
            .Where(x => EntryTagTitleIds.Contains(x.Id))
            .ToList();
    }
    
    private async Task<bool> OnModalSelectAsync()
    {
        await EntryTagTitleIdsChanged.InvokeAsync(CurrentSelectedIds);
        FindTags();
        return await Task.FromResult(true);
    }
    
    private async Task OnTagDeleteAsync(Guid tagId)
    {
        if (CurrentSelectedIds.Contains(tagId))
        {
            CurrentSelectedIds.Remove(tagId);
            await EntryTagTitleIdsChanged.InvokeAsync(CurrentSelectedIds);   
        }
    }
    
    private void HandleEntryTagTitleClick(Guid entryTagId)
    {
        if (CurrentSelectedIds.Contains(entryTagId))
        {
            CurrentSelectedIds.Remove(entryTagId);
        }
        else
        {
            CurrentSelectedIds.Add(entryTagId);
        }
    }
    
    private RenderFragment<EntryTagTitle> CustomEntryTagTitle => entryTagTitle => __builder =>
    {
        <div class="d-flex cursor-pointer align-items-center gap-3 p-2 @(CurrentSelectedIds.Contains(entryTagTitle.Id) ? "text-success bg-secondary bg-opacity-10" : "")">
            <i class="las la-check-square la-lg"></i>
            @entryTagTitle.Title <small style="opacity: .6">(@entryTagTitle.Category.Title)</small>
        </div>
    };

    
    private Task ShowModal()
    {
        return DialogService.Show(new DialogOption()
        {
            IsKeyboard = true,
            IsBackdrop = true,
            
            Title = "Выбор меток",
            IsScrolling = true,
            CloseButtonText = "Закрыть",
            Size = Size.ExtraLarge,
            SaveButtonText = "Выбрать метки",
            OnSaveAsync = OnModalSelectAsync,
            ShowSaveButton = true,
            Component = BootstrapDynamicComponent.CreateComponent<EntryTagList>(new Dictionary<string, object?>()
            {
                ["OnEntryTagTitleClick"] = EventCallback.Factory.Create<Guid>(this, HandleEntryTagTitleClick),
                ["WithEdit"] = false,
                ["CustomEntryTagTitle"] = CustomEntryTagTitle,
                ["CustomEntryTagTitleClasses"] = "p-0",
                ["StickyTopOffset"] = "0",
            })
        });
    }
}