<label for="@Id" class="form-label">@(Label)</label>

<div class="input-group">
    <button class="btn btn-outline-secondary" type="button" @onclick="@(() => Modal.Show())">Выбрать</button>
    <input type="text" value="@Value" @onchange="@(e => ValueChanged.InvokeAsync(e.Value?.ToString()))" class="form-control" id="@Id" placeholder="Путь к директории...">
</div>
@if (!string.IsNullOrEmpty(HelpText))
{
    <div class="form-text">@HelpText</div>
}

<Modal @ref="Modal" IsKeyboard="true">
    <ModalDialog Title="@Label" Size="Size.Large" CloseButtonText="Закрыть">
        <BodyTemplate>
            @if (Errors.Any())
            {
                <ul class="text-danger mb-3">
                    @foreach (var e in Errors)
                    {
                        <li>@e</li>   
                    }
                </ul>   
            }
            @if (!string.IsNullOrEmpty(ModalSelectedPath))
            {
                <div class="mb-3">
                    <code class="fw-semibold text-primary">@ModalSelectedPath</code>
                </div>
                <div class="mb-3">
                    <button type="button" class="btn btn-secondary btn-sm" @onclick="@Back">
                        <i class="las la-level-up-alt me-1"></i>
                        На уровень выше
                    </button>
                </div>
                <ul class="list-group">
                    @foreach (var dir in Dirs)
                    {
                        <button type="button" class="list-group-item list-group-item-action" @onclick="@(() => HandleClickDirectory(dir))">@dir</button>
                    }
                </ul>
            }
            else
            {
                <div class="d-flex gap-2 mb-3 align-items-center">
                    <div class="text-muted">Выберите диск</div>
                    @foreach (var drive in DriveInfo.GetDrives())
                    {
                        <button type="button" class="btn btn-secondary" @onclick="@(() => HandleClickDirectory(drive.Name))">@drive.Name</button>
                    }
                </div>
            }
            @if (!string.IsNullOrEmpty(ModalSelectedPath))
            {
                <div class="mt-3">
                    <code class="fw-semibold text-primary">@ModalSelectedPath</code>
                </div>
            }
        </BodyTemplate>
        <FooterTemplate>
            <button type="button" class="btn btn-primary" @onclick="@HandleModalPrimaryClick">
                <i class="las la-check-circle me-1"></i>
                Выбрать директорию
            </button>
        </FooterTemplate>
    </ModalDialog>
</Modal>

@code {
    private Modal Modal { get; set; } = new();
    private List<string> Errors { get; set; } = new();

    [Parameter]
    public string Label { get; set; } = "Выберите директорию";

    [Parameter]
    public string? HelpText { get; set; }

    [Parameter]
    public string? Value { get; set; }

    [Parameter]
    public EventCallback<string?> ValueChanged { get; set; }

    private string Id { get; set; } = "";
    private string ModalSelectedPath { get; set; } = "";
    private List<string> Dirs { get; set; } = new();

    protected override void OnParametersSet()
    {
        ModalSelectedPath = "";
        Id = Guid.NewGuid().ToString();
    }

    private void Back()
    {
        var parent = Directory.GetParent(ModalSelectedPath);
        if (parent == null)
        {
            ModalSelectedPath = "";
            Dirs = new List<string>();
            return;
        };

        ModalSelectedPath = parent.FullName;
        Dirs = GetDirsFromPath();
    }

    private void HandleClickDirectory(string path)
    {
        ModalSelectedPath = path;
        Dirs = GetDirsFromPath();
    }

    private List<string> GetDirsFromPath()
    {
        Errors = new List<string>();
        try {
            new DirectoryInfo(ModalSelectedPath).GetFiles();
        } catch (UnauthorizedAccessException ex)
        {
            Errors.Add("Ошибка. Не достаточно прав для чтения или записи. Пожалуйста, выберите другую директорию.");
            return new List<string>();
        }
        
        return Directory.EnumerateDirectories(ModalSelectedPath)
            .Select(s => new DirectoryInfo(s))
            .Where(s => s.Attributes.HasFlag(FileAttributes.Directory))
            .Where(s => !s.Attributes.HasFlag(FileAttributes.System))
            .Where(s => !s.Attributes.HasFlag(FileAttributes.Hidden))
            .Where(s => !s.Attributes.HasFlag(FileAttributes.ReadOnly))
            .Select(s => s.FullName).ToList();
    }

    private Task HandleModalPrimaryClick()
    {
        Modal.Close();
        return ValueChanged.InvokeAsync(ModalSelectedPath);
    }
}