    @using Relaks.Database
@using Microsoft.EntityFrameworkCore
@using Relaks.Models.FinancialModels
@using Relaks.Views.Pages.EntryFinancials.ViewModels

@inject AppDbContext Db;
@inject DialogService DialogService;

<label class="form-label">@Label</label>
<div class="input-group cursor-pointer">
    <span class="input-group-text" @onclick="@HandleSelectClick">
        <i class="las la-wallet la-lg"></i>
    </span>
    <div class="form-control" @onclick="@HandleSelectClick">
        @if (Account != null)
        {
            <EntryInlineItem EntryId="@Account.Category.EntryId">
                <AfterBody>
                    <span class="text-success">
                        @Account.Category.Title / @Account.TitleWithCurrencyAndBalance()
                    </span>
                </AfterBody>
            </EntryInlineItem>
        }
        else
        {
            @($"<{Label}>")
        }
    </div>   
    @if (Clearable)
    {
        <button class="btn btn-outline-secondary" type="button" @onclick="@HandleClear">
            <i class="las la-times la-lg"></i>
        </button>
    }
</div>

@code {
    [Parameter]
    public Guid? AccountId { get; set; }
    
    [Parameter]
    public EventCallback<Guid?> AccountIdChanged { get; set; }
    
    [Parameter]
    public bool Clearable { get; set; }
    
    [Parameter]
    public string Label { get; set; } = "Выберите финансовый счёт";
    
    [Parameter]
    public Dictionary<Guid, string> DisabledReasonAccountIds { get; set; } = new();
    
    [Parameter]
    public List<FinancialAccountCategory> AccountCategories { get; set; } = new();
    
    [Parameter]
    public FinancialAccountSummaryBalances FinancialAccountSummaryBalances { get; set; } = null!;
    
    private Guid? EntryId { get; set; }
    private FinancialAccount? Account { get; set; }
    
    private async Task HandleClear()
    {
        AccountId = null;
        await AccountIdChanged.InvokeAsync(AccountId);
        StateHasChanged();
        await Task.CompletedTask;
    }
    
    private string Title()
    {
        if (Account == null) return "<Не выбрано>";
        return $"{Account.Category.Entry.Name} \u2192 {Account.Category.Title} \u2192 {Account.TitleWithCurrencyAndBalance()}";
    }

    protected override void OnParametersSet()
    {
        FindAccount();
    }

    private void FindAccount()
    {
        Account = Db
            .FinancialAccounts
            .Include(x => x.Category)
            .FirstOrDefault(x => x.Id.Equals(AccountId));
    }

    private async Task OnAccountIdChanged(Guid? accountId)
    {
        AccountId = accountId;
        await AccountIdChanged.InvokeAsync(AccountId);
        FindAccount();
    }
    
    private Task HandleSelectClick()
    {
        var option = new DialogOption
        {
            IsKeyboard = true,
            IsBackdrop = true,
            IsCentered = true,
            Title = "Выберите финансовый счёт",
            IsScrolling = false,
            CloseButtonText = "Закрыть",
            Size = Size.Medium,
        };
        
        option.Component = BootstrapDynamicComponent.CreateComponent<_EntryFinancialAccountsList>(new Dictionary<string, object?>()
        {
            ["AccountId"] = AccountId,
            ["DisabledReasonAccountIds"] = DisabledReasonAccountIds,
            ["AccountCategories"] = AccountCategories,
            ["FinancialAccountSummaryBalances"] = FinancialAccountSummaryBalances,
            ["AccountIdChanged"] = EventCallback.Factory.Create<Guid?>(this, async guid =>
            {
                await OnAccountIdChanged(guid);
                await option.CloseDialogAsync();
            }),
        });
    
        return DialogService.Show(option);
    }

}