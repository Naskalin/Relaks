@using Relaks.Database
@using Microsoft.EntityFrameworkCore
@using Relaks.Models

@inject AppDbContext Db;

<div class="d-flex align-items-center gap-3 mb-2">
    <label for="" class="form-label mb-0">Профессии</label>
    <button type="button" class="btn btn-sm btn-outline-secondary" @onclick="@(() => Modal.Show())">
        Выбрать профессии <i class="las la-check-square la-lg ms-1"></i>
    </button>
</div>

@if (ProfessionIds.Any())
{
    <div class="d-flex flex-wrap gap-1">
        @foreach (var profession in Professions)
        {
            <div class="badge text-bg-secondary">@profession.Title</div>
        }
    </div>    
}
else
{
    <div class="text-muted small">Профессии не выбраны...</div>   
}

<Modal @ref="Modal" IsKeyboard="@true" IsBackdrop="@true">
    <ModalDialog Title="Выберите профессии"
                 IsScrolling="true" 
                 CloseButtonText="Закрыть" 
                 Size="Size.ExtraLarge" 
                 SaveButtonText="Выбрать профессии" 
                 OnSaveAsync="@OnModalSelectAsync"
                 ShowSaveButton="@true">
        <BodyTemplate>
            <ProfessionList OnProfessionClick="@HandleProfessionClick" ListGroupClasses="p-0">
                <CustomProfessionTitle>
                    <div class="d-flex align-items-center gap-3 p-2 @(CurrentSelectedIds.Contains(context.Id) ? "text-success bg-secondary bg-opacity-10": "")">
                        <i class="las la-check-square la-lg"></i>
                        <span>@context.Title</span>
                    </div>
                </CustomProfessionTitle>
            </ProfessionList>
        </BodyTemplate>
    </ModalDialog>
</Modal>

@code {
    private Modal Modal { get; set; } = new();
    
    [Parameter]
    public List<Guid> ProfessionIds { get; set; } = new();

    private List<Profession> Professions { get; set; } = new();

    [Parameter]
    public EventCallback<List<Guid>> ProfessionIdsChanged { get; set; }

    private List<Guid> CurrentSelectedIds { get; set; } = new();
    
    private void HandleProfessionClick(Guid professionId)
    {
        if (CurrentSelectedIds.Contains(professionId))
        {
            CurrentSelectedIds.Remove(professionId);
        }
        else
        {
            CurrentSelectedIds.Add(professionId);
        }
    }

    protected override void OnParametersSet()
    {
        CurrentSelectedIds = ProfessionIds;
        FindProfessions();
    }

    private void FindProfessions()
    {
        Professions = Db.Professions.Where(x => ProfessionIds.Contains(x.Id)).ToList();
    }

    private async Task<bool> OnModalSelectAsync()
    {
        // ProfessionIds = CurrentSelectedIds;
        await ProfessionIdsChanged.InvokeAsync(CurrentSelectedIds);
        FindProfessions();
        await Modal.Close();
        return await Task.FromResult(true);
    }
}