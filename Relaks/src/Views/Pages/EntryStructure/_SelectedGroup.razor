@using Relaks.Models.StructureModels
@using Relaks.Models.Store
<div class="row align-items-center mb-3 justify-content-between">
    <div class="col-auto">
        <button type="button" class="btn btn-circle btn-outline-secondary" @onclick="@(() => OnClickReturn.InvokeAsync())" title="Вернуться">
            <i class="las la-arrow-left la-lg"></i>
        </button>
    </div>
    <div class="col">
        <div class="text-secondary">
            <i class="las la-calendar la-lg me-1"></i>
            @Group.StartAt.ToString("dd.MM.yyyy") - @Group.EndAt?.ToString("dd.MM.yyyy")
        </div>
    </div>
    <div class="col-auto">
        <button type="button" class="btn btn-circle btn-outline-secondary" @onclick="@(() => OnClickGroupEdit.InvokeAsync(Group))" title="Изменить">
            <i class="las la-edit la-lg"></i>
        </button>
    </div>
</div>

<div class="d-flex flex-column gap-2 mb-3">
    <div class="h6 mb-0">@Group.Title</div>
    @if (!string.IsNullOrEmpty(Group.Description))
    {
        <div>@Group.Description</div>
    }
</div>

<div class="row align-items-center justify-content-between mb-3">
    <div class="col">Состав (@Group.Items.Count)</div>
    <div class="col-auto">
        <button type="button" class="btn btn-circle btn-outline-secondary" @onclick="@(() => OnClickCreateItem.InvokeAsync(Group))" title="Добавить">
            <i class="las la-plus la-lg"></i>
        </button>
    </div>
</div>

@if (Group.Items.Any())
{
    <div class="d-flex flex-column gap-4">
        @foreach (var item in Group.Items)
        {
            <div @onclick="@(() => OnItemClick.InvokeAsync(item))" class="p-2 @(Store.BackToConnectionsStructureItem != null && Store.BackToConnectionsStructureItem.Id.Equals(item.Id) ? "border border-warning bg-warning bg-opacity-10" : "")">
                <EntryInlineItem EntryId="@item.EntryId">
                    <AfterBody>
                        <div class="border-top" style="margin: .25rem 0 .15rem; width: 100%"></div>
                        <small>@item.StartAt.ToString("dd.MM.yyyy") - @item.EndAt?.ToString("dd.MM.yyyy")</small>
                        @if (!string.IsNullOrEmpty(item.Title))
                        {
                            <div class="small mt-1">
                                @item.Title
                            </div>
                        }
                    </AfterBody>
                </EntryInlineItem>
            </div>
        }
    </div>
}


@code {
    [CascadingParameter]
    public EntryStructureStore Store { get; set; } = null!;

    [Parameter]
    public StructureGroup Group { get; set; } = null!;

    [Parameter]
    public EventCallback<StructureItem> OnItemClick { get; set; }

    [Parameter]
    public EventCallback<StructureGroup> OnClickGroupEdit { get; set; }

    [Parameter]
    public EventCallback<StructureGroup> OnClickCreateItem { get; set; }

    [Parameter]
    public EventCallback OnClickReturn { get; set; }

}