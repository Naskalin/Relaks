@using Blazor.Diagrams
@using Blazor.Diagrams.Core.Models
@using Blazor.Diagrams.Core.PathGenerators
@using Blazor.Diagrams.Core.Routers
@using Blazor.Diagrams.Options
@using Blazor.Diagrams.Core.Geometry
@using Blazor.Diagrams.Components
@using Blazor.Diagrams.Core.Anchors
@using Blazor.Diagrams.Components.Widgets

<h3>_StructureDiagram</h3>

<style>
    .diagram-container {
    	width: 100%;
        height: 400px;
        border: 1px solid black; /* Just visual */
    }
</style>
<div class="diagram-container">
    <CascadingValue Value="Diagram" IsFixed="true">
        <DiagramCanvas>
            <Widgets>
            			<NavigatorWidget Width="200" Height="120"
            								Class="border border-black bg-white absolute"
            								Style="bottom: 15px; right: 15px;" />
            		</Widgets>
        </DiagramCanvas>
    </CascadingValue>
</div>

<div class="d-flex gap-2 my-2">
    <button type="button" class="btn btn-secondary btn-circle" @onclick="@(() => ChangeScale(1))">
        <i class="las la-plus"></i>
    </button>
    <button type="button" class="btn btn-secondary btn-circle" @onclick="@(() => ChangeScale(-1))">
        <i class="las la-minus"></i>
    </button>
</div>

@code {
    private BlazorDiagram Diagram { get; set; } = null!;

    protected override void OnInitialized()
    {
        var options = new BlazorDiagramOptions
        {
            AllowMultiSelection = true,
            Zoom =
            {
                Enabled = false,
            },
            Links =
            {
                DefaultRouter = new NormalRouter(),
                DefaultPathGenerator = new SmoothPathGenerator()
            },
        };

        Diagram = new BlazorDiagram(options);

        var firstNode = Diagram.Nodes.Add(new NodeModel(position: new Point(50, 50))
        {
            Title = "Node 1"
        });
        var secondNode = Diagram.Nodes.Add(new NodeModel(position: new Point(200, 100))
        {
            Title = "Node 2"
        });
        var leftPort = secondNode.AddPort(PortAlignment.Left);
        var rightPort = secondNode.AddPort(PortAlignment.Right);

        var sourceAnchor = new ShapeIntersectionAnchor(firstNode);
    // // The connection point will be the port's position
        var targetAnchor = new SinglePortAnchor(leftPort);
        var link = Diagram.Links.Add(new LinkModel(sourceAnchor, targetAnchor));
    }

    private void ChangeScale(int scaleDirection)
    {
        var newZoom = scaleDirection > 0 ? Diagram.Zoom + 0.1 : Diagram.Zoom - 0.1;
        Diagram.SetZoom(newZoom);
    }
}