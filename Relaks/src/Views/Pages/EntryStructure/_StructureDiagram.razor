@using Relaks.Models.Store
@using Relaks.Models.StructureModels
@using System.Globalization

@inject IJSRuntime JsRuntime;

<div class="d-flex gap-2 my-2 justify-content-center">
    <button type="button" class="btn btn-secondary btn-circle" @onclick="@(() => ChangeScaleAsync(1))" title="Увеличить масштаб">
        <i class="las la-plus la-lg"></i>
    </button>
    <button type="button" class="btn btn-secondary btn-circle" @onclick="@(() => ChangeScaleAsync(0))" title="Масштаб 1:1">
        1:1
    </button>
    <button type="button" class="btn btn-secondary btn-circle" @onclick="@(() => ChangeScaleAsync(-1))" title="Уменьшить масштаб">
        <i class="las la-minus la-lg"></i>
    </button>
</div>

<div class="structures-container" id="js-structures-container">
    <div class="structures-zone" style="transform: scale(@ScaleToCss());">
        @foreach (var sg in Store.StructureGroups)
        {
            <_DiagramStructureGroup StructureGroup="@sg"/>
        }
    </div>
</div>

@code {
    [CascadingParameter]
    public EntryStructureStore Store { get; set; } = null!;

    private string ScaleToCss() => Store.DiagramScale.ToString(new NumberFormatInfo() {NumberDecimalSeparator = "."});

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await JsRuntime.InvokeVoidAsync("InitializeStructureGroups");
    }
    
    private async Task ChangeScaleAsync(int scaleDirection)
    {
        double scale = scaleDirection switch
        {
            >= 1 => Store.DiagramScale + 0.1,
            <= -1 => Store.DiagramScale - 0.1,
            _ => 1
            };
        
        
        Store.DiagramScale = scale;
        await JsRuntime.InvokeVoidAsync("UpdateStructureLines");
    }
}