@using Relaks.Models.Store
@using Relaks.Models.StructureModels
@using System.Globalization
@using Console = BootstrapBlazor.Components.Console

@inject IJSRuntime JsRuntime;

<div class="row">
    <div class="col-9">
        <div class="structures-container" id="js-structures-container">
            <div class="structures-zone" id="js-structures-zone" style="transform: scale(@ScaleToCss(), @ScaleToCss());">
                @foreach (var sg in Store.StructureGroups)
                {
                    <_DiagramStructureGroup Group="@sg" 
                                            OnGroupClick="@HandleGroupClick"
                                            />
                }
            </div>
        </div>
    </div>
    <div class="col-3">
        <div style="position: sticky; top: 100px;">
            <Dump Data="@Store.DiagramOptions"/>
            <Dump Data="@Store.Req"/>
            <_DiagramFilter OnStateChanged="@StateHasChanged" OnChangeRequest="@HandleResetArrows"/>
            <div class="border-top my-4"></div>
            @if (Store.SelectedItem != null)
            {
                <_SelectedItem Item="Store.SelectedItem" OnClickReturn="@(() => Store.SelectedItem = null)"/>
            } else if (Store.SelectedGroup != null)
            {
                <_SelectedGroup Group="Store.SelectedGroup"
                                OnItemClick="@(item => Store.SelectedItem = item)"
                                />
            }
        </div>
    </div>
</div>

@code {

    [CascadingParameter]
    public EntryStructureStore Store { get; set; } = null!;

    private string ScaleToCss()
    {
        var scale = (double) (1 * Store.DiagramOptions.DiagramScale) / 100;
        return scale.ToString(new NumberFormatInfo() {NumberDecimalSeparator = "."});
    }


    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!firstRender) return;
        await JsRuntime.InvokeVoidAsync("InitializeStructureArrows");
    }

    private async Task HandleResetArrows()
    {
        Store.FindStructure();
        await JsRuntime.InvokeVoidAsync("RemoveStructureArrows");
        await JsRuntime.InvokeVoidAsync("InitializeStructureArrows");
    }

    private void HandleGroupClick(StructureGroup group)
    {
        Store.SelectedGroup = group;
        Store.SelectedItem = null;
    }
}