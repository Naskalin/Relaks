@page "/entries/{entryId:guid}/edit"
@using Relaks.Models
@using Relaks.Database
@using Relaks.Mappers
@using Microsoft.EntityFrameworkCore

@inject AppDbContext Db;
@inject NavigationManager NavigationManager;
@inject IJSRuntime JsRuntime;

<EntryProfileLayout EntryId="@EntryId">
    <HalfPage>
        <MyTitle ShowBeforeTitle="@true">
            <BeforeTitle>
                <a href="/entries/@EntryId/info" class="btn btn-outline-secondary">
                    <i class="las la-arrow-left la-lg me-1"></i> @Resources.Action.Return
                </a>
            </BeforeTitle>
            <ChildContent>@Resources.Action.Edit @Resources.Entity.BaseEntry.ToLower()</ChildContent>
        </MyTitle>

        <p>Entry.Tags.Count : @Entry.Tags.Count</p>
        <p>EntryTags.Count : @EntryTags.Count</p>
        <EditForm Model="@Entry" OnSubmit="@OnSubmit">
            <FluentValidationValidator @ref="Validator" DisableAssemblyScanning="@true"/>
            <ValidationSummary/>
            <FormFields Entry="@Entry" EntryTags="@EntryTags" OnStateChanged="@StateHasChanged" ProfessionIds="@ProfessionIds"/>
            <SoftDeletedReasonField SoftDeletedReason="@Entry"/>
            <div class="mb-3">
                <button type="submit" class="btn btn-primary">
                    <i class="las la-edit la-lg me-1"></i>
                    @Resources.Action.SaveChanges
                </button>
            </div>
        </EditForm>

        @if (Entry.DeletedAt != null)
        {
            <div class="text-end">
                <button type="button" class="btn btn-link text-danger" @onclick="@OnDelete">
                    <i class="las la-trash la-lg"></i>
                    @Resources.Action.Delete
                </button>
            </div>
        }
    </HalfPage>
</EntryProfileLayout>

@code {
    
    [Parameter]
    public Guid EntryId { get; set; }

    private BaseEntry Entry { get; set; } = null!;
    private List<EntryTag> EntryTags { get; set; } = new();
    private List<Guid> ProfessionIds { get; set; } = new();
    private FluentValidationValidator Validator { get; set; } = null!;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        Entry = Db.BaseEntries
            .Include(x => x.Tags)
            .Include(x => x.Professions)
            .First(x => x.Id.Equals(EntryId))
        ;
        ProfessionIds = Entry.Professions.Select(x => x.Id).ToList();
        EntryTags = Db.EntryTags
            .Where(x => x.EntryId.Equals(EntryId))
            .Include(eTag => eTag.Tag).ThenInclude(tagTitle => tagTitle.Category)
            .ToList()
        ;
    }
    
    private void OnSubmit()
    {
        if (!Validator.Validate()) return;

        Entry.UpdatedAt = DateTime.Now;
        Entry.MapTo(Entry);
        MapProfessions();
        MapTags();
        
        Db.SaveChanges();
        NavigationManager.NavigateTo($"/entries/{EntryId}/info");
    }

    private void MapProfessions()
    {
        var currentIds = Entry.Professions.Select(x => x.Id).ToList();
        var newIds = ProfessionIds.Except(currentIds).ToList();
        var deleteIds = currentIds.Except(ProfessionIds).ToList();
        Entry.Professions.AddRange(Db.Professions.Where(x => newIds.Contains(x.Id)));
        Entry.Professions.RemoveAll(x => deleteIds.Contains(x.Id));
    }

    private void MapTags()
    {
        var currentIds = Entry.Tags.Select(x => x.Id).ToList();
        Db.EntryTags.AddRange(EntryTags.Where(x => !currentIds.Contains(x.Id)));
        var deleteTagIds = currentIds.Except(EntryTags.Select(x => x.Id)).ToList();
        Entry.Tags.RemoveAll(x => deleteTagIds.Contains(x.Id));
    }
    
    private async Task OnDelete()
    {
        if (Entry.DeletedAt == null) return;
        var isConfirmed = await JsRuntime.InvokeAsync<bool>("confirm", Resources.Action.Delete_Confirmation);
        if (!isConfirmed) return;
        NavigationManager.NavigateTo($"/entries/{EntryId}/delete");
    }

}