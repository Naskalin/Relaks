@using Relaks.Models
@using Relaks.Database
@using Microsoft.EntityFrameworkCore

@inject AppDbContext Db;

<div class="mb-3 input-lg">
    <label for="" class="form-label form-label-lg">@Resources.Entity.ResourceManager.GetString(string.Format(Entry.Discriminator+"_Name")) *</label>
    <input type="text" class="form-control form-control-lg" @bind="@Entry.Name"/>
    <ValidationMessage For="@(() => Entry.Name)"/>
</div>

<div class="mb-3">
    <InputImageCrop Label="Миниатюра" @bind-Value="@Entry.Thumbnail"/>
</div>

<div class="mb-3">
    <label for="" class="form-label">@Resources.Field.ShortDescription</label>
    <MyTextarea
        maxlength="300"
        @bind-Value="@Entry.Description"/>
    <ValidationMessage For="@(() => Entry.Description)"/>
</div>

<div class="mb-3">
    <SelectEntryTagTitlesField EntryTagTitleIds="@EntryTagTitleIds"
                               EntryTagTitleIdsChanged="@HandleEntryTagTitleIdsChanged"
                               IsHideSelectedTags="@true"
    />
    
    <div class="list-group">
        @foreach (var entryTag in EntryTags)
        {
            <div class="list-group-item">
                <div class="d-flex gap-3 align-items-center">
                    <div class="col">
                        <div><small style="opacity: .6">(@entryTag.Tag.Category.Title)</small></div>
                        @entryTag.Tag.Title
                    </div>
                    <div class="col-5">
                        <InputText @bind-Value="@entryTag.Description" Placeholder="Комментарий" class="form-control"/>
                    </div>
                    <div class="col-auto">
                        <button type="button"
                                onclick="@(() => HandleDeleteEntryTag(entryTag))"
                                class="btn btn-circle btn-sm text-danger btn-outline-secondary">
                            <i class="las la-times la-lg"></i>
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

<div class="row">
    <div class="col">
        <div class="mb-3">
            <label for="" class="form-label">@Resources.Entity.ResourceManager.GetString(string.Format(Entry.Discriminator+"_StartAt"))</label>
            <InputDate Type="@(Entry.StartAtWithTime ? InputDateType.DateTimeLocal : InputDateType.Date)"
                       @bind-Value="@Entry.StartAt"
                       class="form-control"/>
            <ValidationMessage For="@(() => Entry.StartAt)"/>
        </div>
        <div class="mb-3">
            <div class="form-check form-switch">
                <InputCheckbox class="form-check-input" type="checkbox" @bind-Value="@Entry.StartAtWithTime" id="entry-StartAtWithTime"/>
                <label class="form-check-label" for="entry-StartAtWithTime">@Resources.Action.Date_WithTime</label>
            </div>
        </div>
    </div>
    <div class="col">
        <div class="mb-3">
            <label for="" class="form-label">@Resources.Entity.ResourceManager.GetString(string.Format(Entry.Discriminator+"_EndAt"))</label>
            <InputDate Type="@(Entry.EndAtWithTime ? InputDateType.DateTimeLocal : InputDateType.Date)"
                       @bind-Value="@Entry.EndAt"
                       class="form-control"/>
            <ValidationMessage For="@(() => Entry.EndAt)"/>
        </div>
        <div class="mb-3">
            <div class="form-check form-switch">
                <InputCheckbox class="form-check-input" type="checkbox" @bind-Value="@Entry.EndAtWithTime" id="entry-EndAtWithTime"/>
                <label class="form-check-label" for="entry-EndAtWithTime">@Resources.Action.Date_WithTime</label>
            </div>
        </div>
    </div>
</div>

@code {
    private List<Guid> Test { get; set; } = new();
    
    [Parameter]
    public BaseEntry Entry { get; set; } = null!;

    [Parameter]
    public List<EntryTag> EntryTags { get; set; } = new();
    
    [Parameter]
    public EventCallback OnStateChanged { get; set; }

    private List<Guid> EntryTagTitleIds { get; set; } = new();

    protected override void OnParametersSet()
    {
        EntryTagTitleIds = EntryTags.Select(x => x.TagId).ToList();
    }

    private async Task HandleEntryTagTitleIdsChanged(List<Guid> changedTagTitleIds)
    {
        EntryTagTitleIds = changedTagTitleIds;
        var entryTagsDict = EntryTags.ToDictionary(x => x.TagId, x => x);
        var currentTagTitleIds = entryTagsDict.Keys.ToList();
        var newTagTitleIds = changedTagTitleIds.Except(currentTagTitleIds).ToList();
        var newTagTitles = Db.EntryTagTitles
            .Include(x => x.Category)
            .Where(x => newTagTitleIds.Contains(x.Id))
            .ToList();

        foreach (var entryTag in EntryTags.Where(entryTag => !changedTagTitleIds.Contains(entryTag.TagId)))
        {
            EntryTags.Remove(entryTag);
        }
        
        foreach (var newTagTitle in newTagTitles)
        {
            EntryTags.Add(new EntryTag()
            {
                Entry = Entry,
                EntryId = Entry.Id,
                Tag = newTagTitle,
                TagId = newTagTitle.Id
            });
        }

        await OnStateChanged.InvokeAsync();
    }

    private async Task HandleDeleteEntryTag(EntryTag entryTag)
    {
        EntryTags.Remove(entryTag);
        EntryTagTitleIds = EntryTags.Select(x => x.TagId).ToList();
        
        await OnStateChanged.InvokeAsync();
    }
}