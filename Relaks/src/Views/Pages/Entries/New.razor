@page "/entries/new"

@using Relaks.Database
@using Relaks.Mappers
@using Relaks.Models
@using Console = System.Console

@inject AppDbContext Db;
@inject NavigationManager NavigationManager;

<PageTemplate>
    <HalfPage IsCentered="@true">
        <MyTitle ShowBeforeTitle="@true">
            <BeforeTitle>
                <a href="/entries" class="btn btn-outline-secondary">
                    <i class="las la-arrow-left la-lg me-1"></i> @Resources.Action.Return
                </a>
            </BeforeTitle>
            <ChildContent>@Resources.Action.Add @Resources.Entity.BaseEntry.ToLower()</ChildContent>
        </MyTitle>

        <EditForm Model="@Entry" OnSubmit="@OnSubmit">
            <FluentValidationValidator @ref="Validator" DisableAssemblyScanning="@true"/>
            <ValidationSummary/>
            
            <div class="mb-3">
                <label for="" class="form-label">@Resources.Action.Type</label>
            
                <InputRadioGroup @bind-Value="@Entry.Discriminator">
                    @foreach (var d in DataHelper.EntryDiscriminators)
                    {
                        <div class="form-check">
                            <InputRadio Value="@d" id="@($"entry-{d}")" class="form-check-input"/>
                            <label for="@($"entry-{d}")" class="form-check-label">@Resources.Entity.ResourceManager.GetString(d)</label>
                        </div>
                    }
                </InputRadioGroup>
                
                <ValidationMessage For="@(() => Entry.Discriminator)"/>
            </div>
            
            <FormFields Entry="@Entry" EntryTags="@EntryTags" OnStateChanged="@StateHasChanged"/>
            <div class="mb-3">
                <button type="submit" class="btn btn-primary">
                    <i class="las la-plus-circle la-lg me-1"></i>
                    @Resources.Action.Add
                </button>
            </div>
        </EditForm>
    </HalfPage>
</PageTemplate>

@code {

    private BaseEntry Entry { get; set; } = null!;
    private List<EntryTag> EntryTags { get; set; } = new();
    private FluentValidationValidator Validator { get; set; } = null!;

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        Entry = new EPerson()
        {
            Discriminator = nameof(EPerson),
        };
    }

    private void OnSubmit()
    {
        if (!Validator.Validate()) return;
        
        BaseEntry entry = Entry.Discriminator switch
        {
            nameof(EPerson) => new EPerson(),
            nameof(ECompany) => new ECompany(),
            nameof(EProject) => new EProject(),
            _ => throw new ArgumentException($"Error: discriminator {Entry.Discriminator} is not supported")
            };
        
        Entry.MapTo(entry);
        entry.Tags.AddRange(EntryTags);
        
        Db.BaseEntries.Add(entry);
        Db.SaveChanges();
        NavigationManager.NavigateTo($"/entries/{entry.Id}/info");
    }

}