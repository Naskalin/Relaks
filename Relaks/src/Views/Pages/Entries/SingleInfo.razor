@page "/entries/{entryId:guid}/info"
@using Relaks.Models
@using Relaks.Database

@inject AppDbContext Db;
@inject NavigationManager NavigationManager;

<EntryProfileLayout EntryId="@EntryId">
    <EntryProfileTabs EntryId="@EntryId"/>
    <MyTitle>
        <ChildContent>@Resources.Entity.ResourceManager.GetString($"{Discriminator}_About")</ChildContent>
        <EndTitle>
            <a href="@($"/entries/{EntryId}/eidataset/new")" class="btn btn-primary">
                <i class="las la-plus-circle la-lg me-1"></i>
                @Resources.Action.Add набор данных
            </a>
        </EndTitle>
        <Subtitle>Наборы данных</Subtitle>
    </MyTitle>

    <div class="row">
        <div class="col-3">
            <div class="list-group">
                @foreach (var eiDataset in EiDatasets)
                {
                    <_EiDatasetsNavigation EiDataset="@eiDataset" EntryInfoId="@EntryInfoId"/>
                }
            </div>
        </div>
        <div class="col-9 ps-4">
            @foreach (var eiDataset in EiDatasets)
            {
                <EiDatasetListItem EiDataset="@eiDataset"/>
            }
        </div>
    </div>
</EntryProfileLayout>

@code {
    [Parameter]
    public Guid EntryId { get; set; }
    
    private Guid? EntryInfoId { get; set; }
    
    private string Discriminator { get; set; } = null!;

    private List<EiDataset> EiDatasets { get; set; } = new();

    protected override void OnParametersSet()
    {
        Discriminator = Db.BaseEntries
            .Where(x => x.Id.Equals(EntryId))
            .Select(x => x.Discriminator)
            .First()
            .ToString();

        EiDatasets = Db.EiDatasets
            .Where(x => x.EntryId.Equals(EntryId))
            .OrderByDescending(x => x.IsFavorite)
            .ThenByDescending(x => x.UpdatedAt)
            .ThenBy(x => x.DeletedAt != null)
            .ToList();
        
        var query = new Uri(NavigationManager.Uri).Query;
        var dict = System.Web.HttpUtility.ParseQueryString(query);
        var entryInfoId = dict["entryInfoId"];
        EntryInfoId = string.IsNullOrEmpty(entryInfoId) ? null : Guid.Parse(entryInfoId);
    }
}