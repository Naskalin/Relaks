@page "/entries/{entryId:guid}/eidataset/new"
@page "/entries/{entryId:guid}/eidataset/{entryInfoId:guid}/edit"

@using Relaks.Models
@using Relaks.Database
@using Relaks.Mappers

@inject IJSRuntime JsRuntime;
@inject NavigationManager NavigationManager;
@inject AppDbContext Db;

<EntryProfileLayout EntryId="@EntryId">
    <MyTitle>
        <BeforeTitle>
            <a href="/entries/@EntryId/info" class="btn btn-outline-secondary">
                <i class="las la-arrow-left la-lg me-1"></i> @Resources.Action.Return
            </a>
        </BeforeTitle>
        <ChildContent>@(EntryInfoId.HasValue ? Resources.Action.Edit : Resources.Action.Add): @Resources.Entity.ResourceManager.GetString(nameof(EiDataset))</ChildContent>
    </MyTitle>

    <div class="alert bg-info bg-opacity-10 border-info border-opacity-25">
        <div class="row align-items-center">
            <div class="col">
                <div class="row align-items-center gx-3">
                    <div class="col-auto"><i class="las la-info-circle la-lg text-secondary" style="font-size: 2rem;"></i></div>
                    <div class="col">Вы можете изначально предзаполнить набор данных по шаблону. Добавить или изменить шаблоны <a href="/dataset-templates">можно здесь</a>.</div>
                </div>
            </div>
            <div class="col">
                <div class="input-group">
                    <InputSelect @bind-Value="@DatasetTemplateId" class="form-select">
                        <option value="">(Без шаблона)</option>
                        @foreach (var dt in DatasetTemplates)
                        {
                            <option value="@dt.Id">@dt.Title</option>
                        }
                    </InputSelect>
                    <button class="btn btn-secondary" 
                            type="button" 
                            disabled="@(!DatasetTemplateId.HasValue)"
                            @onclick="@PresetDataset"
                    >
                        Предзаполнить
                    </button>
                </div>
                <div class="form-text">Будьте внимательны, шаблон перезапишет все заполненные данные в этой форме.</div>
            </div>
        </div>
    </div>
    
        <div class="alert bg-secondary bg-opacity-10">
            <i class="las la-info-circle la-lg me-1"></i>
            При отображении ключи и группы без значений будут скрыты, это сделано для того, чтобы показывать только заполненные значения.
        </div>

    <EditForm Model="@Req" OnSubmit="@OnSubmit">
        <FluentValidationValidator @ref="Validator" DisableAssemblyScanning="@true"/>
        <ValidationSummary/>

        <div class="mb-3">
            <label for="" class="form-label">Название набора данных *</label>
            <input type="text" @bind-value="@Req.Title" class="form-control">
            <ValidationMessage For="@(() => Req.Title)"/>
        </div>

        <div class="mb-3">
            <DatasetFormFields @bind-Dataset="@Req.Dataset"/>
        </div>

        <EntryInfoFormFields EntryInfo="@Req" IsWithoutTitle="@true"/>
        @if (EntryInfoId.HasValue)
        {
            <SoftDeletedReasonField SoftDeletedReason="@Req"/>
        }

        <div class="mb-3">
            <button class="btn btn-primary">
                <i class="las la-lg me-1 @(EntryInfoId.HasValue ? "la-edit" : "la-plus-circle")"></i>
                @(EntryInfoId.HasValue ? Resources.Action.SaveChanges : Resources.Action.Add)
            </button>
        </div>
    </EditForm>

    @if (EntryInfoId.HasValue && Req.DeletedAt != null)
    {
        <div class="text-end">

            <button type="button" class="btn btn-link text-danger" @onclick="@OnDelete">
                <i class="las la-trash la-lg"></i>
                @Resources.Action.Delete
            </button>
        </div>
    }
</EntryProfileLayout>

@code {

    [Parameter]
    public Guid EntryId { get; set; }

    [Parameter]
    public Guid? EntryInfoId { get; set; }

    private EiDataset? EiDataset { get; set; }
    private EiDatasetRequest Req { get; set; } = null!;

    private Guid? DatasetTemplateId { get; set; }

    protected override void OnInitialized()
    {
        DatasetTemplates = Db.DatasetTemplates.OrderBy(x => x.Title).ToList();
    }

    protected override void OnParametersSet()
    {
        if (EntryInfoId.HasValue)
        {
            EiDataset = Db.EiDatasets.First(x => x.Id.Equals(EntryInfoId.Value));
            Req = new();
            EiDataset.MapTo(Req);
        }
        else
        {
            Req = new()
            {
                Dataset = new DatasetModel() {Groups = new() {new() {Items = new() {new()}}}}
            };
        }
    }

    private FluentValidationValidator Validator { get; set; } = null!;

    private async Task OnDelete()
    {
        if (EiDataset == null) return;
        var isConfirmed = await JsRuntime.InvokeAsync<bool>("confirm", Resources.Action.Delete_Confirmation);
        if (!isConfirmed) return;
        Db.EiDatasets.Remove(EiDataset);
        await Db.SaveChangesAsync();
        NavigationManager.NavigateTo($"/entries/{EntryId}/info");
    }

    private void OnSubmit()
    {
        if (!Validator.Validate()) return;

        if (EiDataset == null)
        {
            EiDataset = new EiDataset()
            {
                EntryId = EntryId,
            };
            Db.EiDatasets.Add(EiDataset);
        }

        Req.MapTo(EiDataset);

        Db.SaveChanges();
        NavigationManager.NavigateTo($"/entries/{EntryId}/info");
    }

    private List<DatasetTemplate> DatasetTemplates { get; set; } = new();

    private void PresetDataset()
    {
        if (!DatasetTemplateId.HasValue) return;
        var dt = DatasetTemplates.First(x => x.Id.Equals(DatasetTemplateId.Value));
        dt.MapTo(Req);
        DatasetTemplateId = null;
    }

}