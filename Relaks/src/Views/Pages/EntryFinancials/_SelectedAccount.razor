@using Relaks.Models.FinancialModels
@using Relaks.Views.Pages.EntryFinancials.ViewModels
@using Relaks.Database
@using Microsoft.EntityFrameworkCore

@inject NavigationManager Navigation;
@inject AppDbContext Db;

<div class="d-flex align-items-center justify-content-between mb-3 gap-2">
    <button type="button" class="btn btn-outline-primary btn-lg" @onclick="@(() => IsOpen = true)">
        <div class="text-center">Выберите счёт <i class="las la-angle-down ms-2"></i></div>   
    </button>
    
    @if (SelectedFinancialAccount != null)
    {
        <_AccountsListItemText FinancialAccount="@SelectedFinancialAccount"></_AccountsListItemText>
    }
</div>

<Drawer Placement="@Placement.Left" IsOpen="@IsOpen" Width="400px" IsBackdrop="@true" AllowResize="true">
    <div class="position-relative m-2">
        <_AccountsList AccountIdChanged="@HandleClickAccount" AccountId="@Store.AccountId" EntryId="@Store.EntryId">
            <EndOfCategoryTitle>
                <button type="button"
                        @onclick="@(() => HandleClickEditCategory(context))"
                        class="btn btn-circle btn-sm btn-outline-secondary" title="Изменить">
                    <i class="las la-edit la-lg"></i>
                </button>
            </EndOfCategoryTitle>
            <EndOfItemTitle>
                <button type="button"
                        @onclick="@(() => HandleClickEditAccount(context))"
                        class="btn btn-circle btn-sm btn-outline-secondary" title="Изменить">
                    <i class="las la-edit la-lg"></i>
                </button>
            </EndOfItemTitle>
        </_AccountsList>
        
        <button type="button" class="btn-close position-absolute top-0 end-0" @onclick="@(() => IsOpen = false)"></button>
    </div>
</Drawer>

@code {
    [CascadingParameter]
    public FinancialsStore Store { get; set; } = null!;

    [Parameter]
    public EventCallback OnStateChanged { get; set; }
    
    private FinancialAccount? SelectedFinancialAccount { get; set; }
    
    private bool IsOpen { get; set; }
    
    private Task HandleClickAccount(Guid? accountId)
    {
        Navigation.NavigateTo($"/entries/{Store.EntryId}/financials/{accountId.ToString()}");
        Store.AccountId = accountId;

        if (accountId.HasValue)
        {
            SelectedFinancialAccount = Db.FinancialAccounts
                .Include(x => x.FinancialCurrency)
                .FirstOrDefault(x => x.Id.Equals(accountId.Value));
            IsOpen = false;
        }
        
        return OnStateChanged.InvokeAsync();
    }
    
    private Task HandleClickEditCategory(Guid categoryId)
    {
        Store.SidebarEditAccountCategoryId = categoryId;
        Store.SidebarState = FinancialsStore.SidebarEnum.EditAccountCategory;
        return OnStateChanged.InvokeAsync();
    }
    
    private Task HandleClickEditAccount(Guid accountId)
    {
        Store.SidebarEditAccountId = accountId;
        Store.SidebarState = FinancialsStore.SidebarEnum.EditAccount;
        return OnStateChanged.InvokeAsync();
    }
}