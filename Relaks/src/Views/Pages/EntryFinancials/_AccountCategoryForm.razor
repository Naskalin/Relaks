@using Relaks.Views.Pages.EntryFinancials.ViewModels
@using Relaks.Database
@using Relaks.Mappers
@using Relaks.Models.FinancialModels

@inject AppDbContext Db;

@* <div class="row align-items-center mb-3"> *@
@*     <div class="col-auto"> *@
@*         <button type="button" class="btn btn-circle btn-outline-secondary" @onclick="@HandleReturn" title="Вернуться"> *@
@*             <i class="las la-arrow-left la-lg"></i> *@
@*         </button> *@
@*     </div> *@
@*     <div class="col"> *@
@*     </div> *@
@* </div> *@
@* *@
@*         <h5 class="mb-0">@(IsEdit ? "Изменить категорию" : "Добавить категорию")</h5> *@
<EditForm Model="@Req" OnValidSubmit="@HandleSubmit">
    <FluentValidationValidator DisableAssemblyScanning="@true"/>
    <ValidationSummary/>
    <div class="mb-3">
        <label for="financialCategoryTitle" class="form-label">Название</label>
        <InputText id="financialCategoryTitle" @bind-Value="@Req.Title" required="required" class="form-control"/>
        <ValidationMessage For="@(() => Req.Title)"/>
    </div>

    <div class="mb-3">
        <button class="btn btn-primary">
            <i class="las la-lg me-1 @(AccountCategoryId.HasValue ? "la-edit" : "la-plus-circle")"></i>
            @(AccountCategoryId.HasValue ? Resources.Action.SaveChanges : Resources.Action.Add)
        </button>
    </div>
</EditForm>

@code {
    [Parameter]
    public Guid EntryId { get; set; }
    
    [Parameter]
    public Guid? AccountCategoryId { get; set; }

    [Parameter]
    public EventCallback OnFormSubmit { get; set; }
    private FinancialAccountCategory? Category { get; set; }

    protected override void OnParametersSet()
    {
        Req.EntryId = EntryId;
        if (!AccountCategoryId.HasValue) return;
        Category = Db.FinancialAccountCategories.First(x => x.Id.Equals(AccountCategoryId.Value));
        Category.MapTo(Req);
    }

    private FinancialAccountCategoryRequest Req { get; set; } = new();

    private Task HandleSubmit()
    {
        if (AccountCategoryId.HasValue && Category != null)
        {
            Req.MapTo(Category);
        }
        else
        {
            var category = new FinancialAccountCategory();
            Req.MapTo(category);
            Db.FinancialAccountCategories.Add(category);
        }

        Db.SaveChanges();

        return OnFormSubmit.InvokeAsync();
    }
}