@using Relaks.Database
@using Relaks.Models.FinancialModels
@using Microsoft.EntityFrameworkCore
@using Relaks.Utils.Extensions
@using Relaks.Views.Pages.EntryFinancials.ViewModels

@inject AppDbContext Db;

<div class="d-flex flex-column gap-3">
    @foreach (var category in AccountCategories)
    {
        <div class="list-group border-0">
            <div class="list-group-item group-show bg-secondary bg-opacity-10 pe-2">
                <div class="d-flex justify-content-between align-items-center gap-2">
                    <div class="col">
                        <div class="fw-medium text-uppercase" style="letter-spacing: .15rem">@category.Title</div>
                        <span class="text-muted" style="opacity: .9">@CategoryBalances(category.Id)</span>
                    </div>
                    @if (EndOfCategoryTitle != null)
                    {
                        <div class="col-auto group-show__item">
                            @EndOfCategoryTitle(category.Id)
                        </div>
                    }
                </div>
            </div>
            @foreach (var account in category.Accounts)
            {
                <div class="list-group-item p-0 cursor-pointer d-flex justify-content-between align-items-center gap-2 group-show @(account.Id.Equals(AccountId) ? "bg-primary bg-opacity-25" : "")">
                    <div class="p-3 col pe-2" @onclick="@(() => OnClickAccount(account.Id))" disabled="@DisabledReasonAccountIds.Keys.Contains(account.Id)">
                        <_AccountsListItemText SelectedAccountId="@AccountId" FinancialAccount="@account" DisabledReasonAccountIds="@DisabledReasonAccountIds"/>
                    </div>
                    @if (EndOfItemTitle != null)
                    {
                        <div class="group-show__item pe-2 col-auto">
                            @EndOfItemTitle(account.Id)
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

@code {

    [Parameter]
    public Guid EntryId { get; set; }

    [Parameter]
    public Guid? AccountId { get; set; }

    [Parameter]
    public Dictionary<Guid, string> DisabledReasonAccountIds { get; set; } = new();

    [Parameter]
    public EventCallback<Guid?> AccountIdChanged { get; set; }

    [Parameter]
    public RenderFragment<Guid>? EndOfCategoryTitle { get; set; }

    [Parameter]
    public RenderFragment<Guid>? AfterCategoryTitle { get; set; }

    [Parameter]
    public RenderFragment<Guid>? EndOfItemTitle { get; set; }

    [Parameter]
    public List<FinancialAccountCategory> AccountCategories { get; set; } = new();
    
    [Parameter]
    public FinancialAccountSummaryBalances FinancialAccountSummaryBalances { get; set; } = null!;

    private RenderFragment<Guid> CategoryBalances => categoryId => __builder =>
    {

        var items = FinancialAccountSummaryBalances.Data.CategoryBalances.Where(x => x.AccountCategoryId.Equals(categoryId)).ToList();
        if (items.Any())
        {
            var i = 1;

            foreach (var categoryBalance in items)
            {
                <span class="fw-medium @categoryBalance.Balance.ToCssColorClass()">
                    @categoryBalance.Balance.ToString("N2") @categoryBalance.FinancialCurrency.Symbol
                </span>
                if (!i.Equals(items.Count))
                {
                    <span>, </span>
                }

                i++;
            }
        }
    };

    private Task OnClickAccount(Guid accountId)
    {
        return DisabledReasonAccountIds.Keys.Contains(accountId) ? Task.CompletedTask : AccountIdChanged.InvokeAsync(accountId);
    }

    // protected override void OnParametersSet()
    // {
    //     AccountCategories = Db
    //         .FinancialAccountCategories
    //         .Where(x => x.EntryId.Equals(EntryId))
    //         .Include(x => x.Accounts).ThenInclude(x => x.FinancialCurrency)
    //         .OrderBy(x => x.Title)
    //         .ToList();
    //
    //     FinancialAccountStatistic = new FinancialAccountStatistic(AccountCategories);
    //     FinancialAccountStatistic.Calculate();
    // }

}

