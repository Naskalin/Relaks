@using Relaks.Database
@using Relaks.Models.FinancialModels
@using Microsoft.EntityFrameworkCore
@using Relaks.Views.Pages.EntryFinancials.ViewModels

@inject AppDbContext Db;

<div class="mb-2 text-muted">
    @* @FinancialAccountStatistic.Data.CurrencyBalancesFragment() *@
    Итого: @CurrencyBalances
</div>
<div class="d-flex flex-column gap-3">
    @foreach (var category in AccountCategories)
    {
        <div class="list-group border-0">
            <div class="list-group-item group-show bg-secondary bg-opacity-10 pe-2">
                <div class="d-flex justify-content-between align-items-center gap-2">
                    <div class="col">
                        <div class="fw-medium text-uppercase" style="letter-spacing: .15rem">@category.Title</div>
                        <small class="text-muted">@CategoryBalances(category.Id)</small>
                    </div>
                    @if (EndOfCategoryTitle != null)
                    {
                        <div class="col-auto group-show__item">
                            @EndOfCategoryTitle(category.Id)
                        </div>
                    }
                </div>
            </div>
            @foreach (var account in category.Accounts)
            {
                <div class="list-group-item p-0 cursor-pointer d-flex justify-content-between align-items-center gap-2 group-show @(account.Id.Equals(AccountId) ? "bg-primary bg-opacity-25" : "")">
                    <div class="p-3 col pe-2" @onclick="@(() => OnClickAccount(account.Id))" disabled="@DisabledReasonAccountIds.Keys.Contains(account.Id)">
                        <div class="d-flex gap-2 align-items-center @(account.Id.Equals(AccountId) ? "text-primary" : "")">
                            <div class="col">
                                <span>
                                    <i class="las la-angle-right la-lg me-1"></i>
                                    @account.Title
                                    @if (DisabledReasonAccountIds.Keys.Contains(account.Id))
                                    {
                                        <Badge Color="Color.Danger" class="ms-1">@DisabledReasonAccountIds[account.Id]</Badge>
                                    }
                                </span>
                                @if (!string.IsNullOrEmpty(account.Description))
                                {
                                    <Popover Content="@account.Description">
                                        <i class="las la-comment la-lg ms-2" style="opacity: .7"></i>
                                    </Popover>
                                }
                            </div>
                            <div class="col-auto fw-semibold @(account.Balance > 0 ? "text-success" : "text-danger")">
                                @account.Balance.ToString("N2") @account.FinancialCurrency.Symbol
                            </div>
                        </div>
                    </div>
                    @if (EndOfItemTitle != null)
                    {
                        <div class="group-show__item pe-2 col-auto">
                            @EndOfItemTitle(account.Id)
                        </div>
                    }
                </div>
            }
        </div>
    }
</div>

@code {

    [Parameter]
    public Guid EntryId { get; set; }
    
    [Parameter]
    public Guid? AccountId { get; set; }

    [Parameter]
    public Dictionary<Guid, string> DisabledReasonAccountIds { get; set; } = new();
    
    [Parameter]
    public EventCallback<Guid?> AccountIdChanged { get; set; }

    [Parameter]
    public RenderFragment<Guid>? EndOfCategoryTitle { get; set; }
    
    [Parameter]
    public RenderFragment<Guid>? AfterCategoryTitle { get; set; }

    [Parameter]
    public RenderFragment<Guid>? EndOfItemTitle { get; set; }

    private List<FinancialAccountCategory> AccountCategories { get; set; } = new();
    private FinancialAccountStatistic FinancialAccountStatistic { get; set; } = null!;

    private RenderFragment CurrencyBalances => __builder =>
    {
        var items = FinancialAccountStatistic.Data.CurrencyBalances;
        if (items.Any())
        {
            var i = 1;
            
            foreach (var categoryBalance in items)
            {
                <span class="@(categoryBalance.Balance > 0 ? "text-success" : "text-danger")">
                    @categoryBalance.Balance.ToString("N2") @categoryBalance.FinancialCurrency.Symbol
                </span>
                if (!i.Equals(items.Count))
                {
                    <span>, </span>
                }

                i++;
            }
        }
    };

    private RenderFragment<Guid> CategoryBalances => categoryId => __builder =>
    {

        var items = FinancialAccountStatistic.Data.CategoryBalances.Where(x => x.AccountCategoryId.Equals(categoryId)).ToList();
        if (items.Any())
        {
            var i = 1;

            foreach (var categoryBalance in items)
            {
                <span class="fw-semibold @(categoryBalance.Balance > 0 ? "text-success" : "text-danger")">
                    @categoryBalance.Balance.ToString("N2") @categoryBalance.FinancialCurrency.Symbol
                </span>
                if (!i.Equals(items.Count))
                {
                    <span>, </span>
                }

                i++;
            }
        }
    };
    
    private Task OnClickAccount(Guid accountId)
    {
        return DisabledReasonAccountIds.Keys.Contains(accountId) ? Task.CompletedTask : AccountIdChanged.InvokeAsync(accountId);
    }

    protected override void OnParametersSet()
    {
        AccountCategories = Db
            .FinancialAccountCategories
            .Where(x => x.EntryId.Equals(EntryId))
            .Include(x => x.Accounts).ThenInclude(x => x.FinancialCurrency)
            .OrderBy(x => x.Title)
            .ToList();

        FinancialAccountStatistic = new FinancialAccountStatistic(AccountCategories);
        FinancialAccountStatistic.Calculate();
    }

}

