@using Relaks.Views.Pages.EntryFinancials.ViewModels
@using Relaks.Interfaces
@using Relaks.Views.Pages.FinancialTransactionCategories.ViewModels

<div class="d-flex align-items-center mb-3 gap-2">
    <div class="col">
        <span class="h5">Транзакции</span>
    </div>
    <div class="col-auto">
        <button type="button"
                class="btn btn-outline-primary"
                disabled="@(!Store.AccountId.HasValue)"
                title="@(!Store.AccountId.HasValue ? "Выберите счёт" : "")"
                @onclick="@HandleAddEntryTransaction">
            Транзакция
            <i class="las la-coins la-lg ms-1"></i>
        </button>
    </div>
    <div class="col-auto">
        <button type="button"
                class="btn btn-outline-primary"
                disabled="@(!Store.AccountId.HasValue)"
                title="@(!Store.AccountId.HasValue ? "Выберите счёт" : "")"
                @onclick="@HandleAddAccountTransaction">
            Перевод между счетами
            <i class="las la-exchange-alt la-lg ms-1"></i>
        </button>
    </div>
    <div class="col-auto">
        <button type="button" class="btn btn-outline-primary" @onclick="@HandleAddCategory">
            Категория транзакции
            <i class="las la-plus-circle la-lg ms-1"></i>
        </button>
    </div>
    @* <div class="col-auto"> *@
    @*     <button type="button" class="btn btn-outline-secondary" @onclick="@HandleShowTransactionCategories"> *@
    @*         Категории транзакций *@
    @*         <i class="las la-angle-right la-lg ms-1"></i> *@
    @*     </button> *@
    @* </div> *@
</div>

@if (Store.AccountId.HasValue)
{
    <_TransactionsList OnStateChanged="@(() => OnStateChanged.InvokeAsync())"
                       FinancialAccountId="@Store.AccountId.Value"
                       FirstRow="@(new GuidRowView() {Th = FirstRowTh, Td = FirstRowTd})"
    />   
}
else
{
    <ul class="ul-info">
        <li>Добавьте категории для счетов, они уникальны для каждого объединения</li>
        <li>Выберите счёт для добавления новой транзакции для этого счёта</li>
        <li>Выберите счёт для отображения последних транзакций и различной статистики</li>
        <li>[Общие данные &rarr; Категории финансовых транзакций] являются общими категориями транзакций для всех объединений</li>
    </ul>
}

@code {

    [CascadingParameter]
    public FinancialsStore Store { get; set; } = null!;
    
    [CascadingParameter]
    public FinancialTransactionCategoriesStore TransactionCategoriesStore { get; set; } = null!;

    [Parameter]
    public EventCallback OnStateChanged { get; set; }

    private Task HandleAddCategory()
    {
        TransactionCategoriesStore.SidebarState = FinancialTransactionCategoriesStore.SidebarStateEnum.New;
        return TransactionCategoriesStore.ShowFormModal();
    }

    private Task HandleAddEntryTransaction()
    {
        Store.BodyState = FinancialsStore.BodyEnum.AddEntryTransaction;
        return OnStateChanged.InvokeAsync();
    }
    
    private Task HandleAddAccountTransaction()
    {
        Store.BodyState = FinancialsStore.BodyEnum.AddAccountTransaction;
        return OnStateChanged.InvokeAsync();
    }

    private RenderFragment<Guid> FirstRowTd => guid => __builder =>
    {
        <td>
            <button type="button" class="btn btn-circle btn-outline-secondary btn-sm group-show__item" @onclick="@(() => HandleEditTransaction(guid))">
                <i class="las la-edit la-lg"></i>
            </button>
        </td>
    };

    private RenderFragment FirstRowTh => __builder =>
    {
        <th style="width: 50px"></th>
    };

    private Task HandleEditTransaction(Guid transactionId)
    {

        Store.BodyEditTransactionId = transactionId;
        Store.BodyState = FinancialsStore.BodyEnum.EditEntryTransaction;
        return OnStateChanged.InvokeAsync();
    }

    private Task HandleShowTransactionCategories()
    {
        Store.BodyState = FinancialsStore.BodyEnum.TransactionCategories;
        return OnStateChanged.InvokeAsync();
    }
}