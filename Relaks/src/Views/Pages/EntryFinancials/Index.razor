@page "/entries/{entryId:guid}/financials"
@page "/entries/{entryId:guid}/financials/{accountId:guid}"

@using Relaks.Views.Pages.EntryFinancials.ViewModels
@using Relaks.Database
@using Relaks.Utils.Extensions
@using Relaks.Views.Pages.FinancialTransactionCategories.ViewModels

@inject AppDbContext Db;
@inject DialogService DialogService;
@inject NavigationManager Navigation;

<EntryProfileLayout EntryId="@EntryId">
    <EntryProfileTabs EntryId="@EntryId"/>

    <CascadingValue Value="@TransactionCategoriesStore">
        <CascadingValue Value="@Store">
            <MyTitle ShowEndTitle="@true">
                <ChildContent>Финансы <span class="ms-2" style="font-size: 1.4rem; opacity: .9">@CurrencyBalances</span></ChildContent>
                <EndTitle>
                    <_Actions/>
                </EndTitle>
            </MyTitle>

            <_SelectedAccount OnStateChanged="@StateHasChanged"/>
            <_ChartFilter OnStateHasChanged="@Store.OnFilterChanged"/>

            <div class="row">
                <div class="col-5">
                    <_ChartSummary/>
                    <div class="my-3"></div>
                    <_ChartCategories/>
                </div>
                <div class="col-7">
                    <_ChartLine/>
                    <div class="my-3"></div>
                    <_TransactionsList OnClickTransaction="@(guid => Store.ShowEntryTransactionFormModal(guid))"/>
                </div>
            </div>
            @* *@
            @* <div class="row"> *@
            @*     <div class="col"> *@
            @*         pie chart *@
            @*         *@
            @*     </div> *@
            @*     <div class="col-7"> *@
            @*          *@
            @*     </div> *@
            @* </div> *@


            @* @switch (Store.SidebarState) *@
            @* { *@
            @*     case FinancialsStore.SidebarEnum.EditAccountCategory: *@
            @*     case FinancialsStore.SidebarEnum.AddAccountCategory: *@
            @*         <_AccountCategoryForm OnStateChanged="@StateHasChanged"/> *@
            @*         break; *@
            @*     case FinancialsStore.SidebarEnum.EditAccount: *@
            @*     case FinancialsStore.SidebarEnum.AddAccount: *@
            @*         <_AccountForm OnStateChanged="@StateHasChanged"/> *@
            @*         break; *@
            @*     default: *@
            @* *@
            @*         break; *@
            @* } *@

            @* @switch (Store.BodyState) *@
            @* { *@
            @*     case FinancialsStore.BodyEnum.EditEntryTransaction: *@
            @*     case FinancialsStore.BodyEnum.AddEntryTransaction: *@
            @*         <_TransactionEntryForm OnStateChanged="@StateHasChanged"/> *@
            @*         break; *@
            @*     case FinancialsStore.BodyEnum.EditAccountTransaction: *@
            @*     case FinancialsStore.BodyEnum.AddAccountTransaction: *@
            @*         <_TransactionAccountForm OnStateChanged="@StateHasChanged"/> *@
            @*         break; *@
            @*     $1$     case FinancialsStore.BodyEnum.EditTransactionCategory: #1# *@
            @*     $1$     case FinancialsStore.BodyEnum.AddTransactionCategory: #1# *@
            @*     $1$         <_TransactionCategoryForm OnStateChanged="@StateHasChanged"/> #1# *@
            @*     $1$         break; #1# *@
            @*     $1$     case FinancialsStore.BodyEnum.TransactionCategories: #1# *@
            @*     $1$         <_TransactionCategoriesList OnStateChanged="@StateHasChanged"/> #1# *@
            @*     $1$         break; #1# *@
            @*     default: *@
            @*         <_BodyDefault OnStateChanged="@StateHasChanged"/> *@
            @*         break; *@
            @* } *@


            @if (!Store.AccountId.HasValue)
            {
                <ul class="ul-info">
                    <li>Добавьте категории для счетов, они уникальны для каждого объединения</li>
                    <li>Выберите счёт для добавления новой транзакции для этого счёта</li>
                    <li>Выберите счёт для отображения последних транзакций и различной статистики</li>
                    <li>[Общие данные &rarr; Категории финансовых транзакций] являются общими категориями транзакций для всех объединений</li>
                </ul>
            }
        </CascadingValue>
    </CascadingValue>
</EntryProfileLayout>

@code {
    private FinancialsStore Store { get; set; } = null!;
    private FinancialTransactionCategoriesStore TransactionCategoriesStore { get; set; } = null!;

    [Parameter] public Guid EntryId { get; set; }

    [Parameter] public Guid? AccountId { get; set; }

    protected override void OnInitialized()
    {
        Store = new(Db, EntryId, DialogService);
        Store.Initialize();
    }

    private RenderFragment CurrencyBalances => __builder =>
    {
        var items = Store.FinancialAccountSummaryBalances.Data.CurrencyBalances;
        if (items.Any())
        {
            var i = 1;

            foreach (var categoryBalance in items)
            {
                <span class="@categoryBalance.Balance.ToCssColorClass()">
                    @categoryBalance.Balance.ToString("N2") @categoryBalance.FinancialCurrency.Symbol
                </span>
                if (!i.Equals(items.Count))
                {
                    <span>, </span>
                }

                i++;
            }
        }
    };

    protected override void OnParametersSet()
    {
        TransactionCategoriesStore = new FinancialTransactionCategoriesStore(Db, DialogService);
        TransactionCategoriesStore.FindCategories();

        if (!Store.AccountId.Equals(AccountId))
        {
            Store.AccountId = AccountId;
        }

        Store.OnChangeAccount();

        if (!Store.AccountId.HasValue && Store.FinancialAccounts.Any())
        {
            var first = Store.FinancialAccounts.First();
            Navigation.NavigateTo($"/entries/{EntryId.ToString()}/financials/{first.Id.ToString()}");
            AccountId = first.Id;
        }
    }

}