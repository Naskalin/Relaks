@page "/entries/{entryId:guid}/financials"
@page "/entries/{entryId:guid}/financials/{accountId:guid}"

@using Relaks.Views.Pages.EntryFinancials.ViewModels
@using Relaks.Database
@using Relaks.Database.Repositories
@using Relaks.Models.FinancialModels
@using Relaks.Utils.Extensions
@using Relaks.Views.Pages.FinancialTransactionCategories.ViewModels
@using Microsoft.EntityFrameworkCore

@inject AppDbContext Db;
@inject DialogService DialogService;
@inject NavigationManager Navigation;

<EntryProfileLayout EntryId="@EntryId">
    <EntryProfileTabs EntryId="@EntryId"/>
    
    <CascadingValue Value="@TransactionCategoriesStore">
        <CascadingValue Value="@Store">
            <MyTitle ShowEndTitle="@true">
                <ChildContent>Финансы <span class="ms-2" style="font-size: 1.4rem; opacity: .9">@CurrencyBalances</span></ChildContent>
                <EndTitle>
                    <_Actions/>
                </EndTitle>
            </MyTitle>

            <_SelectedAccount OnStateChanged="@StateHasChanged" OnClickTransactionBtn="@ShowTransactionFormModal"/>
            <_ChartFilter OnStateHasChanged="@Store.OnFilterChanged"/>

            <div class="row">
                <div class="col-5">
                    <_ChartSummary/>
                    <div class="my-3"></div>
                    <_ChartCategories/>
                </div>
                <div class="col-7">
                    <_ChartLine/>
                    <div class="my-3"></div>
                    <_TransactionsList OnClickTransaction="@ShowTransactionFormModal"/>
                </div>
            </div>

            @if (!Store.AccountId.HasValue)
            {
                <ul class="ul-info">
                    <li>Добавьте категории для счетов, они уникальны для каждого объединения</li>
                    <li>Выберите счёт для добавления новой транзакции для этого счёта</li>
                    <li>Выберите счёт для отображения последних транзакций и различной статистики</li>
                    <li>[Общие данные &rarr; Категории финансовых транзакций] являются общими категориями транзакций для всех объединений</li>
                </ul>
            }
        </CascadingValue>
    </CascadingValue>
</EntryProfileLayout>

@code {
    private FinancialsStore Store { get; set; } = null!;
    private FinancialTransactionCategoriesStore TransactionCategoriesStore { get; set; } = null!;

    [Parameter] public Guid EntryId { get; set; }

    [Parameter] public Guid? AccountId { get; set; }

    protected override void OnInitialized()
    {
        Store = new(Db, EntryId, DialogService);
        Store.Initialize();
    }

    private RenderFragment CurrencyBalances => __builder =>
    {
        var items = Store.FinancialAccountSummaryBalances.Data.CurrencyBalances;
        if (items.Any())
        {
            var i = 1;

            foreach (var categoryBalance in items)
            {
                <span class="@categoryBalance.Balance.ToCssColorClass()">
                    @categoryBalance.Balance.ToString("N2") @categoryBalance.FinancialCurrency.Symbol
                </span>
                if (!i.Equals(items.Count))
                {
                    <span>, </span>
                }

                i++;
            }
        }
    };

    protected override void OnParametersSet()
    {
        TransactionCategoriesStore = new FinancialTransactionCategoriesStore(Db, DialogService);
        TransactionCategoriesStore.FindCategories();

        if (!Store.AccountId.Equals(AccountId))
        {
            Store.AccountId = AccountId;
        }

        Store.OnChangeAccount();

        if (!Store.AccountId.HasValue && Store.FinancialAccounts.Any())
        {
            var lastUpdated = Db.BaseFinancialTransactions.Include(x => x.Account)
                    .ThenInclude(a => a.Category)
                    .OrderByDescending(x => x.CreatedAt)
                    .FirstOrDefault(x => x.Account.Category.EntryId.Equals(EntryId))
                ;
            if (lastUpdated != null)
            {
                Navigation.NavigateTo($"/entries/{EntryId.ToString()}/financials/{lastUpdated.AccountId.ToString()}");
                AccountId = lastUpdated.Id;   
            }
        }
    }
    
    private Task ShowTransactionFormModal(Tuple<Type, Guid?> typeAndTransactionId)
    {
        ArgumentNullException.ThrowIfNull(Store.Account);
        var type = typeAndTransactionId.Item1;
        var transactionId = typeAndTransactionId.Item2;
        
        Store.IsOpenAccounts = false;
        var option = new DialogOption
        {
            IsKeyboard = true,
            IsBackdrop = true,
            Title = transactionId.HasValue ? "Изменить транзакцию" : "Добавить транзакцию",
            IsScrolling = false,
            CloseButtonText = "Закрыть",
            Size = Size.Large
        };
        
        var componentConfig = new Dictionary<string, object?>()
        {
            ["Account"] = Store.Account,
            ["TransactionCategories"] = Db.FinancialTransactionCategories.ToBaseTree(),
            ["TransactionId"] = transactionId,
            ["OnFormSubmit"] = EventCallback.Factory.Create(this, async _ =>
            {
                Store.OnFilterChanged();
                await option.CloseDialogAsync();
            }),
        };

        if (type == typeof(AccountFinancialTransaction))
        {
            componentConfig["AccountCategories"] = Store.AccountCategories;
            componentConfig["FinancialAccountSummaryBalances"] = Store.FinancialAccountSummaryBalances;
        }
        
        option.Component = type == typeof(EntryFinancialTransaction) 
            ? BootstrapDynamicComponent.CreateComponent<_TransactionEntryForm>(componentConfig) 
            : BootstrapDynamicComponent.CreateComponent<_TransactionAccountForm>(componentConfig);
        
        return DialogService.Show(option);
    }
}