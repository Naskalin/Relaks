@page "/entries/{entryId:guid}/financials"
@page "/entries/{entryId:guid}/financials/{accountId:guid}"

@using Relaks.Views.Pages.EntryFinancials.ViewModels
@using Relaks.Database
@using Relaks.Views.Pages.FinancialTransactionCategories.ViewModels

@inject AppDbContext Db;
@inject DialogService DialogService;

<EntryProfileLayout EntryId="@EntryId">
    <EntryProfileTabs EntryId="@EntryId"/>
    <MyTitle>Финансы</MyTitle>

    <CascadingValue Value="@TransactionCategoriesStore">
        <CascadingValue Value="@Store">
            <_SidebarDefault OnStateChanged="@StateHasChanged"/>
            
            
            @switch (Store.SidebarState)
            {
                case FinancialsStore.SidebarEnum.EditAccountCategory:
                case FinancialsStore.SidebarEnum.AddAccountCategory:
                    <_AccountCategoryForm OnStateChanged="@StateHasChanged"/>
                    break;
                case FinancialsStore.SidebarEnum.EditAccount:
                case FinancialsStore.SidebarEnum.AddAccount:
                    <_AccountForm OnStateChanged="@StateHasChanged"/>
                    break;
                default:

                    break;
            }

            @switch (Store.BodyState)
            {
                case FinancialsStore.BodyEnum.EditEntryTransaction:
                case FinancialsStore.BodyEnum.AddEntryTransaction:
                    <_TransactionEntryForm OnStateChanged="@StateHasChanged"/>
                    break;
                case FinancialsStore.BodyEnum.EditAccountTransaction:
                case FinancialsStore.BodyEnum.AddAccountTransaction:
                    <_TransactionAccountForm OnStateChanged="@StateHasChanged"/>
                    break;
                @*     case FinancialsStore.BodyEnum.EditTransactionCategory: *@
                @*     case FinancialsStore.BodyEnum.AddTransactionCategory: *@
                @*         <_TransactionCategoryForm OnStateChanged="@StateHasChanged"/> *@
                @*         break; *@
                @*     case FinancialsStore.BodyEnum.TransactionCategories: *@
                @*         <_TransactionCategoriesList OnStateChanged="@StateHasChanged"/> *@
                @*         break; *@
                default:
                    <_BodyDefault OnStateChanged="@StateHasChanged"/>
                    break;
            }

            <_SelectedAccount OnStateChanged="@StateHasChanged"/>

            @if (!Store.AccountId.HasValue)
            {
                <ul class="ul-info">
                    <li>Добавьте категории для счетов, они уникальны для каждого объединения</li>
                    <li>Выберите счёт для добавления новой транзакции для этого счёта</li>
                    <li>Выберите счёт для отображения последних транзакций и различной статистики</li>
                    <li>[Общие данные &rarr; Категории финансовых транзакций] являются общими категориями транзакций для всех объединений</li>
                </ul>
            }
        </CascadingValue>
    </CascadingValue>
</EntryProfileLayout>

@code {
    private FinancialsStore Store { get; set; } = null!;
    private FinancialTransactionCategoriesStore TransactionCategoriesStore { get; set; } = null!;

    [Parameter]
    public Guid EntryId { get; set; }

    [Parameter]
    public Guid? AccountId { get; set; }

    protected override void OnInitialized()
    {
        Store = new(Db, EntryId);
        Store.Initialize();
    }

    protected override void OnParametersSet()
    {
        TransactionCategoriesStore = new FinancialTransactionCategoriesStore(Db, DialogService);
        TransactionCategoriesStore.FindCategories();
        
        if (!Store.AccountId.Equals(AccountId))
        {
            Store.AccountId = AccountId;
            Store.BodyState = FinancialsStore.BodyEnum.Default;   
        }
    }
}