@using Relaks.Views.Pages.EntryFinancials.ViewModels
@using Relaks.Models.FinancialModels
@using Relaks.Database
@using Relaks.Database.Repositories
@using Microsoft.EntityFrameworkCore
@using Relaks.Interfaces
@using Relaks.Models.Misc

@inject AppDbContext Db;

<MyPagination TotalPages="@Transactions.TotalPages"
              TotalItems="@Transactions.TotalItems"
              ActivePage="@TransactionListRequest.Page"
              OnPageChanged="@HandlePageChanged"
/>

<table class="table table-hover table-striped align-middle my-3">
    <thead>
    <tr>
        @if (FirstRow != null)
        {
            @FirstRow.Th
        }
        <th style="width: 125px">Дата</th>
        <th style="width: 100px">Тип</th>
        <th style="width: 120px">Сумма</th>
        <th style="width: 180px">Баланс в моменте</th>
        <th style="width: 44px"></th>
        <th>Объединение</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var transaction in Transactions.Items)
    {
        <_TransactionsListItem FirstRow="@FirstRow" Transaction="@transaction" FinancialAccountId="@FinancialAccountId"/>
    }
    </tbody>
</table>

<MyPagination TotalPages="@Transactions.TotalPages"
              TotalItems="@Transactions.TotalItems"
              ActivePage="@TransactionListRequest.Page"
              OnPageChanged="@HandlePageChanged"
              />

@code {
    [Parameter]
    public EventCallback OnStateChanged { get; set; }

    [Parameter]
    public IGuidRowView? FirstRow { get; set; }

    [Parameter]
    public Guid FinancialAccountId { get; set; }

    private FinancialTransactionListRequest TransactionListRequest { get; set; } = new() {Page = 1, PerPage = 10};
    private PaginatableResult<BaseFinancialTransaction> Transactions { get; set; } = new();


    private void FindTransactions()
    {
        Transactions = Db.BaseFinancialTransactions
            .Where(x => x.AccountId.Equals(FinancialAccountId))
            .Include(x => x.Account)
            .ThenInclude(a => a.FinancialCurrency)
            .OrderByDescending(x => x.CreatedAt)
            .ToPaginatedResult(TransactionListRequest)
        ;
    }

    private Task HandlePageChanged(int page)
    {
        TransactionListRequest.Page = page;
        FindTransactions();
        return OnStateChanged.InvokeAsync();
    }

    protected override void OnParametersSet()
    {
        FindTransactions();
    }
}