@using Relaks.Views.Pages.EntryFinancials.ViewModels
@using Relaks.Database
@using Relaks.Managers
@using Relaks.Mappers
@using Relaks.Models.FinancialModels

@inject AppDbContext Db;
@inject IJSRuntime JsRuntime;
@inject NavigationManager Navigation;
@inject FinancialManager FinManager;


<EditForm Model="@Req" OnValidSubmit="@HandleSubmit">
    <FluentValidationValidator DisableAssemblyScanning="@true"/>
    <ValidationSummary/>

    <div class="mb-3">
        <label for="financial-title" class="form-label">Название счёта *</label>
        <InputText id="financial-title" @bind-Value="@Req.Title" required="required" class="form-control" maxlength="255"/>
        <ValidationMessage For="@(() => Req.Title)"/>
    </div>

    <div class="mb-3">
        <label for="financial-category" class="form-label">Категория счёта *</label>
        <Select id="financial-category" @bind-Value="@Req.CategoryId" Items="@CategoryOptions" ShowSearch="true"></Select>
        <ValidationMessage For="@(() => Req.CategoryId)"/>
    </div>

    <div class="mb-3">
        <label for="financial-currency" class="form-label">Валюта *</label>
        <Select id="financial-currency" @bind-Value="@Req.FinancialCurrencyId" Items="@CurrencyOptions" ShowSearch="true"></Select>
        <ValidationMessage For="@(() => Req.FinancialCurrencyId)"/>
    </div>

    @if (!AccountId.HasValue)
    {
        <div class="mb-3">
            <label for="financial-initial-balance" class="form-label">Начальный баланс</label>
            <BootstrapInputGroup>
                <BootstrapInputNumber @bind-Value="Req.InitialBalance"
                                      IsSelectAllTextOnFocus="true"
                                      Step="0.01"
                                      Id="financial-initial-balance"/>
                <BootstrapInputGroupLabel DisplayText="@(Currencies.FirstOrDefault(x => x.Id.Equals(Req.FinancialCurrencyId))?.Symbol)"/>
            </BootstrapInputGroup>
            <ValidationMessage For="@(() => Req.InitialBalance)"/>
            <div class="form-text">Начальный баланс можно задать только при создании счёта.</div>
        </div>
    }

    <div class="row">
        <div class="col">
            <div class="mb-3">
                <label for="financial-startAt" class="form-label">Открытие счёта *</label>
                <InputDate Type="@InputDateType.Date"
                           @bind-Value="@Req.StartAt"
                           id="financial-startAt"
                           class="form-control"/>
                <ValidationMessage For="@(() => Req.StartAt)"/>
            </div>
        </div>
        <div class="col">
            <div class="mb-3">
                <label for="financial-endAt" class="form-label">Закрытие счёта</label>
                <InputDate Type="@InputDateType.Date"
                           @bind-Value="@Req.EndAt"
                           id="financial-endAt"
                           class="form-control"/>
                <ValidationMessage For="@(() => Req.EndAt)"/>
            </div>
        </div>
    </div>

    <div class="mb-3">
        <label for="financial-desc" class="form-label">Описание</label>
        <MyTextarea @bind-Value="@Req.Description" id="financial-desc" maxlength="500"/>
        <ValidationMessage For="@(() => Req.Description)"/>
    </div>

    <div class="mb-3">
        <button class="btn btn-primary">
            <i class="las la-lg me-1 @(AccountId.HasValue ? "la-edit" : "la-plus-circle")"></i>
            @(AccountId.HasValue ? Resources.Action.SaveChanges : Resources.Action.Add)
        </button>
    </div>
</EditForm>

@if (AccountId.HasValue)
{
    <hr>
    <div class="text-end">
        <button type="button" class="btn btn-link text-danger" @onclick="@HandleDelete">
            <i class="las la-trash la-lg"></i>
            @Resources.Action.Delete
        </button>
    </div>
}

@code {

    [Parameter]
    public Guid? AccountId { get; set; }
    
    [Parameter]
    public Guid EntryId { get; set; }

    [Parameter]
    public EventCallback OnFormSubmit { get; set; }
    
    private FinancialAccount? Account { get; set; }
    private List<FinancialCurrency> Currencies { get; set; } = new();
    private List<SelectedItem> CategoryOptions { get; set; } = new();
    private List<SelectedItem> CurrencyOptions { get; set; } = new();

    protected override void OnInitialized()
    {
        Currencies = Db.FinancialCurrencies
            .OrderByDescending(x => x.Id.Equals("RUB"))
            .ThenByDescending(x => x.Id.Equals("USD"))
            .ThenByDescending(x => x.Id.Equals("EUR"))
            .ToList();
    }

    private void GetCategoryOptions() =>
        CategoryOptions = Db.FinancialAccountCategories
            .Where(x => x.EntryId.Equals(EntryId))
            .Select(x => new SelectedItem(x.Id.ToString(), x.Title))
            .ToList();

    private void CurrenciesSelectOptions() =>
        CurrencyOptions = Currencies
            .Select(x => new SelectedItem(x.Id, x.ToString()))
            .ToList();

    protected override void OnParametersSet()
    {
        GetCategoryOptions();
        CurrenciesSelectOptions();
        
        if (!AccountId.HasValue) return;
        Account = Db.FinancialAccounts.First(x => x.Id.Equals(AccountId.Value));
        Account.MapTo(Req);
    }

    private FinancialAccountRequest Req { get; set; } = new();

    private Task HandleSubmit()
    {
        if (AccountId.HasValue && Account != null)
        {
            Req.MapTo(Account);
        }
        else
        {
            var account = new FinancialAccount()
            {
                Balance = Req.InitialBalance ?? 0
            };
            Req.MapTo(account);
            Db.FinancialAccounts.Add(account);
        }

        Db.SaveChanges();

        return OnFormSubmit.InvokeAsync();
    }

    private async Task HandleDelete()
    {
        if (Account == null) return;
        var isConfirmed = await JsRuntime.InvokeAsync<bool>("confirm", Resources.Action.Delete_Confirmation);
        if (!isConfirmed) return;

        Db.FinancialAccounts.Remove(Account);
        
        // Реверс: "тут прибавили, там убавили и наоборот"
        // Надо пересчитывать [баланс в моменте] для связанного аккаунта.
        var reverseTransactions = Db
            .AccountFinancialTransactions
            .Where(x => x.SecondAccountId.Equals(Account.Id))
            .ToList()
        ;
        foreach (var reverseTransaction in reverseTransactions)
        {
            FinManager.BaseDeleteTransaction(reverseTransaction);
            await Db.SaveChangesAsync();
        }

        if (!reverseTransactions.Any()) await Db.SaveChangesAsync();

        Navigation.NavigateTo($"/entries/{EntryId}/financials");

        await OnFormSubmit.InvokeAsync();
    }
}