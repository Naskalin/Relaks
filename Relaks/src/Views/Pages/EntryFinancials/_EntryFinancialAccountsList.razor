@using Relaks.Database

@inject AppDbContext Db;

<p>_EntryFinancialAccountsList EntryId: @EntryId</p>
<p>_EntryFinancialAccountsList AccountId: @AccountId</p>
@if (EntryId.HasValue)
{
    <div class="d-flex align-items-center mb-3 gap-2">
        <div>
            <i class="las la-hand-point-right text-secondary" style="font-size: 1.8rem;"></i>
        </div>
        <div>
            <Select TValue="Guid?"
                    Items="EntrySelectItems"
                    Value="@EntryId"
                    OnSelectedItemChanged="@OnEntryIdChanged"
                    >
                <DisplayTemplate>
                    <EntryInlineItem EntryId="@Guid.Parse(context!.Value)"/>
                </DisplayTemplate>
            </Select>
        </div>
    </div>

    <_AccountsList AccountId="@AccountId" AccountIdChanged="@AccountIdChanged" EntryId="@EntryId.Value"/>
}
else
{
    <p>Не найдено объединений с наличием финансовых счетов.</p>   
}

@code {
    [Parameter]
    public Guid? EntryId { get; set; }
    
    [Parameter]
    public EventCallback<Guid?> EntryIdChanged { get; set; }
    
    [Parameter]
    public Guid? AccountId { get; set; }
    
    [Parameter]
    public EventCallback<Guid?> AccountIdChanged { get; set; }
    
    [Parameter]
    public EventCallback OnStateChanged { get; set; }
    
    protected override void OnParametersSet()
    {
        var entryIds = Db.FinancialAccountCategories.Select(x => x.EntryId).Distinct();
        if (!entryIds.Any()) return;
        
        EntrySelectItems = Db.BaseEntries
            .Where(x => entryIds.Contains(x.Id))
            .Select(x => new SelectedItem(x.Id.ToString(), x.Name))
            .ToList();

        EntryId ??= entryIds.First();
    }
    
    
    private List<SelectedItem> EntrySelectItems { get; set; } = new();
    
    private Task OnEntryIdChanged(SelectedItem item)
    {
        EntryId = Guid.TryParse(item.Value, out var guid) ? guid : null;
        return EntryIdChanged.InvokeAsync(EntryId);
    }
    
    private Task HandleClickAccount(Guid? accountId)
    {
        AccountId = accountId;
        return OnStateChanged.InvokeAsync();
    }
}