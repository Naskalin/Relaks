@using Relaks.Views.Pages.EntryFinancials.ViewModels
@using Relaks.Models.FinancialModels
@using Relaks.Views.Pages.FinancialTransactionCategories.ViewModels
@using Console = System.Console

<div class="row group-show align-items-end mb-3">
    <div class="col">
        <div class="d-flex gap-2 align-items-center">
            <div class="col-7">
                <label class="form-label">Категория</label>
                <TreeSelect TNode="@FinancialTransactionCategory"
                            Nodes="@TransactionCategories"
                            NodeId="@Req.CategoryId"
                            OnClickNode="@HandleClickCategory"
                            />
                <ValidationMessage For="@(() => Req.CategoryId)"/>
            </div>
            <div class="col-2">
                <label for="transaction-item-quantity-@FieldId" class="form-label">Кол-во</label>
                <BootstrapInputNumber @bind-Value="Req.Quantity" 
                                      OnValueChanged="@(_ => OnStateChanged.InvokeAsync(Req))" 
                                      IsSelectAllTextOnFocus="true" 
                                      Id="@($"transaction-item-quantity-{FieldId}")" 
                                      Min="1"/>
                <ValidationMessage For="@(() => Req.Quantity)"/>
            </div>
            <div class="col-3">
                <label for="transaction-item-amount-@FieldId" class="form-label">Сумма</label>
                <BootstrapInputGroup>
                    <BootstrapInputNumber @bind-Value="Req.Amount"
                                          IsSelectAllTextOnFocus="true"
                                          Step="0.01"
                                          Id="@($"transaction-item-amount-{FieldId}")"
                                          OnValueChanged="@(_ => OnStateChanged.InvokeAsync(Req))"/>
                    <BootstrapInputGroupLabel DisplayText="@Currency?.Symbol"/>
                </BootstrapInputGroup>
                <ValidationMessage For="@(() => Req.Amount)"/>
            </div>
        </div>
    </div>
    <div class="col-auto group-show__item">
        <button type="button"
                class="btn btn-circle btn-outline-danger btn-sm"
                style="position: relative; bottom: 4px;"
                disabled="@(!CanDelete)"
                @onclick="@(() => OnDelete.InvokeAsync(Req))">
            <i class="las la-times la-lg"></i>
        </button>
    </div>
</div>

@code {
    [Parameter]
    public List<FinancialTransactionCategory> TransactionCategories { get; set; } = new();

    [Parameter]
    public bool CanDelete { get; set; }

    [Parameter]
    public FinancialCurrency? Currency { get; set; } = null!;

    [Parameter]
    public EventCallback<FinancialTransactionItemRequest> OnStateChanged { get; set; }

    [Parameter]
    public EventCallback<FinancialTransactionItemRequest> OnDelete { get; set; }

    [Parameter]
    public FinancialTransactionItemRequest Req { get; set; } = null!;

    private string FieldId { get; set; } = Guid.NewGuid().ToString();

    private Task HandleClickCategory(Guid categoryId)
    {
        Req.CategoryId = categoryId;
        return OnStateChanged.InvokeAsync(Req);
    }
}