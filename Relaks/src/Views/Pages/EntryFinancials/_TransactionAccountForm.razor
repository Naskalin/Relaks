@using Relaks.Views.Pages.EntryFinancials.ViewModels
@using Relaks.Database
@using Relaks.Mappers
@using Relaks.Models.FinancialModels
@using Microsoft.EntityFrameworkCore
@using Relaks.Managers

@inject AppDbContext Db;
@inject FinancialManager FinManager;
@inject IJSRuntime JsRuntime;

<EditForm Model="@Req" OnValidSubmit="@HandleSubmit">
    <FluentValidationValidator DisableAssemblyScanning="@true"/>
    <ValidationSummary/>

    <div class="mb-3">
        <label class="form-label">Тип *</label>
        <div class="btn-group w-100">
            @foreach (var t in ArithmeticTypes)
            {
                <button type="button"
                        @onclick="@(() => Req.IsPlus = t.Val)"
                        class="btn w-50 @(Req.IsPlus.HasValue && Req.IsPlus.Value == t.Val ? $"btn-{t.Color}" : "btn-outline-secondary")">
                    <i class="@t.Icon la-lg me-2"></i>
                    @t.Name
                </button>
            }
        </div>
        @if (Req.IsPlus.HasValue)
        {
            <div class="form-text">
                @(Req.IsPlus == true ? "Пополнить этот счёт суммой, которая будет списана с другого выбранного счёта" : "Перевести сумму на другой выбранный счёт, которая будет списана с этого счёта")
            </div>
        }
        <ValidationMessage For="@(() => Req.IsPlus)"/>
    </div>

    <div class="mb-3">
        <SelectEntryFinancialAccount @bind-AccountId="@Req.SecondAccountId"
                                     AccountCategories="@AccountCategories"
                                     FinancialAccountSummaryBalances="@FinancialAccountSummaryBalances"
                                     DisabledReasonAccountIds="@DisabledReasonAccountIds"/>
        <ValidationMessage For="@(() => Req.SecondAccountId)"/>
    </div>

    <div class="mb-3">
        <label for="financial-transaction-desc" class="form-label">Описание транзакции</label>
        <MyTextarea @bind-Value="@Req.Description" id="financial-transaction-desc" maxlength="500"/>
        <ValidationMessage For="@(() => Req.Description)"/>
    </div>

    <div class="mb-3">
        <label for="financial-transaction-createdAt" class="form-label">Дата и время *</label>
        <InputDate Type="InputDateType.DateTimeLocal"
                   @bind-Value="@Req.CreatedAt"
                   id="financial-transaction-createdAt"
                   class="form-control"/>
        <ValidationMessage For="@(() => Req.CreatedAt)"/>
    </div>
    
    <hr class="border-2 my-4">
    
    <div class="mb-3">
        @foreach (var itemReq in Req.Items)
        {
            <_TransactionItemFormFields @key="@Guid.NewGuid()" 
                                        Req="@itemReq"
                                        TransactionCategories="@TransactionCategories"
                                        OnStateChanged="@HandleStateHasChanged"
                                        Currency="@Account.FinancialCurrency"
                                        CanDelete="@(Req.Items.Count > 1)"
                                        OnDelete="@HandleDeleteItem"/>
        }
    </div>
    <div class="row align-items-center mb-3">
        <div class="col">
            <button type="button" class="btn btn-outline-dark btn-sm" @onclick="@HandleAddItem">
                    Добавить ещё <i class="las la-plus ms-1 la-lg"></i>
                </button>
        </div>
        <div class="col text-end h6">
            <div class="text-secondary">
                <span class="border-secondary border-4 pt-2 px-4" style="--bs-border-opacity: .4;">Сумма: @Total()</span>
            </div>
        </div>
    </div>
    
    <div class="mt-4">
        <button class="btn btn-primary">
            <i class="las la-lg me-1 @(EditingTransaction != null ? "la-edit" : "la-plus-circle")"></i>
            @(EditingTransaction != null ? Resources.Action.SaveChanges : $"{Resources.Action.Add} перевод между счетами")
        </button>
    </div>
</EditForm>

@if (EditingTransaction != null)
{
    <hr>
    <div class="text-end">
        <button type="button" class="btn btn-link text-danger" @onclick="@HandleDelete">
            <i class="las la-trash la-lg"></i>
            @Resources.Action.Delete
        </button>
    </div>
}

@code {
    [Parameter]
    public FinancialAccount Account { get; set; } = null!;
    
    [Parameter]
    public EventCallback OnFormSubmit { get; set; }

    [Parameter]
    public List<FinancialTransactionCategory> TransactionCategories { get; set; } = new();

    [Parameter]
    public Guid? TransactionId { get; set; }
    
    [Parameter]
    public List<FinancialAccountCategory> AccountCategories { get; set; } = new();
    
    [Parameter]
    public FinancialAccountSummaryBalances FinancialAccountSummaryBalances { get; set; } = null!;

    private AccountFinancialTransactionRequest Req { get; set; } = new();
    private AccountFinancialTransaction? EditingTransaction { get; set; }
    private Dictionary<Guid, string> DisabledReasonAccountIds { get; set; } = new();

    private List<(string Name, bool Val, string Icon, string Color)> ArithmeticTypes { get; set; } = new()
    {
        ("Пополнение", true, "las la-plus-circle", "success"),
        ("Перевод", false, "las la-minus-circle", "danger"),
    };
    
    protected override void OnInitialized()
    {
        if (TransactionId.HasValue)
        {
            EditingTransaction = Db
                .AccountFinancialTransactions
                .Include(x => x.Items)
                .FirstOrDefault(x => x.Id.Equals(TransactionId.Value));
        }

        if (EditingTransaction != null)
        {
            EditingTransaction.MapTo(Req);
            Req.Items = EditingTransaction.Items.Select(x =>
            {
                var itemReq = new FinancialTransactionItemRequest();
                x.MapTo(itemReq);
                itemReq.Id = x.Id;
                return itemReq;
            }).ToList();
        }
        else
        {
            Req.Items = new() {new()};
            Req.AccountId = Account.Id;
        }

        DisabledReasonAccountIds = Db.FinancialAccounts
            .Where(x => !x.FinancialCurrencyId.Equals(Account.FinancialCurrencyId))
            .Select(x => x.Id)
            .ToDictionary(x => x, _ => "Другая валюта");
        
        DisabledReasonAccountIds.Add(Account.Id, "Текущий счёт");
    }
    
    private void HandleStateHasChanged(FinancialTransactionItemRequest item)
    {
        int index = Req.Items.IndexOf(item);
        if (index < 0) return;
        Req.Items[index] = item;
        StateHasChanged();
    }

    private void HandleAddItem()
    {
        Req.Items.Add(new());
        StateHasChanged();
    }

    private void HandleDeleteItem(FinancialTransactionItemRequest item)
    {
        if (Req.Items.Count > 1) Req.Items.Remove(item);
    }

    private string Total()
    {
        decimal sum = 0;
        Req.Items.ForEach(x => sum += x.Quantity * x.Amount);
        return $"{sum:N2} {Account.FinancialCurrency.Symbol}";
    }

    private Task HandleSubmit()
    {
        if (EditingTransaction != null)
        {
            FinManager.UpdateTransaction(EditingTransaction, Req);
        }
        else
        {
            FinManager.CreateTransaction(Req);
        }

        Db.SaveChanges();

        return OnFormSubmit.InvokeAsync();
    }

    private async Task HandleDelete()
    {
        if (EditingTransaction == null) return;
        var isConfirmed = await JsRuntime.InvokeAsync<bool>("confirm", Resources.Action.Delete_Confirmation);
        if (!isConfirmed) return;

        FinManager.DeleteTransaction(EditingTransaction);
        await Db.SaveChangesAsync();
        await OnFormSubmit.InvokeAsync();
    }
}