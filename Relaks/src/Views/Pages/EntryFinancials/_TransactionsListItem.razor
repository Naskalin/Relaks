@using Relaks.Interfaces
@using Relaks.Models.FinancialModels
@using Relaks.Utils.Extensions

<tr class="group-show">
    @if (FirstRow != null)
    {
        @FirstRow.Td(Transaction.Id)
    }
    <td>@Transaction.CreatedAt.ToString("dd.MM.yyyy HH:mm")</td>
    <td style="white-space: nowrap" class="fw-semibold @(Transaction.IsPlus ? "text-success" : "text-danger")">
        @(Transaction.IsPlus ? "+" : "-")@Transaction.Total.ToString("N2") @Transaction.Account.FinancialCurrency.Symbol
    </td>
    <td style="white-space: nowrap">
        @Transaction.FromBalance().ToString("N2") @Transaction.Account.FinancialCurrency.Symbol
        <i class="las la-long-arrow-alt-right la-lg text-secondary"></i>
        @Transaction.Balance.ToString("N2") @Transaction.Account.FinancialCurrency.Symbol
    </td>
    <td>
        <small>@(string.Join(", ", Categories).Truncate(40))</small>
        @if (!string.IsNullOrEmpty(Transaction.Description))
        {
            <Popover Content="@Transaction.Description">
                <i class="las la-comment text-success ms-1" style="font-size: 1.2rem;"></i>
            </Popover>
        }
    </td>
    <td>
        
        <EntryInlineItem EntryId="@EntryId">
            <AfterBody>
                @if (Transaction is AccountFinancialTransaction accountTransaction)
                {
                    <span class="text-success">
                        @accountTransaction.SecondAccount.Category.Title / @accountTransaction.SecondAccount.TitleWithCurrency()
                    </span>
                }
            </AfterBody>
        </EntryInlineItem>
    </td>
</tr>

@code {
    [Parameter]
    public IGuidRowView? FirstRow { get; set; }

    [Parameter]
    public BaseFinancialTransaction Transaction { get; set; } = null!;
    
    [Parameter]
    public Guid FinancialAccountId { get; set; }
    
    private Guid EntryId { get; set; }
    private List<string> Categories { get; set; } = new();

    protected override void OnParametersSet()
    {
        Categories = Transaction.Items.Select(x => x.Category.Title).Distinct().ToList();
        if (Transaction is EntryFinancialTransaction entryTransaction)
        {
            EntryId = entryTransaction.EntryId;
            return;
        }
     
        var accountTransaction = (AccountFinancialTransaction) Transaction;
        var secondAccount = accountTransaction.SecondAccount;
        EntryId = secondAccount.Category.EntryId;
    }
    
}