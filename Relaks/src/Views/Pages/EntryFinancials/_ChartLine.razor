@using Relaks.Database
@using System.Text.Json
@using Relaks.Views.Pages.EntryFinancials.ViewModels

@inject IJSRuntime Js;
@inject AppDbContext Db;

@* <Dump Data="@AccountIds"/> *@
@* <Dump Data="@Store.Calculated.Dates"/> *@
@* <Dump Data="@Store.Calculate().Accounts.First()"/> *@

@if (!Store.AccountId.HasValue)
{
    <p>Выберите один или несколько счетов для отображения статистики</p>
}
<div id="@(_id + 1)"></div><div id="@(_id + 2)"></div>

@code {
    [CascadingParameter]
    public FinancialsStore Store { get; set; } = null!;

    private string _id = "a" + Guid.NewGuid();

    // private bool IsAfterRenderCompleted { get; set; } = false;
    // protected override void OnInitialized()
    // {
    //     Store = new(Db, AccountIds);
    //     Store.Initialize();
    // }


    // protected override Task OnParametersSetAsync()
    // {
    //     // Store = new(Db, AccountIds);
    //     // Store.Initialize();
    //     // if (IsAfterRenderCompleted)
    //     // return IsAfterRenderCompleted ? InitializeChart() : base.OnParametersSetAsync();
    // }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (Store.IsNeedReloadCharts)
        {
            Store.IsNeedReloadCharts = false;
            return InitializeChart();
        }

        return Task.CompletedTask;
    }

    // private Task OnFilterChange()
    // {
    //     return InitializeChart();
    // }

    private Task InitializeChart()
    {
        if (Store.Account == null) return Task.CompletedTask;

        var lineChartData = new Dictionary<string, List<decimal>>();
        var barChartData = new Dictionary<string, List<decimal>>();
        var barChartGroups = new List<List<string>>();
        
        var averageBalanceTitle = "Средний баланс";
        var totalOutlayTitle = "Списания";
        var totalIncomeTitle = "Пополнения";
        var balanceChanges = "Изменения баланса";

        // if (Store.Calculated.Accounts.Count > 1)
        // {
        //     averageBalanceTitle += $" ({account.Title})";
        //     totalOutlayTitle += $" ({account.Title})";
        //     totalIncomeTitle += $" ({account.Title})";
        //     totalTitle += $" ({account.Title})";
        // }

        lineChartData[averageBalanceTitle] = new List<decimal>();
        barChartData[balanceChanges] = new List<decimal>();
        barChartData[totalOutlayTitle] = new List<decimal>();
        barChartData[totalIncomeTitle] = new List<decimal>();

        barChartGroups.Add([totalOutlayTitle, totalIncomeTitle]);

        foreach (var item in Store.AccountStatistic.Items)
        {
            lineChartData[averageBalanceTitle].Add(item.AverageBalance);
            barChartData[balanceChanges].Add(item.BalanceChanges);
            barChartData[totalOutlayTitle].Add(item.TotalOutlay);
            barChartData[totalIncomeTitle].Add(item.TotalIncome);
        }
        
        // foreach (var account in Store.AccountStatistic.)
        // {
        //
        // }

        var datesFormat = Store.FilterReq.IsTypeByDays() ? "%d.%m.%Y" : "%m.%Y";

        var result = new
        {
            HtmlElementIds = new []{_id + 1, _id + 2},
            Currency = Store.AccountStatistic.CurrencyId,
            Store.AccountStatistic.Dates,
            DatesFormat = datesFormat,
            Data = new
            {
                First = lineChartData,
                Second = barChartData,
                SecondBarGroups = barChartGroups,
            }
        };

        return Task.FromResult(Js.InvokeVoidAsync("InitializeFinancialChart", JsonSerializer.Serialize(result)));
    }
}