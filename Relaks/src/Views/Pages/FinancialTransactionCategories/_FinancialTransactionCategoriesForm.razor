@using Relaks.Managers
@using Relaks.Models.FinancialModels
@using Relaks.Database
@using Relaks.Database.Repositories
@using Relaks.Mappers
@using Relaks.Views.Pages.FinancialTransactionCategories.ViewModels

@inject AppDbContext Db;

<EditForm Model="@Req" OnValidSubmit="@HandleSubmit">
    <FluentValidationValidator DisableAssemblyScanning="@true"/>
    <ValidationSummary/>

    <div class="mb-3">
        <label for="financialCategoryTitle" class="form-label">Название</label>
        <InputText id="financialCategoryTitle" @bind-Value="@Req.Title" required="required" class="form-control"/>
        <ValidationMessage For="@(() => Req.Title)"/>
    </div>

    <div class="mb-3">
        <label class="form-label">Родитель</label>
        <TreeSelect TNode="FinancialTransactionCategory"
                    Nodes="@TransactionCategories"
                    NodeId="@Req.ParentId"
                    OnClickNode="@(guid => Req.ParentId = guid)"/>
        <ValidationMessage For="@(() => Req.ParentId)"/>
    </div>

    <div class="mb-3">
        <button class="btn btn-primary">
            <i class="las la-lg me-1 @(IsEdit ? "la-edit" : "la-plus-circle")"></i>
            @(IsEdit ? Resources.Action.SaveChanges : $"{Resources.Action.Add} категорию")
        </button>
    </div>
</EditForm>

@code {

    [Parameter]
    public Guid? CategoryId { get; set; } 
    
    [Parameter]
    public EventCallback OnFormSubmit { get; set; }
    
    private List<FinancialTransactionCategory> TransactionCategories { get; set; } = new();
    private FinancialTransactionCategoryRequest Req { get; set; } = new();
    private bool IsEdit { get; set; }
    private FinancialTransactionCategory? Category { get; set; }

    protected override void OnInitialized()
    {
        TransactionCategories = Db.FinancialTransactionCategories.ToBaseTree();
    }
    
    protected override void OnParametersSet()
    {
        Req = new();
        IsEdit = CategoryId.HasValue;
        if (IsEdit)
        {
            Category = Db.FinancialTransactionCategories.First(x => x.Id.Equals(CategoryId));
            Category.MapTo(Req);
            Req.Id = Category.Id;
        }
    }

    private Task HandleSubmit()
    {
        if (IsEdit && Category != null)
        {
            Req.MapTo(Category);
            Db.SaveChanges();
            TreeManager.SyncTreePaths(Db.FinancialTransactionCategories, Category.Id);
        }
        else
        {
            var category = new FinancialTransactionCategory();
            Req.MapTo(category);
            var parent = Db.FinancialTransactionCategories.FirstOrDefault(x => x.Id.Equals(Req.ParentId));
            TreeManager.UpdateTreePath(category, parent);
            Db.FinancialTransactionCategories.Add(category);
        }

        Db.SaveChanges();
        return OnFormSubmit.InvokeAsync();
    }


}