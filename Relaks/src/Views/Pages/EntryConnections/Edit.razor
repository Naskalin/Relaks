@using Relaks.Models.Store
@using Relaks.Database
@using Relaks.Mappers
@using Relaks.Models

@inject AppDbContext Db;
@inject IJSRuntime JsRuntime;

<div class="row">
    <div class="col-8">
        <MyTitle ShowBeforeTitle="@true">
            <BeforeTitle>
                <button @onclick="@HandleBack" class="btn btn-outline-secondary">
                    <i class="las la-arrow-left la-lg me-1"></i> @Resources.Action.Return
                </button>
            </BeforeTitle>
            <ChildContent>Изменение взаимоотношения</ChildContent>
        </MyTitle>
        
        <EditForm Model="@Req" OnSubmit="@OnSubmit" class="mt-4">
            <FluentValidationValidator @ref="Validator" DisableAssemblyScanning="@true"/>
            <ValidationSummary/>
            
            <FormFields Req="@Req" CurrentEntryId="@Store.EntryId"/>
            
            <div class="mb-3">
                <button class="btn btn-primary">
                    <i class="las la-lg me-1 la-save"></i>
                    @Resources.Action.SaveChanges
                </button>
            </div>
        </EditForm>

        <div class="text-end">
            <button type="button" class="btn btn-link text-danger" @onclick="@OnDelete">
                <i class="las la-trash la-lg"></i>
                @Resources.Action.Delete
            </button>
        </div>
    </div>
</div>

@code {
    private EntryRelationRequest Req { get; set; } = null!;
    private FluentValidationValidator Validator { get; set; } = null!;
    
    [CascadingParameter]
    public EntryConnectionStore Store { get; set; } = null!;
    
    [Parameter]
    public EventCallback OnStateChanged { get; set; }

    protected override void OnParametersSet()
    {
        ArgumentNullException.ThrowIfNull(Store.EntryRelationEdit);
        Req = new();
        Store.EntryRelationEdit.MapTo(Req);
    }

    private void HandleBack()
    {
        Store.State = EntryConnectionStore.StateEnum.List;
        OnStateChanged.InvokeAsync();
    }

    private void OnSubmit()
    {
        ArgumentNullException.ThrowIfNull(Store.EntryRelationEdit);
        if (!Validator.Validate()) return;
        var entryRelation = Store.EntryRelationEdit;
        entryRelation.UpdatedAt = DateTime.Now;
        Req.MapTo(entryRelation);
        Db.SaveChanges();
        Store.FindEntryRelations();
        HandleBack();
    }
    
    private async Task OnDelete()
    {
        var isConfirmed = await JsRuntime.InvokeAsync<bool>("confirm", Resources.Action.Delete_Confirmation);
        if (!isConfirmed || Store.EntryRelationEdit == null) return;

        Db.EntryRelations.Remove(Store.EntryRelationEdit);
        await Db.SaveChangesAsync();
        
        Store.FindEntryRelations();
        
        HandleBack();
    }
}