@using Relaks.Models.Store

<ul class="ul-info my-4">
    <li>Взаимоотношение двух объединений</li>
    <li>Оцените как одно объединение относится к другому</li>
    <li>Опишите их взаимоотношения</li>
</ul>

<div class="row gap-4 items-center">
    <div class="col @(IsReverse ? "order-2")">
        <div class="mb-3">
            @if (Req.FirstId.Equals(CurrentEntryId))
            {
                <EntryInlineItem EntryId="@CurrentEntryId"/>
            }
            else
            {
                <SelectEntry EntryIds="@GetEntryIds(true)" ExcludedEntryIds="@(new List<Guid>() {CurrentEntryId})" EntryIdsChanged="@(entryIds => HandleEntryIdsChanged(true, entryIds))"/>
                <ValidationMessage For="@(() => Req.FirstId)"/>   
            }
        </div>
    </div>
    <div class="col @(IsReverse ? "order-1")">
        <div class="mb-3">
            @if (Req.SecondId.Equals(CurrentEntryId))
            {
                <EntryInlineItem EntryId="@CurrentEntryId"/>
            }
            else
            {
                <SelectEntry EntryIds="@GetEntryIds(false)" ExcludedEntryIds="@(new List<Guid>() {CurrentEntryId})" EntryIdsChanged="@(entryIds => HandleEntryIdsChanged(false, entryIds))"/>
                <ValidationMessage For="@(() => Req.SecondId)"/>   
            }
        </div>
    </div>
</div>

@if (Req.FirstId.HasValue && Req.SecondId.HasValue)
{
    <div class="row gap-4 items-center">
        <div class="col @(IsReverse ? "order-2")">
            <div class="mb-3">
                <RatingField @bind-Value="@Req.FirstRating"/>
                <div class="form-text">Оценка этого объединения от противоположного</div>
                <ValidationMessage For="@(() => Req.FirstRating)"/>
            </div>
        </div>
        <div class="col @(IsReverse ? "order-1")">
            <div class="mb-3">
                <RatingField @bind-Value="@Req.SecondRating"/>
                <div class="form-text">Оценка этого объединения от противоположного</div>
                <ValidationMessage For="@(() => Req.SecondRating)"/>
            </div>
        </div>
    </div>
    
    <div class="mb-3">
        @* <label for="EntryRelationDescription" class="form-label">Описание взаимоотношений</label> *@
        <MyTextarea @bind-Value="@Req.Description"
                    maxlength="3000"
                    placeholder="Описание взаимоотношений"/>

        <ValidationMessage For="@(() => Req.Description)"/>
    </div>
}

@code {

    [Parameter]
    public Guid CurrentEntryId { get; set; } = default!;
    
    [Parameter]
    public EntryRelationRequest Req { get; set; } = null!;
    
    private bool IsReverse { get; set; }

    protected override void OnParametersSet()
    {
        IsReverse = Req.SecondId.Equals(CurrentEntryId);
    }

    private List<Guid> GetEntryIds(bool isFirst)
    {
        var entryIds = new List<Guid>();
        if (isFirst)
        {
            if (Req.FirstId.HasValue) entryIds.Add(Req.FirstId.Value);
        }
        else
        {
            if (Req.SecondId.HasValue) entryIds.Add(Req.SecondId.Value);
        }

        return entryIds;
    }

    private async Task HandleEntryIdsChanged(bool isFirst, List<Guid> entryIds)
    {
        Guid? entryId = entryIds.Any() ? entryIds.First() : null;

        if (isFirst)
        {
            Req.FirstId = entryId;
        }
        else
        {
            Req.SecondId = entryId;
        }
    }

}