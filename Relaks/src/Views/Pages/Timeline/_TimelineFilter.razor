@using System.Globalization
@using System.Linq.Expressions
@using Relaks.Models

<p class="text-muted">Всего найдено событий: @Store.Items.Count</p>

<div class="mb-3">
    <label for="" class="form-label">Выберите месяц</label>

    <div class="timeline__months">
        @for (var i = 1; i <= 12; i++)
        {
            {
                var month = i;
                <div class="timeline__months-el">
                    <button type="button"
                            class="btn timeline__months-btn @(Store.Date.Month.Equals(month) ? "btn-secondary" : "btn-outline-secondary")"
                            @onclick="@(() => OnChangeMonth(month))">
                        @DateTimeFormatInfo.CurrentInfo.GetMonthName(i)
                    </button>
                </div>
            }
        }
    </div>
</div>

<div class="mb-3">
    <label for="" class="form-label">Только эти типы дат</label>

    @foreach (var discriminator in DataHelper.EntryDiscriminators)
    {
        foreach(var propName in new List<string>{nameof(BaseEntry.StartAt), nameof(BaseEntry.EndAt)})
        {
            var id = Guid.NewGuid();
            <div class="form-check form-switch mb-2">
                <input class="form-check-input" type="checkbox" id="@id" @onchange="@(e => OnSwitchEntryDateType(e, discriminator, propName))">
                <label class="form-check-label" for="@id">
                    @Resources.Entity.ResourceManager.GetString($"{discriminator}_{propName}")
                </label>
            </div>   
        }
    }
</div>

@code {

    [CascadingParameter]
    [Parameter]
    public TimelineIndex Store { get; set; } = null!;

    private void OnChangeMonth(int month)
    {
        Store.Date = new DateTime(Store.Date.Year, month, Store.Date.Day);
        Store.FindItems();
    }

    private void OnSwitchEntryDateType(ChangeEventArgs e, string discriminator, string propName)
    {
        var isEnabled = e.Value != null && (bool) e.Value;
        Store.Req.DiscriminatorProperties.TryGetValue(discriminator, out var properties);
        
        if (isEnabled)
        {
            if (properties == null)
            {
                Store.Req.DiscriminatorProperties[discriminator] = new List<string>() {propName};
            }
            else
            {
                Store.Req.DiscriminatorProperties[discriminator].Add(propName);
            }
        }
        else if (properties != null)
        {
            Store.Req.DiscriminatorProperties[discriminator].Remove(propName);
            if (!Store.Req.DiscriminatorProperties[discriminator].Any())
            {
                Store.Req.DiscriminatorProperties.Remove(discriminator);
            }
        }

        Store.FindItems();
    }
}