@using System.Globalization
@using System.Linq.Expressions
@using Relaks.Models

<div class="mb-4">
    <SelectEntry OnSelected="@OnSelectedEntries"/>
</div>

<div class="mb-4">
    <div class="d-flex align-items-center gap-3 mb-3">
        <label for="" class="form-label mb-0">Период</label>
        <button type="button" class="btn btn-sm @(Store.Req.IsFullYear ? "btn-secondary" : "btn-outline-secondary")" @onclick="@SwitchFullYear">
            Весь год
            <i class="las la-calendar la-lg ms-1"></i>
        </button>
    </div>
    <div class="timeline__months">
        @for (var i = 1; i <= 12; i++)
        {
            {
                var month = i;
                <div class="timeline__months-el">
                    <button type="button"
                            class="btn timeline__months-btn @(!Store.Req.IsFullYear && Store.Date.Month.Equals(month) ? "btn-secondary" : "btn-outline-secondary")"
                            @onclick="@(() => OnChangeMonth(month))">
                        @DateTimeFormatInfo.CurrentInfo.GetMonthName(i)
                    </button>
                </div>
            }
        }
    </div>
</div>

<div class="mb-4">
    <label for="" class="form-label">Только эти типы дат</label>
    <div>
        @foreach (var discriminator in DataHelper.EntryDiscriminators)
        {
            foreach(var entryDateName in _entryDateNames)
            {
                var id = Guid.NewGuid();
                <div class="form-check form-switch mb-2">
                    <input class="form-check-input" type="checkbox" id="@id" @onchange="@(e => OnSwitchEntryDateType(e, discriminator, entryDateName))">
                    <label class="form-check-label" for="@id">
                        @Resources.Entity.ResourceManager.GetString($"{discriminator}_{entryDateName}")
                    </label>
                </div>   
            }
        }
    </div>

    @{ var eiDatesId = Guid.NewGuid();}
    <div class="form-check form-switch mb-2">
        <input class="form-check-input" type="checkbox" id="@eiDatesId" @onchange="@(e => OnSwitchEntryDateType(e, nameof(EiDate), nameof(EiDate.Date)))">
        <label class="form-check-label" for="@eiDatesId">
            Все другие даты
        </label>
    </div>   
</div>

@code {

    [CascadingParameter]
    [Parameter]
    public TimelineIndex Store { get; set; } = null!;

    private void OnChangeMonth(int month)
    {
        Store.Req.IsFullYear = false;
        Store.Date = new DateTime(Store.Date.Year, month, Store.Date.Day);
        Store.FindItems();
    }

    private void OnSwitchEntryDateType(ChangeEventArgs e, string discriminator, string propName)
    {
        var isEnabled = e.Value != null && (bool) e.Value;
        Store.Req.DiscriminatorProperties.TryGetValue(discriminator, out var properties);
        
        if (isEnabled)
        {
            if (properties == null)
            {
                Store.Req.DiscriminatorProperties[discriminator] = new List<string>() {propName};
            }
            else
            {
                Store.Req.DiscriminatorProperties[discriminator].Add(propName);
            }
        }
        else if (properties != null)
        {
            Store.Req.DiscriminatorProperties[discriminator].Remove(propName);
            if (!Store.Req.DiscriminatorProperties[discriminator].Any())
            {
                Store.Req.DiscriminatorProperties.Remove(discriminator);
            }
        }

        Store.FindItems();
    }

    private void OnSelectedEntries(List<Guid> entryIds)
    {
        Store.Req.EntryIds = entryIds;
        Store.FindItems();
    }

    private static string[] _entryDateNames = {nameof(BaseEntry.StartAt), nameof(BaseEntry.EndAt)};

    private void SwitchFullYear()
    {
        Store.Req.IsFullYear = !Store.Req.IsFullYear;
        Store.FindItems();
    }

}