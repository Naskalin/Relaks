@using Relaks.Views.Pages.Financials.ViewModels

<div class="d-flex align-items-center mb-3 gap-2">
    @if (Store.AccountSelectOptions().Any() && Store.TransactionCategories.Any())
    {
        <div class="col-auto">
            <button type="button" 
                    class="btn btn-outline-primary btn-sm"
                    disabled="@(!Store.AccountId.HasValue)"
                    title="@(!Store.AccountId.HasValue ? "Выберите счёт" : "")"
                    @onclick="@HandleAddTransaction">
                Транзакция
                <i class="las la-plus-circle la-lg ms-1"></i>
            </button>
        </div>
    }
    <div class="col-auto">
        <button type="button" class="btn btn-outline-primary btn-sm" @onclick="@HandleAddCategory">
            Категория транзакции
            <i class="las la-plus-circle la-lg ms-1"></i>
        </button>
    </div>
    <div class="col">
        <span class="h5 ms-3">???</span>
    </div>
</div>

<_TransactionsList OnStateChanged="@(() => OnStateChanged.InvokeAsync())"/>
@* @if (!Store.Transactions.Items.Any()) *@
@* { *@
@*     <p>Транзакций не найдено</p>    *@
@* } *@
@* else *@
@* { *@
@*     <div>asd</div>    *@
@* } *@
@* <p>Валюты</p> *@
@* <p>Транзакции</p> *@
@* <p>Категории транзакций</p> *@

@code {

    [CascadingParameter]
    public FinancialsStore Store { get; set; } = null!;

    [Parameter]
    public EventCallback OnStateChanged { get; set; }

    private Task HandleAddCategory()
    {
        Store.BodyState = FinancialsStore.BodyEnum.AddTransactionCategory;
        return OnStateChanged.InvokeAsync();
    }

    private Task HandleAddTransaction()
    {
        Store.BodyState = FinancialsStore.BodyEnum.AddTransaction;
        return OnStateChanged.InvokeAsync();
    }

}