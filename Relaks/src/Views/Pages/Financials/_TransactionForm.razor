@using Relaks.Views.Pages.Financials.ViewModels
@using Relaks.Database
@using Relaks.Mappers
@using Relaks.Models.FinancialModels

@inject AppDbContext Db;

<div class="row align-items-center mb-3">
    <div class="col-auto">
        <button type="button" class="btn btn-circle btn-outline-secondary" @onclick="@HandleReturn" title="Вернуться">
            <i class="las la-arrow-left la-lg"></i>
        </button>
    </div>
    <div class="col">
        <h5 class="mb-0">@(IsEdit ? "Изменить транзакцию" : "Добавить транзакцию")</h5>
    </div>
</div>

<EditForm Model="@Req" OnValidSubmit="@HandleSubmit">
    <FluentValidationValidator DisableAssemblyScanning="@true"/>
    <ValidationSummary/>
    @* <div class="mb-3"> *@
    @*     <label for="financialCategoryTitle" class="form-label">Название</label> *@
    @*     <InputText id="financialCategoryTitle" @bind-Value="@Req.Title" required="required" class="form-control"/> *@
    @*     <ValidationMessage For="@(() => Req.Title)"/> *@
    @* </div> *@

    <div class="mb-3">
        <button class="btn btn-primary">
            <i class="las la-lg me-1 @(IsEdit ? "la-edit" : "la-plus-circle")"></i>
            @(IsEdit ? Resources.Action.SaveChanges : Resources.Action.Add)
        </button>
    </div>
</EditForm>

@code {

    [CascadingParameter]
    public FinancialsStore Store { get; set; } = null!;
    
    [Parameter]
    public EventCallback OnStateChanged { get; set; }
    private FinancialTransaction? EditingTransaction { get; set; }

    protected override void OnParametersSet()
    {
        IsEdit = Store is {BodyState: FinancialsStore.BodyEnum.EditTransaction,BodyEditTransactionId: not null};
        if (!IsEdit) return;
        EditingTransaction = Db.FinancialTransactions.First(x => x.Id.Equals(Store.BodyEditTransactionId));
        // Transaction.MapTo(Req);
    }

    private bool IsEdit { get; set; }

    private FinancialTransactionRequest Req { get; set; } = new();

    private async Task HandleReturn()
    {
        Store.BodyState = FinancialsStore.BodyEnum.Default;
        await OnStateChanged.InvokeAsync();
    }

    private Task HandleSubmit()
    {
        if (IsEdit && EditingTransaction != null)
        {
            // Req.MapTo(EditingTransaction);
        }
        else
        {
            var transaction = new FinancialTransaction();
            // Req.MapTo(transaction);
            Db.FinancialTransactions.Add(transaction);
        }
        
        Db.SaveChanges();

        return HandleReturn();
    }
}