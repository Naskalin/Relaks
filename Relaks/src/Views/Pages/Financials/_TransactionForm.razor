@using Relaks.Views.Pages.Financials.ViewModels
@using Relaks.Database
@using Relaks.Mappers
@using Relaks.Models.FinancialModels
@using Console = System.Console
@using Microsoft.EntityFrameworkCore
@using Relaks.Managers

@inject AppDbContext Db;
@inject FinancialManager FinManager;

<div class="row align-items-center mb-3">
    <div class="col-auto">
        <button type="button" class="btn btn-circle btn-outline-secondary" @onclick="@HandleReturn" title="Вернуться">
            <i class="las la-arrow-left la-lg"></i>
        </button>
    </div>
    <div class="col">
        <h5 class="mb-0">@(IsEdit ? "Изменить транзакцию" : "Добавить транзакцию")</h5>
    </div>
</div>

<Dump Data="@Req"/>
<EditForm Model="@Req" OnValidSubmit="@HandleSubmit">
    <FluentValidationValidator DisableAssemblyScanning="@true"/>
    <ValidationSummary/>

    <div class="row">
        <div class="col-4">
            <Divider Text="Описание транзакции" class="mb-4"/>
            <div class="mb-3">
                <label for="financial-transaction-accountId" class="form-label">Счёт *</label>
                <Select id="financial-transaction-accountId"
                        @bind-Value="@Req.AccountId"
                        Items="@Store.AccountSelectOptions()"
                        OnSelectedItemChanged="@HandleAccountIdChanged"
                        ShowSearch="true"></Select>
                <ValidationMessage For="@(() => Req.AccountId)"/>
            </div>

            <div class="mb-3">
                <label class="form-label">Тип *</label>
                <div class="btn-group w-100">
                    @foreach (var t in TransactionTypes)
                    {
                        <button type="button"
                                @onclick="@(() => Req.IsPlus = t.Val)"
                                class="btn @(Req.IsPlus.HasValue && Req.IsPlus.Value == t.Val ? $"btn-{t.Color}" : "btn-outline-secondary")">
                            <i class="@t.Icon la-lg me-2"></i>
                            @t.Name
                        </button>
                    }
                </div>
                <ValidationMessage For="@(() => Req.IsPlus)"/>
            </div>

            <div class="mb-3">
                <SelectEntry EntryIds="@EntryIds" EntryIdsChanged="@HandleEntryChanged" IsMultiple="@false" Label="Объединение *"/>
                <ValidationMessage For="@(() => Req.EntryId)"/>
            </div>

            <div class="mb-3">
                <label for="financial-transaction-createdAt" class="form-label">Дата и время *</label>
                <InputDate Type="InputDateType.DateTimeLocal"
                           @bind-Value="@Req.CreatedAt"
                           id="financial-transaction-createdAt"
                           class="form-control"/>
                <ValidationMessage For="@(() => Req.CreatedAt)"/>
            </div>

            <div class="mb-3">
                <label for="financial-transaction-desc" class="form-label">Описание</label>
                <MyTextarea @bind-Value="@Req.Description" id="financial-transaction-desc" maxlength="500"/>
                <ValidationMessage For="@(() => Req.Description)"/>
            </div>

            <div class="mb-3">
                <button class="btn btn-primary">
                    <i class="las la-lg me-1 @(IsEdit ? "la-edit" : "la-plus-circle")"></i>
                    @(IsEdit ? Resources.Action.SaveChanges : Resources.Action.Add) транзакцию
                </button>
            </div>
        </div>
        <div class="col-8 ps-4">
            <Divider Text="Состав транзакции" class="mb-4"/>
            <div class="mb-3">
                @foreach (var itemReq in Req.Items)
                            {
                                <_TransactionItemFormFields Req="@itemReq" 
                                                            Currency="@Currency"
                                                            OnStateChanged="@(StateHasChanged)"
                                                            CanDelete="@(Req.Items.Count > 1)"
                                                            OnDelete="@HandleDeleteItem"
                                                            />
                            }
            </div>
            <button type="button" class="btn btn-outline-dark btn-sm" @onclick="@HandleAddItem">
                Добавить ещё <i class="las la-plus ms-1 la-lg"></i>
            </button>
            
            <div class="h3 mt-5 text-secondary">
                <span class="border-top border-secondary border-4 pt-2 px-4" style="--bs-border-opacity: .4;">Итого: @Total() @(Currency?.Symbol)</span>
            </div>
        </div>
    </div>
</EditForm>

@code {

    [CascadingParameter]
    public FinancialsStore Store { get; set; } = null!;

    [Parameter]
    public EventCallback OnStateChanged { get; set; }
    
    private FinancialCurrency? Currency { get; set; }
    private FinancialTransaction? EditingTransaction { get; set; }
    private List<Guid> EntryIds { get; set; } = new();

    private List<(string Name, bool Val, string Icon, string Color)> TransactionTypes { get; set; } = new()
    {
        ("Пополнение", true, "las la-plus-circle", "success"),
        ("Списание", false, "las la-minus-circle", "danger"),
    };

    protected override void OnParametersSet()
    {
        IsEdit = Store is {BodyState: FinancialsStore.BodyEnum.EditTransaction,BodyEditTransactionId: not null};
        if (IsEdit)
        {
            EditingTransaction = Db
                .FinancialTransactions
                .Include(x => x.Items)
                .First(x => x.Id.Equals(Store.BodyEditTransactionId));
            EntryIds = new List<Guid>() {EditingTransaction.EntryId};
            
            EditingTransaction.MapTo(Req);
            Req.Items = EditingTransaction.Items.Select(x =>
            {
                var itemReq = new FinancialTransactionItemRequest();
                x.MapTo(itemReq);
                return itemReq;
            }).ToList();
        }
        else
        {
            Req.Items = new() {new()};
        }
    }

    private void HandleAddItem()
    {
        Req.Items.Add(new());
        StateHasChanged();
    }

    private Task HandleAccountIdChanged(SelectedItem item)
    {
        var currencyId = Store.Accounts.Where(x => x.Id.Equals(Req.AccountId)).Select(x => x.FinancialCurrencyId).Single();
        Currency = Store.Currencies.Single(x => x.Id.Equals(currencyId));
        return Task.CompletedTask;
    }

    private bool IsEdit { get; set; }

    private FinancialTransactionRequest Req { get; set; } = new();

    private void HandleDeleteItem(FinancialTransactionItemRequest item)
    {
        if (Req.Items.Count > 1) Req.Items.Remove(item);
    }

    private void HandleEntryChanged(List<Guid> entryIds)
    {
        EntryIds = entryIds;
        Req.EntryId = entryIds.FirstOrDefault();
    }

    private async Task HandleReturn()
    {
        Store.BodyState = FinancialsStore.BodyEnum.Default;
        await OnStateChanged.InvokeAsync();
    }

    private decimal Total() => Req.Items.Sum(x => x.Amount);

    private Task HandleSubmit()
    {
        if (IsEdit && EditingTransaction != null)
        {
            //edit
            Req.MapTo(EditingTransaction);
            FinManager.DeleteItemsForTransaction(EditingTransaction, Req);
            FinManager.UpdateItemsForTransaction(EditingTransaction, Req);
            FinManager.CreateItemsForTransaction(EditingTransaction, Req);
        }
        else
        {
            //new
            var transaction = new FinancialTransaction() {};
            Req.MapTo(transaction);
            FinManager.CreateItemsForTransaction(transaction, Req);
            Db.FinancialTransactions.Add(transaction);
        }
        
        Db.SaveChanges();

        return HandleReturn();
    }

}