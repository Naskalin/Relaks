@page "/financials"
@page "/financials/{accountId:guid}"

@using Relaks.Views.Pages.Financials.ViewModels
@using Relaks.Database

@inject AppDbContext Db;
@inject NavigationManager Navigation;
@implements IDisposable;

<PageTemplate>
    <MyTitle>Финансы</MyTitle>

    <CascadingValue Value="@Store">
        <div class="row">
            <div class="col-3">
                <div>
                    @switch (Store.SidebarState)
                    {
                        case FinancialsStore.SidebarEnum.EditAccountCategory:
                        case FinancialsStore.SidebarEnum.AddAccountCategory:
                            <_AccountCategoryForm OnStateChanged="@StateHasChanged"/>
                            break;
                        case FinancialsStore.SidebarEnum.EditAccount:
                        case FinancialsStore.SidebarEnum.AddAccount:
                            <_AccountForm OnStateChanged="@StateHasChanged"/>
                            break;
                        default:
                            <_SidebarDefault OnStateChanged="@StateHasChanged"/>
                            break;
                    }
                </div>
            </div>
            <div class="col-9 ps-4">
                @switch (Store.BodyState)
                {
                    case FinancialsStore.BodyEnum.EditTransaction:
                    case FinancialsStore.BodyEnum.AddTransaction:
                        <_TransactionForm OnStateChanged="@StateHasChanged"/>
                        break;
                    case FinancialsStore.BodyEnum.EditTransactionCategory:
                    case FinancialsStore.BodyEnum.AddTransactionCategory:
                        <_TransactionCategoryForm OnStateChanged="@StateHasChanged"/>
                        break;
                    default:
                        <_BodyDefault OnStateChanged="@StateHasChanged"/>
                        break;
                }
                
            </div>
        </div>
        
    </CascadingValue>
</PageTemplate>

@code {
    private FinancialsStore Store { get; set; } = null!;
    
    [Parameter]
    public Guid? AccountId { get; set; }

    protected override void OnInitialized()
    {
        Store = new(Db)
        {
            AccountId = AccountId,
        };
        Navigation.LocationChanged += HandleLocationChanged;
        Store.Initialize();
    }
    
    private void HandleLocationChanged(object? sender, LocationChangedEventArgs e)
    {
        var prevAccountId = Store.AccountId;
        Store.AccountId = AccountId;
        Store.BodyState = FinancialsStore.BodyEnum.Default;
        // if (!prevAccountId.Equals(AccountId))
        // {
        //     Store.FindForAccount();
        // }
        StateHasChanged();
    }

    public void Dispose()
    {
        Navigation.LocationChanged -= HandleLocationChanged;
    }

}