@using Relaks.Database
@using Relaks.Models.FinancialModels

@inject AppDbContext Db;

<div class="d-flex flex-column gap-3">
    @foreach (var category in AccountCategories)
    {
        <div class="list-group border-0">
            <div class="list-group-item group-show d-flex justify-content-between align-items-center gap-2 bg-dark bg-opacity-75">
                <div class="col">
                    <div class="fw-medium text-center text-uppercase text-white" style="letter-spacing: .15rem">@category.Title</div>
                </div>
                @if (AfterAccountCategory != null)
                {
                    <div class="col-auto group-show__item">
                        @AfterAccountCategory(category.Id)
                    </div>
                }
            </div>
            @foreach (var entryAccount in CategoryEntryAccounts[category.Id])
            {
                <div class="list-group-item bg-opacity-10 bg-secondary">
                    <EntryInlineItem EntryId="@entryAccount.Key"/>    
                </div>
                foreach (var account in entryAccount.Value)
                {
                    <div class="list-group-item p-0 cursor-pointer d-flex justify-content-between align-items-center gap-2 group-show @(account.Id.Equals(AccountId) ? "bg-primary bg-opacity-10" : "")">
                        <div class="p-3 col pe-1" @onclick="@(() => OnClickAccount.InvokeAsync(account.Id))">
                            <div class="d-flex gap-2 align-items-center">
                                <div class="col">
                                    <span class="@(account.Id.Equals(AccountId) ? "text-primary" : "")">
                                        <i class="las la-angle-right la-lg me-1"></i>
                                        @account.Title
                                    </span>
                                    @if (!string.IsNullOrEmpty(account.Description))
                                    {
                                        <Popover Content="@account.Description">
                                            <i class="las la-comment la-lg text-info ms-2"></i>
                                        </Popover>
                                    }
                                </div>
                                <div class="col-auto">@account.Balance.ToString("N2") @account.FinancialCurrency.Symbol</div>
                            </div>
                        </div>
                        @if (AfterAccount != null)
                        {
                            <div class="group-show__item pe-2 col-auto">
                                @AfterAccount(account.Id)
                            </div>
                        }
                    </div>
                }
            }
        </div>
    }
</div>

@code {
    [Parameter]
    public Guid? AccountId { get; set; }
    
    [Parameter]
    public EventCallback<Guid?> AccountChanged { get; set; }

    [Parameter]
    public EventCallback<Guid> OnClickAccount { get; set; }
    
    [Parameter]
    public RenderFragment<Guid>? AfterAccountCategory { get; set; }
    
    [Parameter]
    public RenderFragment<Guid>? AfterAccount { get; set; }
    
    private Dictionary<Guid, Dictionary<Guid, List<FinancialAccount>>> CategoryEntryAccounts { get; set; } = new();
    private List<FinancialAccountCategory> AccountCategories { get; set; } = new();

    protected override void OnInitialized()
    {
        AccountCategories = Db.FinancialAccountCategories.OrderBy(x => x.Title).ToList();
        var accounts = Db.FinancialAccounts.ToList();
        foreach (var category in AccountCategories)
        {
            foreach (var account in accounts)
            {
                if (!CategoryEntryAccounts.ContainsKey(category.Id))
                {
                    CategoryEntryAccounts[category.Id] = new();
                }

                if (!account.CategoryId.Equals(category.Id)) continue;
                if (!CategoryEntryAccounts[category.Id].ContainsKey(account.EntryId))
                {
                    CategoryEntryAccounts[category.Id][account.EntryId] = new() {account};
                }
                else
                {
                    CategoryEntryAccounts[category.Id][account.EntryId].Add(account);
                }
            }
        }
    }
}