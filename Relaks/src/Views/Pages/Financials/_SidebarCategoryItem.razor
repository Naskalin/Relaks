@using Relaks.Views.Pages.Financials.ViewModels
@using Relaks.Models.FinancialModels

<div class="list-group border-0">
        <div class="list-group-item group-show d-flex justify-content-between align-items-center gap-2 bg-secondary bg-opacity-25">
            <div class="d-flex col align-items-center gap-2">
                <span class="badge bg-secondary bg-opacity-75 rounded-pill text-white">@Category.Accounts.Count</span>
                <div class="fw-medium">@Category.Title</div>
            </div>
            <div class="group-show__item">
                <button type="button"
                        @onclick="@(() => HandleClickEditCategory(Category.Id))"
                        class="btn btn-circle btn-sm btn-outline-secondary" title="Изменить">
                    <i class="las la-edit la-lg"></i>
                </button>
            </div>
        </div>
        @foreach (var account in Category.Accounts)
        {
            <div class="list-group-item list-group-item-action cursor-pointer d-flex justify-content-between align-items-center gap-2 group-show">
                <div>
                    @account.TitleWithCurrency()
                    @if (!string.IsNullOrEmpty(account.Description))
                    {
                        <Popover Content="@account.Description">
                            <i class="las la-comment la-lg text-info ms-2"></i>
                        </Popover>      
                    }
                </div>
                <div class="group-show__item">
                    <button type="button"
                            @onclick="@(() => HandleClickEditAccount(account.Id))"
                            class="btn btn-circle btn-sm btn-outline-secondary" title="Изменить">
                        <i class="las la-edit la-lg"></i>
                    </button>
                </div>
            </div>
        }
</div>  

@code {

    [CascadingParameter]
    public FinancialsStore Store { get; set; } = null!;

    [Parameter]
    public EventCallback OnStateChanged { get; set; }

    [Parameter]
    public required FinancialAccountCategory Category { get; set; }

    private Task HandleClickEditAccount(Guid accountId)
    {
        Store.SidebarEditAccountId = accountId;
        Store.SidebarState = FinancialsStore.SidebarEnum.EditAccount;
        return OnStateChanged.InvokeAsync();
    }
    
    private Task HandleClickEditCategory(Guid categoryId)
    {
        Store.SidebarEditAccountCategoryId = categoryId;
        Store.SidebarState = FinancialsStore.SidebarEnum.EditAccountCategory;
        return OnStateChanged.InvokeAsync();
    }
}