@using Relaks.Views.Pages.Financials.ViewModels
@using Relaks.Database
@using Relaks.Mappers
@using Relaks.Models.FinancialModels

@inject AppDbContext Db;
@inject IJSRuntime JsRuntime;
@inject NavigationManager Navigation;

<div class="row align-items-center mb-3">
    <div class="col-auto">
        <button type="button" class="btn btn-circle btn-outline-secondary" @onclick="@HandleReturn" title="Вернуться">
            <i class="las la-arrow-left la-lg"></i>
        </button>
    </div>
    <div class="col">
        <h5 class="mb-0">@(IsEdit ? "Изменить счёт" : "Добавить счёт")</h5>
    </div>
</div>

<EditForm Model="@Req" OnValidSubmit="@HandleSubmit">
    <FluentValidationValidator DisableAssemblyScanning="@true"/>
    <ValidationSummary/>
    
    <div class="mb-3">
        <label for="financial-title" class="form-label">Название счёта *</label>
        <InputText id="financial-title" @bind-Value="@Req.Title" required="required" class="form-control" maxlength="255"/>
        <ValidationMessage For="@(() => Req.Title)"/>
    </div>
    
    <div class="mb-3">
        <SelectEntry EntryIds="@EntryIds" EntryIdsChanged="@HandleEntryChanged" IsMultiple="@false" Label="Объединение *"/>
        <ValidationMessage For="@(() => Req.EntryId)"/>
    </div>
    
    <div class="mb-3">
        <label for="financial-category" class="form-label">Категория счёта *</label>
        <Select id="financial-category" @bind-Value="@Req.CategoryId" Items="@Store.AccountCategoriesSelectOptions()" ShowSearch="true"></Select>
        <ValidationMessage For="@(() => Req.CategoryId)"/>
    </div>

    <div class="mb-3">
        <label for="financial-currency" class="form-label">Валюта *</label>
        <Select id="financial-currency" @bind-Value="@Req.FinancialCurrencyId" Items="@Store.CurrenciesSelectOptions()" ShowSearch="true"></Select>
        <ValidationMessage For="@(() => Req.FinancialCurrencyId)"/>
    </div>
    
    @if (!IsEdit)
    {
        <div class="mb-3">
            <label for="financial-initial-balance" class="form-label">Начальный баланс</label>
            <BootstrapInputGroup>
                <BootstrapInputNumber @bind-Value="Req.InitialBalance"
                                      IsSelectAllTextOnFocus="true"
                                      Step="0.01"
                                      Id="financial-initial-balance"/>
                <BootstrapInputGroupLabel DisplayText="@(Store.Currencies.FirstOrDefault(x => x.Id.Equals(Req.FinancialCurrencyId))?.Symbol)"/>
            </BootstrapInputGroup>
            <ValidationMessage For="@(() => Req.InitialBalance)"/>
            <div class="form-text">Начальный баланс можно задать только при создании счёта.</div>
        </div>
    }
    
    <div class="row">
        <div class="col">
            <div class="mb-3">
                <label for="financial-startAt" class="form-label">Открытие счёта *</label>
                <InputDate Type="@InputDateType.Date"
                           @bind-Value="@Req.StartAt"
                           id="financial-startAt"
                           class="form-control"/>
                <ValidationMessage For="@(() => Req.StartAt)"/>
            </div>
        </div>
        <div class="col">
            <div class="mb-3">
                <label for="financial-endAt" class="form-label">Закрытие счёта</label>
                <InputDate Type="@InputDateType.Date"
                           @bind-Value="@Req.EndAt"
                           id="financial-endAt"
                           class="form-control"/>
                <ValidationMessage For="@(() => Req.EndAt)"/>
            </div>
        </div>
    </div>
    
    <div class="mb-3">
        <label for="financial-desc" class="form-label">Описание</label>
        <MyTextarea @bind-Value="@Req.Description" id="financial-desc" maxlength="500"/>
        <ValidationMessage For="@(() => Req.Description)"/>
    </div>

    <div class="mb-3">
        <button class="btn btn-primary">
            <i class="las la-lg me-1 @(IsEdit ? "la-edit" : "la-plus-circle")"></i>
            @(IsEdit ? Resources.Action.SaveChanges : Resources.Action.Add)
        </button>
    </div>
</EditForm>

@if (IsEdit)
{
    <hr>
    <div class="text-end">
        <button type="button" class="btn btn-link text-danger" @onclick="@HandleDelete">
            <i class="las la-trash la-lg"></i>
            @Resources.Action.Delete
        </button>
    </div>
}

@code {

    [CascadingParameter]
    public FinancialsStore Store { get; set; } = null!;
    
    [Parameter]
    public EventCallback OnStateChanged { get; set; }
    private FinancialAccount? Account { get; set; }
    private List<Guid> EntryIds { get; set; } = new();

    protected override void OnParametersSet()
    {
        IsEdit = Store is {SidebarState: FinancialsStore.SidebarEnum.EditAccount,SidebarEditAccountId: not null};
        if (!IsEdit) return;
        Account = Db.FinancialAccounts.First(x => x.Id.Equals(Store.SidebarEditAccountId));
        Account.MapTo(Req);
        EntryIds = new List<Guid>() {Account.EntryId};
    }

    private bool IsEdit { get; set; }

    private FinancialAccountRequest Req { get; set; } = new();

    private void HandleEntryChanged(List<Guid> entryIds)
    {
        EntryIds = entryIds;
        Req.EntryId = entryIds.FirstOrDefault();
    }

    private Task HandleReturn()
    {
        Store.SidebarState = FinancialsStore.SidebarEnum.Default;
        return OnStateChanged.InvokeAsync();
    }

    private Task HandleSubmit()
    {
        if (IsEdit && Account != null)
        {
            Req.MapTo(Account);
        }
        else
        {
            var account = new FinancialAccount()
            {
                Balance = Req.InitialBalance ?? 0
            };
            Req.MapTo(account);
            Db.FinancialAccounts.Add(account);
        }
        
        Db.SaveChanges();

        return HandleReturn();
    }
    
    private async Task HandleDelete()
    {
        if (Account == null) return;
        var isConfirmed = await JsRuntime.InvokeAsync<bool>("confirm", Resources.Action.Delete_Confirmation);
        if (!isConfirmed) return;
        
        Db.FinancialAccounts.Remove(Account);
        await Db.SaveChangesAsync();
        Navigation.NavigateTo("/financials");
        
        await HandleReturn();
    }
}