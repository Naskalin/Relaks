@using Relaks.Models
@using Relaks.Managers
@using Relaks.Mappers
@using Relaks.Database

@inject AppFileManager AppFileManager;
@inject AppDbContext Db;

<div class="mb-3">
    <label for="@InputId" class="form-label">Выберите или переместите файлы для загрузки</label>
    <div class="input-group">
        <InputFile disabled="@IsLoading" OnChange="@LoadFiles" class="form-control" id="@InputId" multiple/>
        @if (IsLoading)
        {
            <div class="input-group-text">
                Загрузка <span class="ms-2"><i class="fa-solid fa-spinner fa-spin-pulse fa-lg text-primary"></i></span>
            </div>
        }
    </div>
</div>

@code {
    private Guid InputId { get; } = Guid.NewGuid();
    private bool IsLoading { get; set; }

    [Parameter]
    public Guid EntryId { get; set; }

    [Parameter]
    public EventCallback<List<Guid>> OnUpload { get; set; }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        IsLoading = true;
        var entryFiles = new List<EntryFile>();
        foreach (var file in e.GetMultipleFiles(e.FileCount))
        {
            var entryFile = new EntryFile()
            {
                EntryId = EntryId,
            };
            file.MapTo(entryFile);
            await AppFileManager.UploadAsync(entryFile, file);
            entryFiles.Add(entryFile);
        }

        if (entryFiles.Any())
        {
            Db.EntryFiles.AddRange(entryFiles);
            await Db.SaveChangesAsync();
            await OnUpload.InvokeAsync(entryFiles.Select(x => x.Id).ToList());
        }

        IsLoading = false;
    }

}