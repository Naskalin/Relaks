@page "/entries/{entryId:guid}/eiphone/new"
@page "/entries/{entryId:guid}/eiphone/{entryInfoId:guid}/edit"

@using Relaks.Models
@using Relaks.Database
@using Relaks.Mappers

@inject IJSRuntime JsRuntime;
@inject NavigationManager NavigationManager;
@inject AppDbContext Db;

<EntryProfileLayout EntryId="@EntryId">
    <HalfPage>
        <MyTitle>
            <BeforeTitle>
                <a href="/entries/@EntryId/info" class="btn btn-outline-secondary">
                    <i class="las la-arrow-left la-lg me-1"></i> @Resources.Action.Return
                </a>
            </BeforeTitle>
            <ChildContent>@(EntryInfoId.HasValue ? Resources.Action.Edit : Resources.Action.Add): @Resources.Entity.ResourceManager.GetString(nameof(EiPhone))</ChildContent>
        </MyTitle>

        <EditForm Model="@Model" OnSubmit="OnSubmit">
            <FluentValidationValidator @ref="Validator" DisableAssemblyScanning="@true"/>
            <ValidationSummary/>

            <div class="mb-3">
                <InputPhone Phone="@Model"/>
                <ValidationMessage For="@(() => Model.Number)"/>
                <ValidationMessage For="@(() => Model.Region)"/>
            </div>

            <EntryInfoFormFields EntryInfo="@Model"/>
            
            @if (EntryInfoId.HasValue)
            {
                <SoftDeletedReasonField SoftDeletedReason="@Model"/>
            }

            <div class="mb-3">
                <button class="btn btn-primary">
                    <i class="las la-lg me-1 @(EntryInfoId.HasValue ? "la-edit" : "la-plus-circle")"></i>
                    @(EntryInfoId.HasValue ? Resources.Action.SaveChanges : Resources.Action.Add)
                </button>
            </div>
        </EditForm>
        
         @if (EntryInfoId.HasValue && Model.DeletedAt != null)
         {
             <div class="text-end">
                 <button type="button" class="btn btn-link text-danger" @onclick="OnDelete">
                     <i class="las la-trash la-lg"></i>
                     @Resources.Action.Delete
                 </button>
             </div>
         }
    </HalfPage>
</EntryProfileLayout>

@code {

    [Parameter]
    public Guid EntryId { get; set; }

    [Parameter]
    public Guid? EntryInfoId { get; set; }

    private EiPhone Model { get; set; } = null!;

    protected override void OnParametersSet()
    {
        Model = EntryInfoId.HasValue ? Db.EiPhones.First(x => x.Id.Equals(EntryInfoId.Value)) : new EiPhone()
        {
            Number = "",
            Region = "RU"
        };
    }

    private FluentValidationValidator Validator { get; set; } = null!;
    
    private async Task OnDelete()
    {
        if (!EntryInfoId.HasValue) return;
        var isConfirmed = await JsRuntime.InvokeAsync<bool>("confirm", Resources.Action.Delete_Confirmation);
        if (!isConfirmed) return;
        Db.Remove(Model);
        await Db.SaveChangesAsync();
        NavigationManager.NavigateTo($"/entries/{EntryId}/info");
    }

    private void OnSubmit()
    {
        if (!Validator.Validate()) return;
        
        Model.MapEntryInfo(Model);
        Model.MapSoftDeleted(Model);
        Model.MapPhone(Model);

        if (!EntryInfoId.HasValue)
        {
            Model.EntryId = EntryId;
            Db.EiPhones.Add(Model);   
        }
        
        Db.SaveChanges();
        NavigationManager.NavigateTo($"/entries/{EntryId}/info");
    }

}