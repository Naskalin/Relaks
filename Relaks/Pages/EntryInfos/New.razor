@page "/entries/{entryId:guid}/einfo/new/{discriminator}"
@using Relaks.Models.Requests.EntryInfoRequests
@using Relaks.Models
@using Relaks.Mappers
@using Relaks.Database

<EntryProfileLayout EntryId="@EntryId">
    <HalfPage>
        <MyTitle>
            <BeforeTitle>
                <a href="/entries/@EntryId/info" class="btn btn-outline-secondary">
                    <i class="las la-arrow-left la-lg me-1"></i> Вернуться
                </a>
            </BeforeTitle>
            <ChildContent>Добавить @Discriminator</ChildContent>
        </MyTitle>
        
        <EditForm Model="@Req" OnSubmit="OnSubmit">
            <FluentValidationValidator @ref="Validator" DisableAssemblyScanning="@true"/>
            <ValidationSummary/>
            <FormFields @bind-Req="@Req"/>
            <button class="btn btn-primary">Добавить</button>
        </EditForm>
    </HalfPage>
</EntryProfileLayout>

@code {

    [Parameter]
    public Guid EntryId { get; set; }

    [Parameter]
    public string Discriminator { get; set; } = null!;

    [Inject]
    public AppDbContext Db { get; set; } = null!;
    
    [Inject]
    public NavigationManager NavigationManager { get; set; } = null!;

    private EntryInfoCreateRequest Req { get; set; } = new();

    protected override void OnParametersSet()
    {
        Req.Discriminator = Discriminator;
        // EntryInfo = Discriminator switch
        // {
        //     nameof(EiPhone) => new EiPhone(),
        //     nameof(EiEmail) => new EiEmail(),
        //     nameof(EiDate) => new EiDate(),
        //     nameof(EiUrl) => new EiUrl(),
        //     _ => throw new ArgumentException($"Error: Discriminator {Discriminator} not supported")
        //     };
    }
    private FluentValidationValidator Validator { get; set; } = null!;
    public void OnSubmit()
    {
        if (!Validator.Validate()) return;

        BaseEntryInfo eInfo;
        
        switch (Discriminator)
        {
            case nameof(EiPhone):
                eInfo = new EiPhone();
                Req.MapTo((EiPhone) eInfo);
                break;
            case nameof(EiEmail):
                eInfo = new EiEmail();
                Req.MapTo((EiEmail) eInfo);
                break;
            case nameof(EiDate):
                eInfo = new EiDate();
                Req.MapTo((EiDate) eInfo);
                break;
            case nameof(EiUrl):
                eInfo = new EiUrl();
                Req.MapTo((EiUrl) eInfo);
                break;
            default:
                throw new ArgumentException($"Error: Discriminator {Discriminator} is not supported");
        }

        eInfo.EntryId = EntryId;
        Req.MapTo(eInfo);
        
        Db.BaseEntryInfos.Add(eInfo);
        Db.SaveChanges();
        NavigationManager.NavigateTo($"/entries/{EntryId}/info");


        System.Console.WriteLine($"-----------------------------------------------------------------------");
        System.Console.WriteLine($"{Req.Title} {Req.Discriminator} {Req.IsFavorite}");
        System.Console.WriteLine($"-----------------------------------------------------------------------");
    }

}