@using Relaks.Models
@using Relaks.Managers
@using Relaks.Database

<ul class="nav nav-tabs justify-content-center">
    @foreach (var tab in Enum.GetValues<Tabs>())
    {
        <li class="nav-item" @onclick="@(() => SetTab(tab))">
            <button type="button" class="nav-link @(tab.Equals(CurrentTab) ? "active" : "")">@Resources.SoftDelete.ResourceManager.GetString(tab.ToString())</button>
        </li>
    }
</ul>

@if (FilteredItems.Any())
{
    <ul class="list-group list-group-flush mt-2">
        @foreach (var eInfo in FilteredItems)
        {
            <li class="list-group-item gx-0 px-0 @(eInfo.Id.Equals(EntryInfoId) ? "border border-3 border-warning" : "") d-flex align-items-center justify-content-between"
                @key="@eInfo.Id">
                <EntryInfoContact EntryInfo="@eInfo" EntryInfoId="EntryInfoId"/>
                <Tooltip Title="@($"Изменить {eInfo.Discriminator}")" Trigger="hover" Placement="Placement.Right">
                    <NavLink href="@($"/entries/{eInfo.EntryId}/{eInfo.Discriminator}/{eInfo.Id}/edit")" class="btn btn-light btn-sm btn-circle">
                        <i class="las la-lg la-edit"></i>
                    </NavLink>
                </Tooltip>
            </li>
        }
    </ul>   
}
else
{
    <p class="text-muted mt-2">@Resources.Action.NotFoundResults</p>
}

@code {

    private enum Tabs
    {
        Active,
        Archival,
    }
    
    [Parameter]
    public Guid? EntryInfoId { get; set; }

    [Parameter]
    public List<BaseEntryInfo> EntryInfos { get; set; } = new();

    private Tabs CurrentTab { get; set; }
    private List<BaseEntryInfo> FilteredItems { get; set; } = new();
    

    private void SetTab(Tabs tab)
    {
        CurrentTab = tab;
        var q = EntryInfos.Where(x => DataHelper.EntryInfoContactDiscriminators.Contains(x.Discriminator))
            .OrderByDescending(x => x.IsFavorite)
            .ThenByDescending(x => x.UpdatedAt)
        ;
        switch (tab)
        {
            case Tabs.Active:
                FilteredItems = q.Where(x => x.DeletedAt is null).ToList();
                break;
            case Tabs.Archival:
                FilteredItems = q.Where(x => x.DeletedAt is not null).ToList();
                break;
        }
    }

    protected override void OnParametersSet()
    {
        SetTab(Tabs.Active);
    }

}