@using Relaks.Models
@using Relaks.Interfaces
@using Relaks.Utils
@using Relaks.Utils.Extensions

<tr @ondblclick="@(() => OnRowDoubleClicked.InvokeAsync(BaseEntry.Id))" @onclick="@(() => OnRowClicked.InvokeAsync(BaseEntry.Id))">
    <td>
        <Tooltip Title="@Resources.Entity.ResourceManager.GetString(BaseEntry.Discriminator)" Placement="Placement.Right">
            <div style="width: 40px; height: 40px;" class="border rounded-circle d-flex align-items-center justify-content-center">
                <i class="@DataHelper.EntityIcon(BaseEntry.Discriminator)" style="font-size: 1.6rem;"></i>
            </div>
        </Tooltip>
    </td>
    <td>
        @if (!string.IsNullOrEmpty(BaseEntry.Thumbnail))
        {
            <img src="@BaseEntry.Thumbnail" width="60" height="60" class="rounded border" alt="...">
        }
        else
        {
            <CustomAvatar Text="@BaseEntry.Name"/>
        }
    </td>
    <td>
        <strong>@BaseEntry.Name</strong>
        @if (!string.IsNullOrEmpty(BaseEntry.Description))
        {
            <div class="text-muted">
                <small>@BaseEntry.Description.Truncate(150)</small>
            </div>
        }
        @if (FtsSnippet != null)
        {
            <div class="fts-result"><i class="las la-search la-lg"></i> @((MarkupString) FtsSnippet)</div>
        }
        @if (BaseEntry.DeletedAt != null)
        {
            <SoftDeleteShow SoftDeletedReason="@BaseEntry" Classes="mt-2"/>
        }
    </td>
    <td>@BaseEntry.StartAt?.ToLocalTime().ToShortDateString()</td>
    <td>@BaseEntry.EndAt?.ToLocalTime().ToShortDateString()</td>
    <td>@BaseEntry.CreatedAt.ToLocalTime()</td>
    <td>@BaseEntry.UpdatedAt.ToLocalTime()</td>
</tr>

@code {

    [Parameter]
    public BaseEntry BaseEntry { get; set; } = null!;

    [Parameter]
    public string? FtsSnippet { get; set; }
    
    [Parameter]
    public EventCallback<Guid> OnRowDoubleClicked { get; set; }
    
    [Parameter]
    public EventCallback<Guid> OnRowClicked { get; set; }

    // private AvatarHelper.AvatarCustom AvatarCustom { get; set; } = new();
    //
    // protected override void OnParametersSet()
    // {
    //     if (string.IsNullOrEmpty(BaseEntry.Thumbnail))
    //     {
    //         AvatarCustom = AvatarHelper.Create(BaseEntry.Name);
    //     }
}