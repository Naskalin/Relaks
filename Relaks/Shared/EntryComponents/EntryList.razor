@using Relaks.Models
@using Relaks.Database
@using Relaks.Database.Repositories
@using Relaks.Models.Misc
@using Relaks.Models.Requests
@using Relaks.Utils.Extensions
@using System.Text.Json
@using Microsoft.AspNetCore.Http.HttpResults

<div class="btn-group mb-3">
    @foreach (var kv in EntryDiscriminators())
    {
        <button type="button"
                class="btn @(Req.Discriminator == kv.Value ? "btn-primary" : "btn-outline-primary")"
                @onclick="() => OnChangeDiscriminator(kv.Value)">
            @kv.Key
        </button>
    }
</div>

<MyPagination ActivePage="@Req.Page"
              OnPageChanged="@OnPageChanged"
              TotalItems="@PaginatableResult.Total"
              TotalPages="@PaginatableResult.PageCount"
/>

<table class="table table-bordered table-hover cursor-pointer align-middle">
    <thead>
    <tr>
        <th style="width: 70px" @onclick="() => OnSortChange(nameof(BaseEntry.Discriminator))">Тип <OrderableIcon Orderable="@Req" Prop="@nameof(BaseEntry.Discriminator)"/></th>
        <th style="width: 80px"></th>
        <th @onclick="() => OnSortChange(nameof(BaseEntry.Name))">Имя <OrderableIcon Orderable="@Req" Prop="@nameof(BaseEntry.Name)"/></th>
        <th style="width: 80px" @onclick="() => OnSortChange(nameof(BaseEntry.StartAt))">От <OrderableIcon Orderable="@Req" Prop="@nameof(BaseEntry.StartAt)"/></th>
        <th style="width: 80px" @onclick="() => OnSortChange(nameof(BaseEntry.EndAt))">До <OrderableIcon Orderable="@Req" Prop="@nameof(BaseEntry.EndAt)"/></th>
        <th style="width: 150px" @onclick="() => OnSortChange(nameof(BaseEntry.CreatedAt))">Создан <OrderableIcon Orderable="@Req" Prop="@nameof(BaseEntry.CreatedAt)"/></th>
        <th style="width: 150px" @onclick="() => OnSortChange(nameof(BaseEntry.UpdatedAt))">Обновлён <OrderableIcon Orderable="@Req" Prop="@nameof(BaseEntry.UpdatedAt)"/></th>
    </tr>
    </thead>
    <tbody>
    @foreach (var be in PaginatableResult.Items)
    {
        <tr @ondblclick="() => OnRowDoubleClicked.InvokeAsync(be.Id)">
            <td>
                <Tooltip Title="@be.Discriminator">
                    <div style="width: 40px; height: 40px;" class="border rounded-circle d-flex align-items-center justify-content-center">
                        <i class="@EntityIcon.ByClassName(be.Discriminator)" style="font-size: 1.6rem;"></i>
                    </div>
                </Tooltip>
            </td>
            <td>
                <i class="las la-question-circle" style="font-size: 3rem;"></i>
            </td>
            <td>
                @be.Name
                @if (!string.IsNullOrEmpty(be.Description))
                {
                    <div class="text-muted">
                        <small>@be.Description.Truncate(150)</small>
                    </div>
                }
            </td>
            <td>@be.StartAt?.ToLocalTime().ToShortDateString()</td>
            <td>@be.EndAt?.ToLocalTime().ToShortDateString()</td>
            <td>@be.CreatedAt.ToLocalTime()</td>
            <td>@be.UpdatedAt.ToLocalTime()</td>
        </tr>
    }
    </tbody>
</table>

<MyPagination ActivePage="@Req.Page"
              OnPageChanged="@OnPageChanged"
              TotalItems="@PaginatableResult.Total"
              TotalPages="@PaginatableResult.PageCount"
/>

@code {

    [Inject]
    public AppDbContext Db { get; set; } = null!;

    private PaginatableResult<BaseEntry> PaginatableResult { get; set; } = new();

    private EntryFilterRequest Req { get; set; } = new()
    {
        Page = 1,
        PerPage = 10
    };

    private static Dictionary<string, string?> EntryDiscriminators() => new()
    {
        {"Все", null},
        {"Люди", nameof(EPerson)},
        {"Компании", nameof(ECompany)},
        {"Встречи", nameof(EMeet)},
    };

    [Parameter]
    public EventCallback<Guid> OnRowDoubleClicked { get; set; }

    private void OnSortChange(string field)
    {
        if (Req.IsOrderByDesc is null)
        {
            Req.OrderBy = field;
            Req.IsOrderByDesc = false;
        }
        else if (Req.IsOrderByDesc is false)
        {
            if (field.Equals(Req.OrderBy))
            {
                Req.IsOrderByDesc = true;
            }
            else
            {
                Req.OrderBy = field;
                Req.IsOrderByDesc = false;
            }
        }
        else
        {
            Req.OrderBy = null;
            Req.IsOrderByDesc = null;   
        }

        GetData();
    }

    private void OnPageChanged(int page)
    {
        Req.Page = page;
        GetData();
    }
    
    private void OnChangeDiscriminator(string? discriminator)
    {
        Req.Page = 1;
        Req.Discriminator = discriminator;
        GetData();
    }

    private void GetData()
    {
        PaginatableResult = Db.BaseEntries.FilterByReq(Req);
    }

    protected override void OnInitialized()
    {
        GetData();
    }

    // protected override async Task OnAfterRenderAsync(bool firstRender)
    // {
    //     await base.OnAfterRenderAsync(firstRender);
    // }

}