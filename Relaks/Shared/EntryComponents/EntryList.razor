@using Relaks.Models
@using Relaks.Database
@using Relaks.Database.Repositories
@using Relaks.Models.Misc
@using Relaks.Models.Requests
@using Relaks.Utils.Extensions
@using System.Text.Json
@using Microsoft.AspNetCore.Http.HttpResults

<div class="mb-3">
    <div class="row">
        <div class="col-3">
            <div class="input-group">
                <input type="text" class="form-control" @bind="@Search" @oninput="@OnInputSearch" placeholder="Поиск...">
                <button class="btn btn-outline-secondary" type="button" @onclick="@(() => Search = null)">
                    <i class="las la-times la-lg"></i>
                </button>
            </div>
        </div>
    </div>
</div>

<div class="mb-3">
    <div class="form-check">
        <input class="form-check-input" type="checkbox" id="entry-search-archive-checkbox" @oninput="@OnChangeIsDeleted">
        @* <Checkbox TValue="bool?" DisplayText="Архивные записи" ShowLabel="true" @oninput=""/> *@
        @* <InputCheckbox id="entry-search-archive-checkbox" type="checkbox" class="form-check-input" @oninput="@OnChangeIsDeleted"/> *@
      <label class="form-check-label" for="entry-search-archive-checkbox">
        Архивные записи
      </label>
    </div>
</div>

<div class="btn-group mb-3">
    @foreach (var kv in EntryDiscriminators())
    {
        <button type="button"
                class="btn @(Req.Discriminator == kv.Value ? "btn-secondary" : "btn-outline-secondary")"
                @onclick="() => OnChangeDiscriminator(kv.Value)">
            @kv.Key
        </button>
    }
</div>

@if (string.IsNullOrEmpty(Search))
{
    <MyPagination ActivePage="@Req.Page"
                  OnPageChanged="@OnPageChanged"
                  TotalItems="@PaginatableResult.Total"
                  TotalPages="@PaginatableResult.PageCount"
              
    />   
}

<table class="table table-bordered table-hover cursor-pointer align-middle">
    <thead>
    <tr style="@(!string.IsNullOrEmpty(Search) ? "opacity: .3" : "")">
        <th style="width: 70px" @onclick="() => OnSortChange(nameof(BaseEntry.Discriminator))">Тип <OrderableIcon Orderable="@Req" Prop="@nameof(BaseEntry.Discriminator)"/></th>
        <th style="width: 80px"></th>
        <th @onclick="() => OnSortChange(nameof(BaseEntry.Name))">Имя <OrderableIcon Orderable="@Req" Prop="@nameof(BaseEntry.Name)"/></th>
        <th style="width: 80px" @onclick="() => OnSortChange(nameof(BaseEntry.StartAt))">От <OrderableIcon Orderable="@Req" Prop="@nameof(BaseEntry.StartAt)"/></th>
        <th style="width: 80px" @onclick="() => OnSortChange(nameof(BaseEntry.EndAt))">До <OrderableIcon Orderable="@Req" Prop="@nameof(BaseEntry.EndAt)"/></th>
        <th style="width: 150px" @onclick="() => OnSortChange(nameof(BaseEntry.CreatedAt))">Создан <OrderableIcon Orderable="@Req" Prop="@nameof(BaseEntry.CreatedAt)"/></th>
        <th style="width: 150px" @onclick="() => OnSortChange(nameof(BaseEntry.UpdatedAt))">Обновлён <OrderableIcon Orderable="@Req" Prop="@nameof(BaseEntry.UpdatedAt)"/></th>
    </tr>
    </thead>
    <tbody>
    @if (string.IsNullOrEmpty(Search))
    {
        @foreach (var baseEntry in PaginatableResult.Items)
        {
            <EntryListItem BaseEntry="@baseEntry" OnRowDoubleClicked="OnRowDoubleClicked" OnRowClicked="OnRowClicked"/>
        }
    }
    else
    {
        @foreach (var ftsEntry in FtsEntries)
        {
            @if (ftsEntry.BaseEntry != null)
            {
                <EntryListItem BaseEntry="@ftsEntry.BaseEntry" FtsSnippet="@ftsEntry.Snippet" OnRowDoubleClicked="OnRowDoubleClicked" OnRowClicked="OnRowClicked"/>
            }
        }
    }
    </tbody>
</table>

@if (string.IsNullOrEmpty(Search))
{
    <MyPagination ActivePage="@Req.Page"
                  OnPageChanged="@OnPageChanged"
                  TotalItems="@PaginatableResult.Total"
                  TotalPages="@PaginatableResult.PageCount"
              
    />   
}

@code {

    [Inject]
    public AppDbContext Db { get; set; } = null!;

    private PaginatableResult<BaseEntry> PaginatableResult { get; set; } = new();
    private List<FtsEntry> FtsEntries { get; set; } = new();

    private EntryFilterRequest Req { get; set; } = new()
    {
        Page = 1,
        PerPage = 10
    };
    
    private string? Search { get; set; }

    private static Dictionary<string, string?> EntryDiscriminators() => new()
    {
        {"Все", null},
        {"Люди", nameof(EPerson)},
        {"Компании", nameof(ECompany)},
        {"Встречи", nameof(EMeet)},
    };
    

    [Parameter]
    public EventCallback<Guid> OnRowDoubleClicked { get; set; }
    
    [Parameter]
    public EventCallback<Guid> OnRowClicked { get; set; }

    private void OnSortChange(string field)
    {
        if (!string.IsNullOrEmpty(Search)) return;
        if (Req.IsOrderByDesc is null)
        {
            Req.OrderBy = field;
            Req.IsOrderByDesc = false;
        }
        else if (Req.IsOrderByDesc is false)
        {
            if (field.Equals(Req.OrderBy))
            {
                Req.IsOrderByDesc = true;
            }
            else
            {
                Req.OrderBy = field;
                Req.IsOrderByDesc = false;
            }
        }
        else
        {
            if (field.Equals(Req.OrderBy))
            {
                Req.OrderBy = null;
                Req.IsOrderByDesc = null;   
            }
            else
            {
                Req.OrderBy = field;
                Req.IsOrderByDesc = false;
            }
        }

        FindData();
    }

    private void OnChangeIsDeleted(ChangeEventArgs e)
    {
        Req.IsDeleted = (bool?) e.Value;
        Req.Page = 1;
        FindData();
    }

    private void OnPageChanged(int page)
    {
        Req.Page = page;
        Search = null;
        FindData();
    }
    
    private void OnChangeDiscriminator(string? discriminator)
    {
        Req.Page = 1;
        Req.Discriminator = discriminator;
        FindData();
    }
    

    private void OnInputSearch(ChangeEventArgs e)
    {
        Search = e.Value?.ToString();
        FindData();
    }

    private void FindData()
    {
        if (string.IsNullOrEmpty(Search))
        {
            PaginatableResult = Db.BaseEntries.FindByReq(Req);
            FtsEntries = new List<FtsEntry>();
        }
        else
        {
            PaginatableResult = new PaginatableResult<BaseEntry>();
            FtsEntries = Db.FtsEntrySearch(Search, Req);
        }
    }

    protected override void OnInitialized()
    {
        FindData();
    }
}