@using Relaks.Models
@using Relaks.Database
@using Relaks.Database.Repositories
@using Relaks.Models.Misc
@using Relaks.Models.Requests
@using Relaks.Utils.Extensions
@using System.Text.Json

@* <div class="btn-group mb-3"> *@
@*     @foreach (var kv in EntryDiscriminators()) *@
@*         { *@
@*             <button type="button" *@
@*                     class="btn @(Req.Discriminator == kv.Value ? "btn-secondary" : "btn-outline-secondary")" *@
@*                     @onclick="e => OnChangeDiscriminator(kv.Value)">@kv.Key</button> *@
@*         } *@
@* </div> *@

<Grid TItem="BaseEntry"
      class="table table-hover table-bordered table-striped align-middle"
      AllowPaging="true"
      AllowSorting="true"
      PageSize="15"
      AllowFiltering="true"
      DataProvider="EntriesDataProvider">
    <GridColumn TItem="BaseEntry" Filterable="false">
        <i class="las la-question-circle" style="font-size: 3rem;"></i>
    </GridColumn>
    <GridColumn TItem="BaseEntry" Filterable="false">
        <i class="@EntityIcon.ByClassName(context.Discriminator)" style="font-size: 1.6rem;"></i>
    </GridColumn>
    <GridColumn TItem="BaseEntry" HeaderText="Имя" PropertyName="@nameof(BaseEntry.Name)" SortString="@nameof(BaseEntry.Name)" SortKeySelector="item => item.Name">
        @context.Name
    </GridColumn>
    <GridColumn TItem="BaseEntry" HeaderText="Репутация" PropertyName="@nameof(BaseEntry.Reputation)" SortString="@nameof(BaseEntry.Reputation)" SortKeySelector="item => item.Reputation">
        @context.Reputation
    </GridColumn>
    <GridColumn TItem="BaseEntry" HeaderText="StartAt" PropertyName="@nameof(BaseEntry.StartAt)" SortString="@nameof(BaseEntry.StartAt)" SortKeySelector="item => item.StartAt ?? new DateTime()">
        @context.StartAt
    </GridColumn>
    <GridColumn TItem="BaseEntry" HeaderText="EndAt" PropertyName="@nameof(BaseEntry.EndAt)" SortString="@nameof(BaseEntry.EndAt)" SortKeySelector="item => item.EndAt ?? new DateTime()">
        @context.EndAt
    </GridColumn>
</Grid>

@* <DataGrid TItem="BaseEntry" *@
@*           Data="@PaginatableResult.Items" *@
@*           ReadData="OnReadData" *@
@*           TotalItems="@PaginatableResult.Total" *@
@*           PageSize="@PaginatableResult.PerPage" *@
@*           PagerPosition="DataGridPagerPosition.TopAndBottom" *@
@*           Sortable *@
@*           ShowPager *@
@*           Responsive *@
@*           SortMode="DataGridSortMode.Single" *@
@*           RowDoubleClicked="e => OnRowDoubleClicked.InvokeAsync(e.Item.Id)" *@
@*           RowStyling="@OnRowStyling" *@
@*           class="align-middle" *@
@*           @bind-SelectedRow="@SelectedEntry"> *@
@*     <DataGridColumn Field="@nameof(BaseEntry.Id)" Caption="" Sortable="false" Width="100px"> *@
@*         <DisplayTemplate> *@
@*             <i class="las la-question-circle" style="font-size: 3rem;"></i> *@
@*         </DisplayTemplate> *@
@*     </DataGridColumn> *@
@*     <DataGridColumn Field="@nameof(BaseEntry.Discriminator)" Caption="" Sortable="false" CellStyle="@(item => "width: 70px")"> *@
@*         <DisplayTemplate> *@
@*             @{ var entry = context! as BaseEntry; } *@
@*             <i class="@EntityIcon.ByClassName(entry.Discriminator)" style="font-size: 1.6rem;"></i> *@
@*         </DisplayTemplate> *@
@*     </DataGridColumn> *@
@*     <DataGridColumn Field="@nameof(BaseEntry.Name)" Caption="Имя"> *@
@*         <DisplayTemplate> *@
@*             @{ var entry = context! as BaseEntry;} *@
@*             @entry.Name *@
@*             @if (!string.IsNullOrEmpty(entry.Description)) *@
@*             { *@
@*                 <div class="mt-1 text-muted">@entry.Description.Truncate(150)</div> *@
@*             } *@
@*         </DisplayTemplate> *@
@*     </DataGridColumn> *@
@*     <DataGridColumn Field="@nameof(BaseEntry.Reputation)" Caption="Репутация" Width="100px"/> *@
@*     <DataGridColumn Field="@nameof(BaseEntry.StartAt)" Caption="StartAt" Width="160px"/> *@
@*     <DataGridColumn Field="@nameof(BaseEntry.EndAt)" Caption="EndAt" Width="160px"/> *@
@* </DataGrid> *@

@code {

    [Inject]
    public AppDbContext Db { get; set; } = null!;

    // private BaseEntry? SelectedEntry { get; set; }
    // private PaginatableResult<BaseEntry> PaginatableResult { get; set; } = new();
    //
    private EntryFilterRequest Req { get; set; } = new();

    // private static Dictionary<string, string?> EntryDiscriminators() => new()
    // {
    //     {"Все", null},
    //     {"Люди", nameof(EPerson)},
    //     {"Компании", nameof(ECompany)},
    //     {"Встречи", nameof(EMeet)},
    // };

    // [Parameter]
    // public EventCallback<Guid> OnRowDoubleClicked { get; set; }
    //
    private async Task<GridDataProviderResult<BaseEntry>> EntriesDataProvider(GridDataProviderRequest<BaseEntry> request)
    {
        Req.Page = request.PageNumber;
        Req.PerPage = request.PageSize;
        Req.OrderBy = null;
        Req.IsOrderByDesc = null;

        if (request.Sorting.Any())
        {
            Req.OrderBy = request.Sorting.FirstOrDefault()?.SortString;
            var sortDirection = request.Sorting.FirstOrDefault()?.SortDirection;
            Req.IsOrderByDesc = sortDirection.Equals(SortDirection.Descending);
        }

        var result = Db.BaseEntries.FilterByReq(Req);
        return await Task.FromResult(new GridDataProviderResult<BaseEntry>()
        {
            Data = result.Items,
            TotalCount = result.Total,
        });
    }

    //
    // private void OnRowStyling(BaseEntry baseEntry, DataGridRowStyling styling)
    // {
    //     if (baseEntry.Id.Equals(SelectedEntry?.Id))
    //     {
    //         styling.Style = "background-color: #cfe2ff;";
    //     }
    // }

    // private void ResetRequest()
    // {
    //     Req = new EntryFilterRequest();
    // }
    //
    // private void OnChangeDiscriminator(string? discriminator)
    // {
    // //     ResetRequest();
    // //     Req.Discriminator = discriminator;
    // //     PaginatableResult = Db.BaseEntries.FilterByReq(Req);
    // }

    // protected override void OnInitialized()
    // {
    //     PaginatableResult = Db.BaseEntries.FilterByReq(Req);
    // }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
    }

}