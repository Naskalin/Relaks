@using Relaks.Interfaces
@using Relaks.Models

@inject IJSRuntime JsRuntime;
@implements IDisposable

@* <div class="border p-3 mb-3"> *@
@*     <p>DatasetFormFields.razor</p> *@
@*     <Dump Data="@Dataset"/> *@
@* </div> *@

<div class="mb-3">
    <button type="button" class="btn btn-sm btn-secondary" @onclick="@AddGroupToStart">
        <i class="las la-plus-circle la-lg me-1"></i>
         Добавить группу
    </button>
</div>

<div class="mb-3" id="js-sortable-groups">
    @foreach (var group in Dataset.Groups)
    {
        <DatasetGroupFormFields
            @key="@group.Id"
            Group="@group"
            GroupChanged="@(() => DatasetChanged.InvokeAsync(Dataset))"
            OnDelete="@OnDeleteGroup"
            GroupsCount="@Dataset.Groups.Count"/>
    }
</div>

@* <div class="mb-3"> *@
@*     <button type="button" class="btn btn-sm btn-secondary" @onclick="@AddGroupToEnd"> *@
@*         <i class="las la-plus-circle la-lg me-1"></i> *@
@*         Добавить группу *@
@*     </button> *@
@* </div> *@

@code {

    private DotNetObjectReference<DatasetFormFields>? ObjectReference { get; set; }
    
    [Parameter]
    public DatasetModel Dataset { get; set; } = null!;

    [Parameter]
    public EventCallback<DatasetModel> DatasetChanged { get; set; }

    private static DatasetGroup CreateNewGroup() => new()
    {
        Items = new List<DatasetItem>()
        {
            new()
        }
    };

    private async Task OnDeleteGroup(DatasetGroup group)
    {
        if (Dataset.Groups.Count <= 1) return;
        Dataset.Groups.Remove(group);
        await DatasetChanged.InvokeAsync(Dataset);
    }

    private async Task AddGroupToStart()
    {
        Dataset.Groups.Insert(0, CreateNewGroup());
        await DatasetChanged.InvokeAsync(Dataset);
    }

    protected override void OnInitialized()
    {
        ObjectReference = DotNetObjectReference.Create(this);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == false) return;
        await JsRuntime.InvokeVoidAsync("SortableJsGroupsInit", ObjectReference);
    }

    [JSInvokable]
    public async Task OnSortGroups(List<Guid> groupIds)
    {
        Dataset.Groups = Dataset.Groups.OrderBy(g => groupIds.IndexOf(g.Id)).ToList();
        await DatasetChanged.InvokeAsync(Dataset);
    }

    public void Dispose()
    {
        ObjectReference?.Dispose();
    }

}