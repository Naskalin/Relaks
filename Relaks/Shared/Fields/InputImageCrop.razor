@inject IJSRuntime Js;

<InputFile OnChange="@LoadFiles" accept="image/*" class="form-control"/>
<div id="@CropperBlockId"></div>
@if (!string.IsNullOrEmpty(ResultImage))
{
    <img src="@ResultImage" alt="" class="rounded"/>
}
@if (!string.IsNullOrEmpty(RootImage))
{
    <button type="button" class="btn btn-primary" @onclick="@HandleCropImage">crop</button>
}

@code {

    private string CropperBlockId { get; set; } = null!;

    [Parameter]
    public string? Label { get; set; } = "Выберите изображение";

    private string? RootImage { get; set; }
    private string? ResultImage { get; set; }
    // private Guid InputId { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        CropperBlockId = Guid.NewGuid().ToString();
    }

    private async Task LoadFiles(InputFileChangeEventArgs e)
    {
        var image = await e.File.RequestImageFileAsync("image/png", 600, 600);
        await using var imageStream = image.OpenReadStream(1024 * 1024 * 10);
        using MemoryStream ms = new();
        await imageStream.CopyToAsync(ms);

        RootImage = $"data:image/png;base64,{Convert.ToBase64String(ms.ToArray())}";
        ResultImage = null;
        await Js.InvokeVoidAsync("CropperJsInit", new
        {
            imgSrc = RootImage,
            blockId = CropperBlockId,
        });
    }

    private async Task HandleCropImage()
    {
        ResultImage = await Js.InvokeAsync<string>("CropperJsCrop");
        RootImage = null;
    }

}