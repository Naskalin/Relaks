@inject IJSRuntime JsRuntime;

<textarea class="form-control js-textarea-autosize" 
    data-id="@Id"
    @bind="@Value"
    @bind:event="oninput"
    @bind:after="@OnChanged"
    @attributes="@InputAttributes"
    ></textarea>

@if (InputAttributes.ContainsKey("maxlength") && !string.IsNullOrEmpty(Value))
{
    <div class="text-end">
        <small class="text-muted">@Value.Length / @InputAttributes["maxlength"]</small>
    </div>       
}

@code {
    [Parameter]
    public string? Value { get; set; }
    
    [Parameter]
    public EventCallback<string?> ValueChanged { get; set; }

    [Parameter(CaptureUnmatchedValues = true)]
    public Dictionary<string, object> InputAttributes { get; set; } = new();

    private int Counter { get; set; }

    private Guid Id { get; set; } = Guid.NewGuid();

    private async Task OnChanged()
    {
        if (string.IsNullOrEmpty(Value)) Value = null;
        CalculateLetters();
        await ValueChanged.InvokeAsync(Value);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            CalculateLetters();
            await JsRuntime.InvokeVoidAsync("TextareaAutosize", $"[data-id=\"{Id}\"]");
        }
    }

    private void CalculateLetters()
    {
        Counter = string.IsNullOrEmpty(Value) ? 0 : Value.Length;
    }
}