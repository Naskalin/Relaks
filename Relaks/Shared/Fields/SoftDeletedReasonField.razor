@using Relaks.Interfaces

<div class="mb-3">
    <div class="form-check form-switch">
        <input class="form-check-input"
               type="checkbox"
               checked="@IsSoftDeleted"
               @oninput="OnChangeIsSoftDeleted"
               id="is-show-soft-deleted"/>
        <label class="form-check-label" for="is-show-soft-deleted">@Resources.SoftDelete.MoveToArchive</label>
    </div>
</div>
    @if (IsSoftDeleted)
    {
        <div class="alert bg-danger bg-opacity-25">
            <div class="mb-3 text-danger">
                <small><b>В архиве с @SoftDeletedReason.DeletedAt.ToString()</b></small>
            </div>
            <div class="mb-3">
                <label for="" class="form-label">@Resources.Field.DeletedReason</label>
                <InputTextArea @bind-Value="SoftDeletedReason.DeletedReason" class="form-control" rows="3"></InputTextArea>
            </div>
        </div>
    }

@code {

    [Parameter]
    public ISoftDeletedReason SoftDeletedReason { get; set; } = null!;

    private bool IsSoftDeleted { get; set; }

    private void OnChangeIsSoftDeleted(ChangeEventArgs e)
    {
        IsSoftDeleted = (bool) (e.Value ?? false);

        SoftDeletedReason.DeletedAt = IsSoftDeleted ? DateTime.Now : null;
        SoftDeletedReason.DeletedReason = SoftDeletedReason.DeletedAt == null ? null : SoftDeletedReason.DeletedReason?.Trim();

        if (!IsSoftDeleted || string.IsNullOrEmpty(SoftDeletedReason.DeletedReason))
        {
            SoftDeletedReason.DeletedReason = null;
        }
    }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();

        IsSoftDeleted = SoftDeletedReason.DeletedAt != null;
    }

}