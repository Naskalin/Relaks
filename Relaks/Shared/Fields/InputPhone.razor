@using Relaks.Interfaces
@using Relaks.Database
@using Relaks.Models
@using Relaks.Models.Misc

@inject AppDbContext Db;

<label for="" class="form-label">@Resources.Entity.EiPhone</label>
<div class="input-group">
    <button class="btn btn-outline-secondary" type="button" @onclick="ShowModal">
        <i class="las la-angle-down me-1"></i>
        <i class="fi fi-@(Phone.Region.ToLower())" style="font-size: 1rem"></i>
    </button>
    <InputText type="text" @bind-Value="Phone.Number" class="form-control"/>
</div>

<Modal @ref="Modal" IsKeyboard="true" IsBackdrop="true">
    <ModalDialog Title="Страна" IsScrolling="true" CloseButtonText="Закрыть">
        <BodyTemplate>
            <div class="mb-3">
                <input @bind-value="Search"
                       @oninput="SearchCountries"
                       class="form-control" placeholder="Поиск страны..."/>
            </div>
            <div class="list-group list-group-flush">
                @foreach (var country in FilteredCountries)
                {
                    <button type="button"
                            class="list-group-item list-group-item-action @(country.Alpha2.Equals(Phone.Region) ? "list-group-item-primary" : "")"
                            @onclick="@(() => SetRegion(country.Alpha2))">
                        <i class="fi fi-@(country.Alpha2.ToLower())" style="font-size: 1rem"></i>
                        <span class="ms-2">@country.Native <small class="text-muted">(@country.TitleRu, +@country.Phone)</small></span>
                    </button>
                }
            </div>
        </BodyTemplate>
    </ModalDialog>
</Modal>

@code {

    [Parameter]
    public IPhone Phone { get; set; } = null!;
    
    private string? Search { get; set; }
    
    private Modal Modal { get; set; } = new();

    private void ShowModal()
    {
        if (!Countries.Any())
        {
            Countries = Db.Countries.OrderBy(x => x.TitleRu).ToList();
        }
        FilteredCountries = RandomCountries();
        Modal.Toggle();
    }
    
    private List<Country> RandomCountries() => Countries.OrderBy(_ => Guid.NewGuid()).Take(12).ToList();
    
    private void SetRegion(string region)
    {
        Phone.Region = region.ToUpper();
        Modal.Toggle();
    }
    
    private void SearchCountries(ChangeEventArgs e)
    {
        Search = (string) (e.Value ?? "");
        var searchLowercase = Search.ToLower();
        FilteredCountries = string.IsNullOrEmpty(Search)
            ? RandomCountries()
            : Countries.Where(x => x.TitleEn.ToLower().Contains(searchLowercase) 
                                   || x.TitleRu.ToLower().Contains(searchLowercase) 
                                   || x.Alpha2.ToLower().StartsWith(searchLowercase)
                                   || x.Continent.ToLower().Contains(searchLowercase)
                                   || x.Capital.ToLower().Contains(searchLowercase)
                                   || x.Phone.StartsWith(Search)
                                   || x.Native.ToLower().Contains(searchLowercase)).Take(12).ToList();
    }
    
    private List<Country> Countries { get; set; } = new();
    private List<Country> FilteredCountries { get; set; } = new();

}