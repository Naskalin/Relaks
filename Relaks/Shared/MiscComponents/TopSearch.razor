@using Relaks.Database
@using Relaks.Database.Repositories
@using Relaks.Models
@using System.Collections

@inject AppDbContext Db;
@inject NavigationManager NavigationManager;

<div class="top-search position-relative w-100"
     @onfocusin="() => IsFocus = true"
     @onfocusout="FocusFalseAsync">
    <TextEdit
        @ref="InputRef"
        Class="w-100 rounded-0 border-0 top-search__input"
        Placeholder="Поиск..."
        TextChanged="HandleInput"
        KeyDown="OnKeyDown"/>
    @if (Items.Any() && IsFocus)
    {
        <div class="position-absolute">
            <ul class="list-group list-group-flush rounded-0 bg-dark">
                @{var index = 0;}
                @foreach (var item in Items)
                {
                    {
                        int loopIndex = index;
                        <li class="list-group-item cursor-pointer cursor-list-group-item-action @(_selectedIndex.Equals(loopIndex) ? "bg-primary bg-opacity-50" : "")"
                            @onmouseover="() => _selectedIndex = loopIndex"
                            @onclick="() => GoTo(loopIndex)">

                            <div class="row">
                                <div class="col-auto" style="width: 40px">
                                    <i class="@EntityIcon.ByClassName(item.EntityName) la-lg"></i>
                                </div>
                                <div class="col">
                                    <div class="top-search__result">@((MarkupString) item.Snippet)</div>
                                </div>
                            </div>
                        </li>
                        index++;
                    }
                }
            </ul>
        </div>
    }
</div>

@code {

    private TextEdit InputRef { get; set; } = null!;
    private List<FtsSearchResult> Items { get; set; } = new();
    private bool IsFocus { get; set; } = false;
    private int _selectedIndex = -1;

    private async Task FocusFalseAsync()
    {
        if (!IsFocus) return;
        await Task.Delay(TimeSpan.FromMilliseconds(100));
        IsFocus = false;
    }
    
    private void OnKeyDown(KeyboardEventArgs e)
    {
        if (!IsFocus) return;
        var isSelectedIndex = _selectedIndex > -1;
    
        switch (e.Key)
        {
            case "ArrowUp":
                if (!Items.Any()) return;
                if (!isSelectedIndex)
                {
                    _selectedIndex = Items.Count - 1;
                }
                else
                {
                    var previous = _selectedIndex - 1;
                    if (previous > -1) _selectedIndex -= 1;
                }
                break;
            case "ArrowDown":
                if (!Items.Any()) return;
                if (!isSelectedIndex)
                {
                    _selectedIndex = 0;
                }
                else
                {
                    var next = _selectedIndex + 1;
                    if (next < Items.Count)
                    {
                        _selectedIndex += 1;
                    }
                }
                break;
            case "Enter":
                GoTo(_selectedIndex);
                break;
            case "Escape":
                Reset();
                break;
        }
    }
    
    private void GoTo(int index)
    {
        var item = Items.ElementAtOrDefault(index);
        if (item == null) return;

        if (item.FtsEntityName.Equals(nameof(FtsEntry)))
        {
            NavigationManager.NavigateTo("/entries/" + item.EntryId);
        } else if (item.FtsEntityName.Equals(nameof(FtsEntryInfo)))
        {
            NavigationManager.NavigateTo("/entries/" + item.EntryId + "?entryInfoId=" + item.EntryInfoId);
        }
        
        Reset();
    }
    
    private void Reset()
    {
        Items = new List<FtsSearchResult>();
        InputRef.Text = "";
        _selectedIndex = -1;
    }

    private void HandleInput(string str)
    {
        if (string.IsNullOrEmpty(str.Trim()))
        {
            Items = new List<FtsSearchResult>();
        }
        else
        {
            var results = Db.FtsSearch(str);
            Items = results;
        }
        _selectedIndex = -1;
    }

}