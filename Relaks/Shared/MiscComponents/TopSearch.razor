@using Relaks.Database
@using Relaks.Database.Repositories
@using Relaks.Models
@using System.Collections
@using System.Globalization
@using Console = System.Console

@inject AppDbContext Db;
@inject NavigationManager NavigationManager;

<div class="top-search position-relative"
     @onfocusin="@(() => IsFocus = true)"
     @onfocusout="OnFocusFalseAsync">
    <div class="input-group">
        <div class="input-group-text top-search__check">
            <label for="top-search-archive-checkbox">
                <input id="top-search-archive-checkbox" class="form-check-input" @bind="@Req.IsDeleted" @oninput="@OnChangeIsDeleted" type="checkbox">
                по архиву
            </label>
        </div>
        <input type="text"
               placeholder="Что ищем?..."
               class="form-control form-control-lg"
               @bind="@Req.Search"
               @onkeydown="HandleKeyDown"
               @oninput="HandleInput">
    </div>
    @if (Items.Any())
    {
        <div class="position-absolute top-search__results">
            <ul class="list-group">
                @{ var index = 0; }
                @foreach (var item in Items)
                {
                    {
                        int loopIndex = index;
                        <li class="@ItemClasses(item, loopIndex)"
                            @onmouseover="() => _selectedIndex = loopIndex"
                            @onclick="() => GoTo(loopIndex)">

                            <div class="row">
                                <div class="col-auto" style="width: 40px">
                                    <i class="@EntityIcon.ByClassName(item.EntityName) la-lg"></i>
                                </div>
                                <div class="col">
                                    @if (!string.IsNullOrEmpty(item.DeletedAt))
                                    {
                                        <div>
                                            <span class="badge bg-danger bg-opacity-75 text-white">
                                                <i class="las la-trash la-lg"></i>
                                                @ToDate(item.DeletedAt)
                                            </span>
                                        </div>
                                    }
                                    <div class="fts-result">
                                        @((MarkupString) item.Snippet)
                                    </div>
                                </div>
                            </div>
                        </li>
                        index++;
                    }
                }
            </ul>
        </div>
    }
</div>

@code {
    private List<FtsSearchAllResult> Items { get; set; } = new();
    private FtsSearchAllRequest Req { get; set; } = new();
    private bool IsFocus { get; set; } = false;
    private int _selectedIndex = -1;

    private string ItemClasses(FtsSearchAllResult item, int loopIndex)
    {
        var arr = new List<string>()
        {
            "list-group-item",
            "cursor-pointer",
            "cursor-list-group-item-action"
        };

        if (loopIndex.Equals(_selectedIndex))
            arr.Add("active");

        return string.Join(" ", arr);
    }

    private async Task OnFocusFalseAsync()
    {
        IsFocus = false;
        await Task.Delay(TimeSpan.FromMilliseconds(250));
        if (IsFocus) return;
        Reset();
    }

    private string ToDate(string strDate)
    {
        var d = DateTime.Parse(strDate);
        return d.ToLocalTime().ToString("dd.MM.yyyy HH:mm");
    }

    private void HandleKeyDown(KeyboardEventArgs e)
    {
        if (!IsFocus) return;
        var hasSelectedIndex = _selectedIndex > -1;

        switch (e.Key)
        {
            case "ArrowUp":
                if (!Items.Any()) return;
                if (!hasSelectedIndex)
                {
                    _selectedIndex = Items.Count - 1;
                }
                else
                {
                    var previous = _selectedIndex - 1;
                    if (previous > -1)
                    {
                        _selectedIndex -= 1;
                    }
                    else
                    {
                        _selectedIndex = Items.Count - 1;
                    }
                }
                break;
            case "ArrowDown":
                if (!Items.Any()) return;
                if (!hasSelectedIndex)
                {
                    _selectedIndex = 0;
                }
                else
                {
                    var next = _selectedIndex + 1;
                    if (next < Items.Count)
                    {
                        _selectedIndex += 1;
                    }
                    else
                    {
                        _selectedIndex = 0;
                    }
                }
                break;
            case "Enter":
                GoTo(_selectedIndex);
                break;
            case "Escape":
                Reset();
                break;
        }
    }

    private void GoTo(int index)
    {
        var item = Items.ElementAtOrDefault(index);
        if (item == null) return;

        Reset();

        if (item.FtsEntityName.Equals(nameof(FtsEntry)))
        {
            NavigationManager.NavigateTo("/entries/" + item.EntryId);
        }
        else if (item.FtsEntityName.Equals(nameof(FtsEntryInfo)))
        {
            NavigationManager.NavigateTo("/entries/" + item.EntryId + "?entryInfoId=" + item.EntryInfoId);
        }
    }

    private void Reset()
    {
        Items = new List<FtsSearchAllResult>();
        Req = new FtsSearchAllRequest();
        _selectedIndex = -1;
    }

    private void HandleInput(ChangeEventArgs e)
    {
        IsFocus = true;
        Req.Search = e.Value?.ToString();
        _selectedIndex = -1;
        FindData();
    }


    private void OnChangeIsDeleted(ChangeEventArgs e)
    {
        Req.IsDeleted = (bool?) e.Value;
        IsFocus = true;
        FindData();
    }

    private void FindData()
    {
        var results = Db.FtsSearchAll(Req);
        Items = results;
    }

}