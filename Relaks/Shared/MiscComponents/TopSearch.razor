@using Relaks.Database
@using Relaks.Database.Repostitories
@using Relaks.Models

@inject AppDbContext Db;
@inject NavigationManager NavigationManager;

<div class="header-search position-relative w-100"
     @onfocusin="() => IsFocus = true"
     @onfocusout="() => IsFocus = false">
    <TextEdit
        @ref="InputRef"
        Class="w-100 rounded-0 border-0 top-search__input"
        Placeholder="Поиск..."
        TextChanged="HandleInput"
        KeyDown="OnKeyDown"/>
    @if (Items.Any())
    {
        <div class="top-search__results position-absolute">
            <ListGroup Class="rounded-0">
                @foreach (var item in Items)
                {
                    <ListGroupItem Color="@(item.Id.Equals(SelectedEntryId) ? Color.Primary : Color.Default)"
                                   Class="cursor-pointer top-search__list-item"
                                   @onclick="() => GoToEntry(item.Id)"
                                   @onmouseover="() => SelectedEntryId = item.Id"
                                   >
                        @item.Name
                    </ListGroupItem>
                }
            </ListGroup>
        </div>
    }
</div>

@code {

    private TextEdit InputRef { get; set; } = null!;
    private List<Entry> Items { get; set; } = new();
    private bool IsFocus { get; set; } = false;
    private Guid? SelectedEntryId { get; set; } = null;

    private void OnKeyDown(KeyboardEventArgs e)
    {
        if (!IsFocus) return;

        switch (e.Key)
        {
            case "ArrowUp":
                if (!Items.Any()) return;
                if (!SelectedEntryId.HasValue)
                {
                    SelectedEntryId = Items.Last().Id;
                }
                else
                {
                    var previous = Items.TakeWhile(x => !x.Id.Equals(SelectedEntryId.Value)).LastOrDefault();
                    if (previous != null)
                    {
                        SelectedEntryId = previous.Id;
                    }
                }
                break;
            case "ArrowDown":
                if (!Items.Any()) return;
                if (!SelectedEntryId.HasValue)
                {
                    SelectedEntryId = Items.First().Id;
                }
                else
                {
                    var next = Items.SkipWhile(x => !x.Id.Equals(SelectedEntryId.Value)).Skip(1).FirstOrDefault();
                    if (next != null)
                    {
                        SelectedEntryId = next.Id;
                    }
                }
                break;
            case "Enter":
                GoToEntry(SelectedEntryId);
                break;
            case "Escape":
                Reset();
                break;
        }
    }

    private void GoToEntry(Guid? entryId)
    {
        if (entryId.HasValue)
        {
            NavigationManager.NavigateTo("/entries/" + entryId.Value);
        }
        Reset();
    }

    private void Reset()
    {
        Items = new List<Entry>();
        InputRef.Text = "";
        SelectedEntryId = null;
    }

    private void HandleInput(string str)
    {
        if (string.IsNullOrEmpty(str.Trim()))
        {
            Items = new List<Entry>();
        }
        else
        {
            var q = Db.Entries.Search(str.Trim());
            Items = q.Take(15).ToList();
        }
        SelectedEntryId = null;
    }

}