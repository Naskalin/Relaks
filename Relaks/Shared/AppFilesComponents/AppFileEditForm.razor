@using Relaks.Models.Store
@using Relaks.Database
@using Relaks.Database.Repositories
@using Relaks.Mappers
@using Relaks.Models
@using Microsoft.EntityFrameworkCore
@using System.Text.Json
@using Relaks.Interfaces
@using Relaks.Managers

@inject AppDbContext Db;
@inject IJSRuntime JsRuntime;
@inject AppFileManager AppFileManager;

<div class="row align-items-center mb-3 gx-3">
    <div class="col-auto">
        <button @onclick="@HandleCancel" class="btn btn-outline-secondary">
            <i class="las la-arrow-left la-lg me-1 "></i> @Resources.Action.Return
        </button>
    </div>
    <div class="col">
        <h4 class="m-0">Изменить файл</h4>
    </div>
</div>

@* <Dump Data="@SelectedTags"/> *@
<EditForm Model="@Req" OnSubmit="@OnSubmit">
    <FluentValidationValidator @ref="Validator" DisableAssemblyScanning="@true"/>
    <ValidationSummary/>
    
    <div class="mb-3">
        <label for="" class="form-label">@Resources.Action.Title *</label>
        <input type="text" @bind-value="@Req.DisplayName" minlength="2" maxlength="255" class="form-control" required="required">
        <ValidationMessage For="@(() => Req.DisplayName)"/>
    </div>

    <div class="mb-3">
        <label for="" class="form-label">Выберите категорию</label>
        <InputSelect @bind-Value="Req.CategoryId" class="form-select">
            <option value="">(Без категории)</option>
            @foreach (var item in Store.Categories.ToTreeSelect())
            {
                <option value="@item.Value">@item.Title</option>
            }
        </InputSelect>
    </div>

    <div class="mb-3">
        <label for="" class="form-label">Выберите метки</label>
        
        <CheckboxList TValue="List<Guid>" Items="@AllTags" @bind-Value="SelectedTags"/>
    </div>
    
    <SoftDeletedReasonField SoftDeletedReason="@Req"/>

    <button class="btn btn-primary">
        <i class="las la-lg me-1 la-edit"></i>
        @Resources.Action.SaveChanges
    </button>
</EditForm>

@if (BaseFile.DeletedAt != null)
{
    <div class="text-end">
        <button type="button" class="btn btn-link text-danger" @onclick="@OnDelete">
            <i class="las la-trash la-lg"></i>
            @Resources.Action.Delete
        </button>
    </div>   
}

@code {
    
    [CascadingParameter]
    [Parameter]
    public AppFileListStore Store { get; set; } = null!;

    [Parameter]
    public EventCallback OnStateHasChanged { get; set; }
    
    private FluentValidationValidator Validator { get; set; } = null!;

    private async Task HandleCancel()
    {
        Store.BodyState = AppFileListStore.BodyStateEnum.Default;
        await OnStateHasChanged.InvokeAsync();
    }

    private BaseFileRequest Req { get; set; } = new();
    private BaseFile BaseFile { get; set; } = null!;
    private List<SelectedItem> AllTags { get; set; } = new();
    private List<Guid> SelectedTags { get; set; } = new();

    protected override void OnParametersSet()
    {
        if (!Store.BodyEditId.HasValue) return;

        BaseFile = Db.BaseFiles
            .Include(x => x.Tags)
            .First(x => x.Id.Equals(Store.BodyEditId.Value));

        BaseFile.MapTo(Req);
        AllTags = Store.Tags.Select(x => new SelectedItem(x.Id.ToString(), x.Title)).ToList();
        SelectedTags = BaseFile.Tags.Select(x => x.Id).ToList();
    }

    private async Task OnSubmit()
    {
        if (!await Validator.ValidateAsync()) return;
        
        Req.MapTo(BaseFile);
        UpdateTags(); 
        await Db.SaveChangesAsync();
        Store.FindFiles();
        Store.BodyState = AppFileListStore.BodyStateEnum.Default;
        Store.BodyEditId = null;
        await OnStateHasChanged.InvokeAsync();
    }

    private void UpdateTags()
    {
        var currentTagIds = BaseFile.Tags.Select(x => x.Id).ToList();
        // К добавлению - Исключаем из всех новых тегов имеющеися
        var newTagIds = SelectedTags.Except(currentTagIds).ToList();
        // К удалению - Исключаем из текущих тегов все новые
        var deleteTagIds = currentTagIds.Except(SelectedTags).ToList();

        if (newTagIds.Any())
        {
            Db.BaseFileTags.Where(x => newTagIds.Contains(x.Id)).ToList().ForEach(tag => BaseFile.Tags.Add(tag));   
        }
        if (deleteTagIds.Any())
        {
            Db.BaseFileTags.Where(x => deleteTagIds.Contains(x.Id)).ToList().ForEach(tag => BaseFile.Tags.Remove(tag));   
        }
    }
    
    private async Task OnDelete()
    {
        if (BaseFile.DeletedAt == null) return;
        var isConfirmed = await JsRuntime.InvokeAsync<bool>("confirm", Resources.Action.Delete_Confirmation);
        if (!isConfirmed) return;

        AppFileManager.DeleteIfExists(BaseFile);
        Db.BaseFiles.Remove(BaseFile);
        await Db.SaveChangesAsync();
        Store.BodyState = AppFileListStore.BodyStateEnum.Default;
        Store.BodyEditId = null;
        Store.FindFiles();
        await OnStateHasChanged.InvokeAsync();
    }
}