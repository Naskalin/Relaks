@using Relaks.Models
@using Relaks.Database
@using Relaks.Database.Repositories
@using Relaks.Models.Misc

@inject AppDbContext Db;

<div class="row">
    <div class="col-3">
        <div class="mb-3">
            <div class="input-group">
                <input type="text" class="form-control" @bind="@Req.Search" @oninput="@OnInputSearch" placeholder="Поиск...">
                <button class="btn btn-outline-secondary" type="button" @onclick="@(() => { Req.Search = null; FindData(); })">
                    <i class="las la-times la-lg"></i>
                </button>
            </div>
        </div>

        @* <div class="mb-3"> *@
        @*     <div class="form-check"> *@
        @*         <input class="form-check-input" type="checkbox" id="entry-search-archive-checkbox" @oninput="@OnChangeIsDeleted"> *@
        @*         <label class="form-check-label" for="entry-search-archive-checkbox"> *@
        @*             Архивные файлы *@
        @*         </label> *@
        @*     </div> *@
        @* </div> *@
        <Dump Data="@Req"/>
        <div class="mb-3">
            <div class="form-check form-switch">
                <InputCheckbox class="form-check-input" type="checkbox" @bind-Value="@Req.IsDeleted" @oninput="@OnChangeIsDeleted" id="@Ids["IsDeleted"]"/>
                <label class="form-check-label" for="@Ids["IsDeleted"]">Архивные файлы</label>
            </div>
        </div>
        <div>tags</div>
        <div>categories</div>

    </div>
    <div class="col-9">
        <MyPagination ActivePage="@Req.Page"
                      OnPageChanged="@OnPageChanged"
                      TotalItems="@Result.Total"
                      TotalPages="@Result.PageCount"/>

        <table class="table table-bordered table-hover align-middle">
            <thead>
            <tr style="@(!string.IsNullOrEmpty(Req.Search) ? "opacity: .3; cursor: not-allowed;" : "")">
                <th style="width: 80px"></th>
                <th @onclick="@(() => OnSortChange(nameof(BaseFile.DisplayName)))" class="cursor-pointer">
                    Имя <OrderableIcon Orderable="@Req" Prop="@nameof(BaseFile.DisplayName)"/>
                </th>
                <th style="width: 150px" @onclick="@(() => OnSortChange(nameof(BaseFile.CreatedAt)))" class="cursor-pointer">
                    Создан <OrderableIcon Orderable="@Req" Prop="@nameof(BaseFile.CreatedAt)"/>
                </th>
                <th style="width: 150px">Категория</th>
                <th style="width: 150px">Метки</th>
            </tr>
            </thead>
            <tbody>
            @if (Result.Items.Any())
            {
                @foreach (var item in Result.Items)
                {
                    <AppFileListItem AppFile="@item"/>
                }
            }
            else
            {
                <tr>
                    <td colspan="100%" class="text-muted">
                        <i class="las la-frown la-lg"></i> @Resources.Action.NotFoundResults
                    </td>
                </tr>
            }

            </tbody>
        </table>

        <MyPagination ActivePage="@Req.Page"
                      OnPageChanged="@OnPageChanged"
                      TotalItems="@Result.Total"
                      TotalPages="@Result.PageCount"/>
    </div>
</div>

@code {

    private Dictionary<string, Guid> Ids { get; set; } = new()
    {
        {"IsDeleted", Guid.NewGuid()}
    };

    [Parameter]
    public Guid? EntryId { get; set; }

    private AppFileFindRequest Req { get; set; } = new()
    {
        Page = 1,
        PerPage = 2,
    };

    private PaginatableResult<AppFileFindResult> Result { get; set; } = new();

    // private static Dictionary<string, string?> EntryDiscriminators() => new()
    // {
    //     {Resources.Action.All, null},
    //     {Resources.Entity.EPerson, nameof(EPerson)},
    //     {Resources.Entity.ECompany, nameof(ECompany)},
    //     {Resources.Entity.EMeet, nameof(EMeet)},
    // };
    //

    [Parameter]
    public EventCallback<Guid> OnRowDoubleClicked { get; set; }

    [Parameter]
    public EventCallback<Guid> OnRowClicked { get; set; }

    private void OnSortChange(string field)
    {
        if (!string.IsNullOrEmpty(Req.Search)) return;
        if (Req.IsOrderByDesc is null)
        {
            Req.OrderBy = field;
            Req.IsOrderByDesc = false;
        }
        else if (Req.IsOrderByDesc is false)
        {
            if (field.Equals(Req.OrderBy))
            {
                Req.IsOrderByDesc = true;
            }
            else
            {
                Req.OrderBy = field;
                Req.IsOrderByDesc = false;
            }
        }
        else
        {
            if (field.Equals(Req.OrderBy))
            {
                Req.OrderBy = null;
                Req.IsOrderByDesc = null;
            }
            else
            {
                Req.OrderBy = field;
                Req.IsOrderByDesc = false;
            }
        }

        FindData();
    }

    private void OnChangeIsDeleted(ChangeEventArgs e)
    {
        Req.IsDeleted = (bool) (e.Value ?? false);
        
        Req.Page = 1;
        FindData();
    }

    private void OnPageChanged(int page)
    {
        Req.Page = page;
        FindData();
    }

    private void OnChangeDiscriminator(string? discriminator)
    {
        Req.Page = 1;
        Req.Discriminator = discriminator;
        FindData();
    }


    private void OnInputSearch(ChangeEventArgs e)
    {
        Req.Search = e.Value?.ToString();
        Req.Page = 1;
        FindData();
    }

    private void FindData()
    {
        Result = Db.FindFiles(Req);
    }

    // protected override void OnInitialized()
    // {
    //     
    // }

    protected override void OnParametersSet()
    {
        Req.EntryId = EntryId;
        FindData();
    }

}