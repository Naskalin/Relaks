@using Relaks.Models
@using Relaks.Database
@using Relaks.Database.Repositories
@using Relaks.Models.Misc
@using Relaks.Models.Store

@inject AppDbContext Db;

<Dump Data="@Store.Req"/>
@AppFileCategoryNew

<CascadingValue Value="@Store">
    <div class="row">
        <div class="col-3">
            @switch (Store.State)
            {
                case AppFileListStore.StateEnum.Default:
                    <AppFileDefaultSidebar OnStateHasChanged="@StateHasChanged"/>
                    break;
            }

        </div>
        <div class="col-9">
            <div class="d-flex gap-3 align-items-center">
                <div class="mb-3">Всего найдено: @Store.Result.Total</div>
            </div>
            <table class="table table-bordered table-hover align-middle">
                <thead>
                <tr style="@(!string.IsNullOrEmpty(Store.Req.Search) ? "opacity: .3; cursor: not-allowed;" : "")">
                    <th style="width: 80px"></th>
                    <th @onclick="@(() => OnSortChange(nameof(BaseFile.DisplayName)))" class="cursor-pointer">
                        Имя <OrderableIcon Orderable="@Store.Req" Prop="@nameof(BaseFile.DisplayName)"/>
                    </th>
                    <th style="width: 150px" @onclick="@(() => OnSortChange(nameof(BaseFile.CreatedAt)))" class="cursor-pointer">
                        Создан <OrderableIcon Orderable="@Store.Req" Prop="@nameof(BaseFile.CreatedAt)"/>
                    </th>
                    <th style="width: 150px">Категория</th>
                    <th style="width: 150px">Метки</th>
                </tr>
                </thead>
                <tbody>
                @if (Store.Result.Items.Any())
                {
                    @foreach (var item in Store.Result.Items)
                    {
                        <AppFileListItem AppFile="@item"/>
                    }
                }
                else
                {
                    <tr>
                        <td colspan="100%" class="text-muted">
                            <i class="las la-frown la-lg"></i> @Resources.Action.NotFoundResults
                        </td>
                    </tr>
                }
                </tbody>
            </table>
        </div>
    </div>
</CascadingValue>

@code {

    private AppFileListStore Store { get; set; } = null!;

    [Parameter]
    public Guid? EntryId { get; set; }

    [Parameter]
    public bool? WithEdit { get; set; }

    [Parameter]
    public EventCallback<Guid> OnRowDoubleClicked { get; set; }

    [Parameter]
    public EventCallback<Guid> OnRowClicked { get; set; }

    [Parameter]
    public string? AppFileCategoryNew { get; set; }

    private void OnSortChange(string field)
    {
        if (!string.IsNullOrEmpty(Store.Req.Search)) return;
        if (Store.Req.IsOrderByDesc is null)
        {
            Store.Req.OrderBy = field;
            Store.Req.IsOrderByDesc = false;
        }
        else if (Store.Req.IsOrderByDesc is false)
        {
            if (field.Equals(Store.Req.OrderBy))
            {
                Store.Req.IsOrderByDesc = true;
            }
            else
            {
                Store.Req.OrderBy = field;
                Store.Req.IsOrderByDesc = false;
            }
        }
        else
        {
            if (field.Equals(Store.Req.OrderBy))
            {
                Store.Req.OrderBy = null;
                Store.Req.IsOrderByDesc = null;
            }
            else
            {
                Store.Req.OrderBy = field;
                Store.Req.IsOrderByDesc = false;
            }
        }

        Store.FindData();
    }

    private void OnChangeDiscriminator(string? discriminator)
    {
        Store.Req.Discriminator = discriminator;
        Store.FindData();
    }

    protected override void OnParametersSet()
    {
        Store = new AppFileListStore(Db)
        {
            EntryId = EntryId,
            Req = {EntryId = EntryId}
        };

        Store.FindData();
    }

}