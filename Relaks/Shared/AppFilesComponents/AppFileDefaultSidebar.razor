@using Relaks.Models.Store
@using Relaks.Database.Repositories

@* <Dump Data="@Store.Req"/> *@

<div class="mb-3">
    <div class="input-group">
        <input type="text" class="form-control" @bind="@Store.Req.Search" @oninput="@OnInputSearch" placeholder="Поиск...">
        <button class="btn btn-outline-secondary" type="button" @onclick="@OnCleanSearch">
            <i class="las la-times la-lg"></i>
        </button>
    </div>
</div>

<div class="mb-3">
    <div class="form-check form-switch">
        <InputCheckbox class="form-check-input" type="checkbox" @bind-Value="@Store.Req.IsDeleted" @oninput="@OnChangeIsDeleted" id="@Ids["IsDeleted"]"/>
        <label class="form-check-label" for="@Ids["IsDeleted"]">Архивные файлы</label>
    </div>
</div>

<AppFileSidebarHeader Title="Категории"
                      WithAdd="@Store.WithEdit"
                      WithEdit="@Store.WithEdit"
                      EditText="Выберите категорию для изменения"
                      IsEdit="@Store.State.Equals(AppFileListStore.StateEnum.EditCategories)"
                      OnEdit="@SwitchEditCategories"
                      OnAdd="@(() => { Store.State = AppFileListStore.StateEnum.AddCategory; OnStateChanged.InvokeAsync();})"/>
<ul class="my-tree">
    @foreach (var category in Store.Categories)
    {
        <AppFileCategoryItem Category="@category" OnStateChanged="@(() => OnStateChanged.InvokeAsync())"/>
    }
</ul>

<AppFileSidebarHeader Title="Метки"
                      WithAdd="@Store.WithEdit"
                      WithEdit="@Store.WithEdit"
                          EditText="Выберите метку для изменения"
                                            IsEdit="@Store.State.Equals(AppFileListStore.StateEnum.EditTags)"
                      OnEdit="@SwitchEditTags"
                      OnAdd="@(() => { Store.State = AppFileListStore.StateEnum.AddTag; OnStateChanged.InvokeAsync();})"/>
<div class="d-flex flex-wrap gap-2">
    @foreach (var tag in Store.Tags)
    {
        <AppFileTagItem Tag="@tag" OnStateChanged="@(() => OnStateChanged.InvokeAsync())"/>
    }
</div>

@code {

    private Dictionary<string, Guid> Ids { get; set; } = new()
    {
        {"IsDeleted", Guid.NewGuid()}
    };

    [Parameter]
    public EventCallback OnStateChanged { get; set; }

    [CascadingParameter]
    [Parameter]
    public AppFileListStore Store { get; set; } = null!;

    private async Task OnInputSearch(ChangeEventArgs e)
    {
        Store.Req.Search = e.Value?.ToString();
        Store.FindFiles();
        await OnStateChanged.InvokeAsync();
    }

    private async Task OnChangeIsDeleted(ChangeEventArgs e)
    {
        Store.Req.IsDeleted = (bool) (e.Value ?? false);
        Store.FindFiles();
        await OnStateChanged.InvokeAsync();
    }

    private async Task OnCleanSearch()
    {
        Store.Req.Search = null;
        Store.FindFiles();
        await OnStateChanged.InvokeAsync();
    }

    private Task SwitchEditCategories()
    {
        if (Store.Req.CategoryId.HasValue && Store.State.Equals(AppFileListStore.StateEnum.Default))
        {
            Store.State = AppFileListStore.StateEnum.EditCategory;
            Store.EditId = Store.Req.CategoryId.Value;
        }
        else
        {
            Store.State = Store.State.Equals(AppFileListStore.StateEnum.EditCategories)
                ? AppFileListStore.StateEnum.Default
                : AppFileListStore.StateEnum.EditCategories
                ;   
        }

        StateHasChanged();
        OnStateChanged.InvokeAsync();
        return Task.CompletedTask;
    }

    private Task SwitchEditTags()
    {
        if (Store.Req.TagIds.Count.Equals(1) && Store.State.Equals(AppFileListStore.StateEnum.Default))
        {
            Store.State = AppFileListStore.StateEnum.EditTag;
            Store.EditId = Store.Req.TagIds.First();
        }
        else
        {
            Store.State = Store.State.Equals(AppFileListStore.StateEnum.EditTags)
                ? AppFileListStore.StateEnum.Default
                : AppFileListStore.StateEnum.EditTags
                ;   
        }

        StateHasChanged();
        OnStateChanged.InvokeAsync();
        return Task.CompletedTask;
    }

    protected override void OnParametersSet()
    {
    }

}