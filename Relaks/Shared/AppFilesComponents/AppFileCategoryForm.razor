@using Relaks.Models.Store
@using Relaks.Models
@using Relaks.Database
@using Relaks.Database.Repositories
@using Relaks.Managers
@using Relaks.Mappers

@inject AppDbContext Db;

<AppFileSidebarHeader Title="@(Store.SidebarState.Equals(AppFileListStore.SidebarStateEnum.AddCategory) ? $"{Resources.Action.Add} категорию" : $"{Resources.Action.Edit} категорию")" 
                      WithBackLink="@true"
                      OnBackLink="@GoBack"/>

<EditForm Model="@Model" OnSubmit="@OnSubmit">
    <FluentValidationValidator @ref="Validator" DisableAssemblyScanning="@true"/>
    <ValidationSummary/>
    
    <div class="mb-3">
        <label for="" class="form-label">@Resources.Action.Title *</label>
        <input type="text" @bind-value="@Model.Title" class="form-control">
        <ValidationMessage For="@(() => Model.Title)"/>
    </div>
    
    <div class="mb-3">
        <label for="" class="form-label">Родительская категория</label>
        <InputSelect @bind-Value="Model.ParentId" class="form-select">
            <option value="">(Без родителя)</option>
            @foreach (var item in Store.Categories.ToTreeSelect())
            {
                <option value="@item.Value">@item.Title</option>
            }
        </InputSelect>
        <ValidationMessage For="@(() => Model.ParentId)"/>
    </div>

    <div class="mb-3">
        <button class="btn btn-primary">
            <i class="las la-lg me-1 @(Store.SidebarState.Equals(AppFileListStore.SidebarStateEnum.EditCategory) ? "la-edit" : "la-plus-circle")"></i>
            @(Store.SidebarState.Equals(AppFileListStore.SidebarStateEnum.EditCategory) ? Resources.Action.SaveChanges : Resources.Action.Add)
        </button>
    </div>
</EditForm>

@code {
    
    [CascadingParameter]
    [Parameter]
    public AppFileListStore Store { get; set; } = null!;

    [Parameter]
    public EventCallback OnStateHasChanged { get; set; }

    private async Task GoBack()
    {
        Store.SidebarState = AppFileListStore.SidebarStateEnum.Default;
        await OnStateHasChanged.InvokeAsync();
    }

    private FluentValidationValidator Validator { get; set; } = null!;
    
    private BaseFileCategory Model { get; set; } = null!;

    protected override void OnParametersSet()
    {
        if (Store.EntryId.HasValue)
        {
            if (Store.SidebarState.Equals(AppFileListStore.SidebarStateEnum.AddCategory))
            {
                Model = new EntryFileCategory()
                {
                    EntryId = Store.EntryId.Value
                };
            } else if (Store.SidebarEditId.HasValue && Store.SidebarState.Equals(AppFileListStore.SidebarStateEnum.EditCategory))
            {
                Model = Db.EntryFileCategories.First(x => x.Id.Equals(Store.SidebarEditId.Value));
            }
        }
        else
        {
            throw new NotSupportedException("EntryId not found");
        }
    }

    private async Task OnSubmit()
    {
        if (!await Validator.ValidateAsync()) return;
        if (Store.EntryId.HasValue)
        {
            var q = Db.EntryFileCategories.Where(x => x.EntryId.Equals(Store.EntryId.Value));
            
            var entryFileCategory = (EntryFileCategory) Model;
            entryFileCategory.MapTo(entryFileCategory);
            var parent = q.FirstOrDefault(x => x.Id.Equals(Model.ParentId));

            if (Store.SidebarState.Equals(AppFileListStore.SidebarStateEnum.AddCategory))
            {
                TreeManager.UpdateTreePath(parent, entryFileCategory);
                Db.EntryFileCategories.Add(entryFileCategory);
            }
            else
            {
                await Db.SaveChangesAsync();
                TreeManager.SyncTreePaths(q, Model.Id, Model);   
            }

            await Db.SaveChangesAsync();
            Store.GetCategories();
            await GoBack();
        }
    }

}